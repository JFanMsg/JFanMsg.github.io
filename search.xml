<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/08/26/untitled/"/>
      <url>/2021/08/26/untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>博客来源</title>
      <link href="/2021/08/25/bo-ke-lai-yuan/"/>
      <url>/2021/08/25/bo-ke-lai-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我写博客也有一段时间了，中间经历过博客系统的故障、采用新博客系统、服务器到期迁移等。<br>也因为这些问题的产生，也有可能是我比较懒吧，中间就停更了好长一段时间。<br>现在我使用了<code>GitHub Pages</code>来做博客<br>在这里我要感谢一个人，谢谢他提供的博客模板，十分感谢，地址为：<a href="https://github.com/godweiyang/hexo-theme-sungod" target="_blank" rel="noopener">https://github.com/godweiyang/hexo-theme-sungod</a></p><h1 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h1><p>新的开始，会先将旧博客的文章迁移到新博客里面，进行分类。<br>新的开始，我会更加注重技术方向</p><h1 id="文章的分类"><a href="#文章的分类" class="headerlink" title="文章的分类"></a>文章的分类</h1><p>后续我会把文章跟文档分开<br>    1. 文章：章数不多并更开放性等<br>    2. 文档：章数比较多、技术方向比较统一等</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>top系列</title>
      <link href="/2019/02/22/linux-ming-ling/top-xi-lie/"/>
      <url>/2019/02/22/linux-ming-ling/top-xi-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a><strong>htop</strong></h2><p>htop是top的升级版，htop跟top相比，htop更加人性化，支持用户界面互动操作，支持颜色主题，支持鼠标操作等</p><p>htop在centos中是没有预装的，可以直接yum安装</p><h3 id="htop的使用"><a href="#htop的使用" class="headerlink" title="htop的使用"></a><strong>htop的使用</strong></h3><p>打开htop的界面，htop的界面一共分为五大展示区，分别是cpu展示区，内存展示区，整体状态区，进程状态区，和管理控制台</p><p><strong>cpu展示区</strong></p><p>在cpu展示区中，是通过进度条来显示每个cpu的逻辑核使用的百分比，还以颜色来进行区分</p><ol><li>蓝色：表示low-prority使用</li><li>绿色：表示normal使用情况</li><li>红色：表示kernel使用情况</li><li>青色：表示vistualiz使用情况</li></ol><p><strong>内存展示区</strong></p><p>主要分为物理内存跟swap虚拟内存的状态，也是用颜色来区分的</p><p><strong>物理内存</strong></p><ol><li>绿色：表示已经使用内存情况</li><li>蓝色：缓冲的内存使用情况</li><li>黄色：表示用于缓存的内存使用情况</li></ol><p><strong>swap虚拟内存</strong>，主要是显示交换分区的使用情况</p><p><strong>整体状态区</strong></p><p>整体状态区，不同上面二个展示区，他是以字母跟数字来显示的</p><ol><li>Tasks项：显示的是进程总数跟当前运行的进程数</li><li>Load average项：展示的是系统1分钟，5分钟，10分钟的平均负载情况</li><li>Uptime项：显示系统运行了多长时间</li></ol><p><strong>进程状态区</strong></p><p>进程状态区是展示当前系统中所有的进程，默认有12列</p><ol><li>PID：进程标志号</li><li>USER：进程所有者的用户名</li><li>PRI：进程的优先级别</li><li>NI：进程的优先级别数值</li><li>VIRT：进程占用的虚拟内存值</li><li>RES：进程占用的物理内存值</li><li>SHR：进程使用的共享内存值</li><li>S：进程的状态(其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数)</li><li>%CPU：该进程占用的CPU使用率</li><li>%MEM：该进程占用的物理内存和总内存的百分比</li><li>TIME+：该进程启动后占用的总的CPU时间</li><li>COMMAND：进程启动的启动命令名称</li></ol><p><strong>管理控制台</strong></p><p>管理控制台控制着进程的展示方式，在进程控制台有F1-F10的功能键，也有跟F1-F10对应的快捷键</p><ol><li>F1： 查看htop使用说明，快捷键(h, ?)</li><li>F2： htop 设定，快捷键(S)</li><li>F3： 搜索进程，快捷键(/)</li><li>F4： 进程过滤器，快捷键()</li><li>F5： 显示树形结构，快捷键(t)</li><li>F6： 折叠或展开（新版本），或选择排序方式(老版本)，快捷键(&lt;,&gt;)</li><li>F7： 可减少nice值，这样就可以提高对应进程的优先级，快捷键([)</li><li>F8： 可增加nice值，这样就可以降低对应进程的优先级 ，快捷键(])</li><li>F9： 可对进程传递信号，快捷键(k)</li><li>F10： 结束htop,退出，快捷键(q)</li></ol><p>要对htop的输出和展示进行设置，可鼠标点击管理控制台下的Setup或者按下F2键， 之后即可进入htop 设定的页面，Meters页面设定了顶端的一些信息显示，</p><p>顶端的显示又分为左右两侧，到底能显示些什么可以在最右侧那栏新增，要新增到上方左侧（按键F5即可）或是右侧（按键F6即可）都可以，这就是个人设定的范围了</p><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a><strong>iotop</strong></h2><p>iotop是一个用来监视磁盘I/O使用状况的top类工具，能监测到哪个进程所占的磁盘I/O值的实时信息，磁盘写入的速率，I/O的占比，磁盘的读写状态</p><p>iotop在centos中是没有预装的，可以直接yum安装</p><p>iotop的界面比较简单易懂，我就不多解释</p><h3 id="iotop的选项"><a href="#iotop的选项" class="headerlink" title="iotop的选项"></a><strong>iotop的选项</strong></h3><ol><li>-p：指定进程ID，显示该进程的IO情况</li><li>-u：指定用户名，显示该用户所有的进程IO情况</li><li>-P：–processes，只显示进程，默认为显示所有的线程</li><li>-k：–kilobytes，以千字节显示</li><li>-t：–time，在每一行前添加一个当前的时间另外，iotop还支持交互模式，在交互模式下，可以通过键盘按键进行排序、切换等操作。<ol><li>例如：<ol><li>o键：是只显示当前有IO输出的进程</li><li>左右箭头：改变排序方式，默认是按IO排序</li><li>p键：可进行线程、进程切换</li></ol></li></ol></li></ol><p>这iotop的工具十分强大，以后要是感觉到I/O值被大量的占用，就可以通过iotop来查找相关的进程</p><h3 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a><strong>iftop</strong></h3><p>iftop是一个实时流量监控工具，可以用来监控网卡的实时流量(允许指定网段)，反向解析IP，显示端口信息等</p><p>iftop在centos中是没有预装的，可以直接yum安装</p><p><strong>iftop的使用</strong></p><p>界面上面显示的是标尺的刻度范围，为显示流量图形使用</p><p>中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向</p><p>下面的参数</p><ol><li>TX：发送流量</li><li>RX：接收流量</li><li>TOTAL：总流量</li><li>Cumm：运行iftop到目前时间的总流量</li><li>peak：流量峰值</li><li>rates：分别表示过去 2s 10s 40s 的平均流量</li></ol><p><strong>iftop的操作命令</strong></p><ol><li>按h：切换是否显示帮助;</li><li>按n：切换显示本机的IP或主机名;</li><li>按s：切换是否显示本机的host信息;</li><li>按d：切换是否显示远端目标主机的host信息;</li><li>按t：切换显示格式为2行/1行/只显示发送流量/只显示接收流量;</li><li>按N：切换显示端口号或端口服务名称;</li><li>按S：切换是否显示本机的端口信息;</li><li>按D：切换是否显示远端目标主机的端口信息;</li><li>按p：切换是否显示端口信息;</li><li>按P：切换暂停/继续显示;</li><li>按b：切换是否显示平均流量图形条;</li><li>按B：切换计算2秒或10秒或40秒内的平均流量;</li><li>按T：切换是否显示每个连接的总流量;</li><li>按l：打开屏幕过滤功能，输入要过滤的字符，比如ip,按回车后，屏幕就只显示这个IP相关的流量信息;</li><li>按L：切换显示画面上边的刻度;刻度不同，流量图形条会有变化;</li><li>按j：或按k可以向上或向下滚动屏幕显示的连接记录;</li><li>按1或2或3：可以根据右侧显示的三列流量数据进行排序;</li><li>按&lt;：根据左边的本机名或IP排序;</li><li>按&gt;：根据远端目标主机的主机名或IP排序;</li><li>按o：切换是否固定只显示当前的连接;</li><li>按f：可以编辑过滤代码</li><li>按!：可以使用shell命令</li><li>按q：退出监控</li></ol><p>以上的操作命令，大多我也没试过。</p><p><strong>iftop的选项</strong></p><ol><li>-i：设定监测的网卡，例如： iftop -i eth1</li><li>-B：以bytes为单位显示流量(默认是bits)，例如： iftop -B</li><li>-n：使host信息默认直接都显示IP，例如：iftop -n</li><li>-N：使端口信息默认直接都显示端口号，例如: iftop -N</li><li>-F：显示特定网段的进出流量，例如：iftop -F 10.10.1.0/24 或 iftop -F 10.10.1.0/255.255.255.0</li><li>-h：（display this message），帮助，显示参数信息</li><li>-p：使用这个参数后，中间的列表显示的本地主机信息，出现了本机以外的IP信息;</li><li>-b：使流量图形条默认就显示;</li><li>-f：这个暂时还不太会用，过滤计算包用的;</li><li>-P：使host信息及端口信息默认就都显示;</li><li>-m：设置界面最上边的刻度的最大值，刻度分五个大段显示，例如：iftop -m 100M</li></ol><p><strong>———————————暂时更新这么多——————————————————</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动部署发布脚本</title>
      <link href="/2019/01/30/shell-jiao-ben/zi-dong-bu-shu-fa-bu-jiao-ben/"/>
      <url>/2019/01/30/shell-jiao-ben/zi-dong-bu-shu-fa-bu-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>这脚本被我写到多少文件中，分成几个脚本文件，相互关联，目前该脚本在生产环境中以开始使用，可以用于多个项目，是基于多节点的基础编写的。</p><p>还有一个密码文件，我就不发出来了，这个密码文件是sshpass命令使用的，也可以用密钥，但是我这边选择用了密码文件</p><ol><li>主脚本</li><li>变量赋值脚本</li><li>启动脚本</li><li>项目配置文件</li><li>远端启动脚本</li></ol><h2 id="主脚本-deploy-sh"><a href="#主脚本-deploy-sh" class="headerlink" title="主脚本(deploy.sh)"></a><strong>主脚本(deploy.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashif [ ! -n "$1" ];then        echo -e "\033[34m ./deploy.sh 项目(user|coupon) 分支(master|dev) mvn(compile|install) \033[0m"        exitfisource /deploy/conf/deploy.confecho ' ' > /deploy/.oasource /deploy/oa.shsleep 1newq=$(cat /deploy/.oa)if [ $newq == y ];then        echo -e "\033[32m 已获取到项目名称：$project_item \033[0m"elif [ $newq == n ];then        echo -e "\033[31m 项目名不对 \033[0m"        exitelse        echo -e "\033[31m 脚本出错 \033[0m"        exitfiecho "当前的分支名：$2"cd /deploy/git/echo "跳转到"$PWD"目录"#if [ ! -d $project_item/ ];thenrm -rf $project_srcgit clone -b $2 $project_git#else#       cd $project_src#       git fetch $project_git $2#fiif [ $? == 0 ];then        echo -e "\033[32m $project_item项目拉取成功 \033[0m"        cd $project_src        echo "跳转到"$PWD"目录"        mvn clean $3 -Dmaven.test.skip=true        if [ $? == 0 ];then                echo -e "\033[32m $project_item项目mvn成功 \033[0m"        else                echo -e "\033[31m $project_item项目mvn失败 \033[0m"                exit        fielse        echo -e "\033[31m $project_item项目拉取失败 \033[0m"        exitfiif [ $project_compile == n ];then        exitfiif [ $3 == install ];then        for i in $project_ip        do                sshpass -f $password scp -r $project_jar $i:$path        done        if [ $? == 0 ];then                echo -e "\033[32m jar架包传输成功 \033[0m"        else                echo -e "\033[31m jar架包传输失败 \033[0m"                exit        fifiif [ $3 == install ];then        if [ $project_change_nginx == n ];then                s=0                for y in $project_ip                do                        array1=(${project_ipd//,/ })                        for u in ${array[s]}                        do                                echo -e "\033[34m 当前节点IP：$u \033[0m"                                break                        done                        s=$(($s+1))                        echo ' ' > /deploy/.news                        echo ' ' > /deploy/.newe                        sshpass -f $password ssh $y "echo '$project_item' > $pate"                        sshpass -f $password ssh $y "echo '$project_port' > $pats"                        sshpass -f $password ssh $y "echo '$project_change_nginx' > $patw"                        sshpass -f $password ssh $y "/sh/.startue.sh"                        source /deploy/start.sh                        sleep 3                        newe=$(cat /deploy/.start)                        if [ "$newe" == "yes" ];then                                echo -e "\033[32m 启动成功 \033[0m"                                if [ $s == $project_node ];then                                        exit                                fi                        elif [ "$newe" == "no" ];then                                echo -e "\033[31m 启动失败 \033[0m"                                exit                        else                                echo -e "\033[31m start.sh脚本文件出错，检测不到正确的返回值 \033[0m"                                exit                        fi                done        elif [ $project_change_nginx == y ];then                s=0                for y in $project_ip                do                        array1=(${project_ipd//,/ })                        echo $array1                        for u in ${array1[s]}                        do                                echo -e "\033[34m 当前节点IP：$u \033[0m"                        done                        s=$(($s+1))                        sshpass -f $password ssh $project_nginx_ip "sed -i 's/server $u\;/\#server $u\;/' $project_nginx_path"                        if [ $? == 0 ];then                                echo -e "\033[32m 注释nginx配置成功 \033[0m"                                sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -t"                                sleep 1                                sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -s reload"                                if [ $? == 0 ];then                                        echo -e "\033[32m 重启nginx配置成功 \033[0m"                                        sshpass -f $password ssh $y "echo '$project_item' > $pate"                                        sshpass -f $password ssh $y "echo '$project_port' > $pats"                                        sshpass -f $password ssh $y "echo '$project_change_nginx' > $patw"                                        echo ' ' > /deploy/.news                                        echo ' ' > /deploy/.newe                                        sshpass -f $password ssh $y "/sh/.startue.sh"                                        source /deploy/start.sh                                        sleep 3                                        newe=$(cat /deploy/.start)                                        if [ "$newe" == "yes" ];then                                                echo -e "\033[32m 启动以成功，恢复nginx配置 \033[0m"                                                sshpass -f $password ssh $project_nginx_ip "sed -i 's/\#server $u\;/server $u\;/' $project_nginx_path"                                                if [ $? == 0 ];then                                                        echo -e "\033[32m 注释nginx配置成功 \033[0m"                                                        sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -t"                                                        sleep 1                                                        sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -s reload"                                                        #exit                                                else                                                        echo -e "\033[31m 注释nginx配置出错 \033[0m"                                                        exit                                                fi                                        elif [ "$newe" == "no" ];then                                                echo -e "\033[31m 启动失败 \033[0m"                                                exit                                        else                                                echo -e "\033[31m start.sh脚本文件出错，检测不到正确的返回值 \033[0m"                                                exit                                        fi                                else                                        echo -e "\033[31m 重启nginx配置出错 \033[0m"                                        exit                                fi                        else                                echo -e "\033[31m 注释nginx配置出错 \033[0m"                                exit                        fi                done        fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量赋值脚本-oa-sh"><a href="#变量赋值脚本-oa-sh" class="headerlink" title="变量赋值脚本(oa.sh)"></a><strong>变量赋值脚本(oa.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashsource /deploy/conf/"$1".confproject=$(ls /deploy/conf/ | grep .conf | sed -n "$pa"p | cut -d '.' -f 1,1)for i in $projectdo        if [ $i == $1 ];then                echo "y" > /deploy/.oa                break        else                echo "n" > /deploy/.oa        fidoneavatar_ip=($1"_ip")avatar_git=($1"_git")avatar_port=($1"_port")avatar_jar=($1"_jar")avatar_src=($1"_src")avatar_node=($1"_node")avatar_item=($1"_item")avatar_nginx=($1"_nginx")avatar_nginx_path=($1"_nginx_path")avatar_nginx_conf=($1"_nginx_conf")avatar_nginx_ip=($1"_nginx_ip")avatar_compile=($1"_compile")avatar_change_nginx=($1"_change_nginx")avatar_ipd=($1"_ipd")avatar_node=($1"_node")project_ip=$(eval echo '$'"${avatar_ip}")project_git=$(eval echo '$'"${avatar_git}")project_port=$(eval echo '$'"${avatar_port}")project_jar=$(eval echo '$'"${avatar_jar}")project_src=$(eval echo '$'"${avatar_src}")project_node=$(eval echo '$'"${avatar_node}")project_item=$(eval echo '$'"${avatar_item}")project_nginx=$(eval echo '$'"${avatar_nginx}")project_nginx_path=$(eval echo '$'"${avatar_nginx_path}")project_nginx_conf=$(eval echo '$'"${avatar_nginx_conf}")project_nginx_ip=$(eval echo '$'"${avatar_nginx_ip}")project_compile=$(eval echo '$'"${avatar_compile}")project_change_nginx=$(eval echo '$'"${avatar_change_nginx}")project_ipd=$(eval echo '$'"${avatar_ipd}")project_node=$(eval echo '$'"${avatar_node}")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动脚本-start-sh"><a href="#启动脚本-start-sh" class="headerlink" title="启动脚本(start.sh)"></a><strong>启动脚本(start.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashstate=$(cat /deploy/.news)w=0while [ $w -le 230 ]do        state=$(cat /deploy/.news)        if [ $state == $teme ]        then                echo -e "\033[32m 项目启动成功 \033[0m"                echo "yes" > /deploy/.start                break        elif [ $state == $teme-1 ]        then                echo -e "\033[31m 运行脚本，没有发现项目存活,尝试启动项目 \033[0m"                echo -e "\033[31m 项目启动失败 \033[0m"                echo "no" > /deploy/.start                exit        elif [ $state == $teme-2 ]        then                echo -e "\033[31m 在规定的时间内,项目端口依然存在 \033[0m"                echo -e "\033[35m 进入关闭项目序列 \033[0m"                sleep 5                continue        elif [ $state == $teme-3 ]        then                echo -e "\033[31m 在规定的时间内,项目没有成功关闭 \033[31m"                echo -e "\033[35m 进入强制关闭项目序列 \033[0m"                sleep 5                continue        elif [ $state == $teme-4 ]        then                echo -e "\033[31m 项目启动出错，没有检测到日志端口 \033[0m"                echo "no" > /deploy/.start                exit        elif [ $state == $teme-5 ]        then                echo -e "\033[31m 在规定的时间内,项目强制关闭失败 \033[0m"                echo "no" > /deploy/.start                exit        elif [ $state == $teme-6 ]        then                echo -e "\033[31m 项目PID多个，请检查 \033[0m"                echo "no" > /deploy/.start                exit        elif [ $w == 229 ]        then                echo -e "\033[31m 超过四分钟，接收不到返回值，脚本出错 \033[0m"                echo "no" > /deploy/.start                exit        fi        sleep 1        w=$(($w+1))done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a><strong>项目配置文件</strong></h2><p>项目配置文件分为全局配置文件跟项目配置文件二种</p><p>全局配置文件只有一个文件</p><p>项目配置文件按不同项目拥有不同的项目配置文件</p><p>下面就只发全局跟项目各一个</p><h3 id="全局配置文件-deploy-conf"><a href="#全局配置文件-deploy-conf" class="headerlink" title="全局配置文件(deploy.conf)"></a><strong>全局配置文件(deploy.conf)</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash############################### 全局变量 ##############################################path=/qinqukeji/microservice/stg_app/PWD=$(pwd)password=/deploy/.passwordteme=$(date +%Y%m%d)tama=$(date "+%Y/%m/%d(%H:%M:%S)")pate=/sh/.newspats=/sh/.portpatw=/sh/.porwstep=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目配置文件-gateway-conf"><a href="#项目配置文件-gateway-conf" class="headerlink" title="项目配置文件(gateway.conf)"></a><strong>项目配置文件(gateway.conf)</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashgateway_git="git@192.168.1.64:qinqu/qinqu-gateway.git"gateway_ip="qqkj@192.168.0.102 qqkj@192.168.0.103"gateway_port="2088"gateway_compile=ygateway_node=2gateway_src="/deploy/git/qinqu-gateway/"gateway_jar="/deploy/git/qinqu-gateway/qinqu-gateway-service/target/*.jar"gateway_item=qinqu-gatewaygateway_change_nginx=ygateway_nginx_ip=qqkj@192.168.0.8gateway_ipd="192.168.0.102:2088,192.168.0.103:2088"gateway_nginx_path=/usr/local/nginx/conf.d/microservice.qinqukeji.com.confgateway_nginx_conf=microservice.qinqukeji.com.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远端启动脚本-startue-sh"><a href="#远端启动脚本-startue-sh" class="headerlink" title="远端启动脚本(.startue.sh)"></a><strong>远端启动脚本(.startue.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashitem=$(cat /sh/.news)itwm="JVM running for"itam=$(cat /sh/.port)project=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')projectss=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')ssh=qqkj@192.168.0.2password=/sh/.passwordteme=$(date +%Y%m%d)pate=/deploy/.newsnginx_ip=192.168.0.8project_nginx=$(cat /sh/.porw)if [ -n "$project" ];then        echo "重启"        if [ $project_nginx == y ];then                i=0                while [ $i -le 30 ]                do                        netstat -anlp | grep $project | grep "$nginx_ip"                        if [ ! $? = 0 ]                        then                                break                        elif [ $i == 29 ]                        then                                break                                sshpass -f $password ssh $ssh "echo '$teme-2' > $pate"                        fi                        sleep 1                        i=$(($i+1))                done        fi        project=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')        echo $project        kill $project        o=0        while [ $o -le 30 ]        do                project1=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')                if [ -z $project1 ]                then                        cd /qinqukeji/microservice/stg_app/                        /qinqukeji/microservice/stg_app/springBoot.sh start $item*                        sleep 10                        w=0                        while [ $w -le 6 ]                        do                                tail /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                                if [ $? == 0 ]                                then                                        echo "项目以启动成功"                                        sshpass -f $password ssh $ssh "echo '$teme' > $pate"                                        exit                                elif [ $w == 5 ]                                then                                        sshpass -f $password ssh $ssh "echo '$teme-4' > $pate"                                        tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                                        echo "启动超时"                                        exit                                fi                        sleep 10                        w=$(($w+1))                        done                elif [ $o == 29 ]                then                        break                        sshpass -f $password ssh $ssh "echo '$teme-3' > $pate"                fi                sleep 1                o=$(($o+1))        done        project=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')        echo $project        kill -9 $project        p=0        while [ $p -le 30 ]        do                project1=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')                if [ -z $project1 ]                then                        cd /qinqukeji/microservice/stg_app/                        /qinqukeji/microservice/stg_app/springBoot.sh start $item*                        sleep 10                        k=0                        while [ $k -le 6 ]                        do                                tail /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                                if [ $? == 0 ]                                then                                        echo "项目以启动成功"                                        sshpass -f $password ssh $ssh "echo '$teme' > $pate"                                        exit                                elif [ $k == 5 ]                                then                                        sshpass -f $password ssh $ssh "echo '$teme-4' > $pate"                                        tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                                        echo "启动超时"                                        exit                                fi                        sleep 10                        k=$(($k+1))                        done                elif [ $p == 29 ]                then                        exit                        sshpass -f $password ssh $ssh "echo '$teme-5' > $pate"                fi                sleep 1                p=$(($p+1))        doneelse        echo "启动"        cd /qinqukeji/microservice/stg_app/        /qinqukeji/microservice/stg_app/springBoot.sh start $item*.jar        sleep 10        q=0        while [ $q -le 6 ]        do                tail /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                if [ $? == 0 ]                then                        echo "项目以启动成功"                        sshpass -f $password ssh $ssh "echo '$teme' > $pate"                        exit                elif [ $q == 5 ]                then                        sshpass -f $password ssh $ssh "echo '$teme-1' > $pate"                        tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                        echo "启动超时"                        exit                fi                sleep 10                q=$(($q+1))        donefi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apollo配置中心-简单安装</title>
      <link href="/2019/01/23/linux-fu-wu/apollo-pei-zhi-zhong-xin-jian-dan-an-zhuang/"/>
      <url>/2019/01/23/linux-fu-wu/apollo-pei-zhi-zhong-xin-jian-dan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Apollo配置中心介绍"><a href="#Apollo配置中心介绍" class="headerlink" title="Apollo配置中心介绍"></a><strong>Apollo配置中心介绍</strong></h2><p>随着程序功能的日益复杂，程序的配置日益增多：各种功能的开关、参数的配置、服务器的地址……</p><p>对程序配置的期望值也越来越高：配置修改后实时生效，灰度发布，分环境、分集群管理配置，完善的权限、审核机制……</p><p>在这样的大环境下，传统的通过配置文件、数据库等方式已经越来越无法满足开发人员对配置管理的需求、Apollo配置中心应运而生。</p><h2 id="Apollo配置中心特性"><a href="#Apollo配置中心特性" class="headerlink" title="Apollo配置中心特性"></a><strong>Apollo配置中心特性</strong></h2><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置管理平台，目前提供了以下的特性：</p><ol><li><strong>统一管理不同环境、不同集群的配置</strong><ol><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zk的地址等</li><li>通过命名空间（namespace）可以很方便的支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ol></li><li><strong>配置修改实时生效（热发布）</strong><ol><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ol></li><li><strong>版本发布管理</strong><ol><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ol></li><li><strong>灰度发布</strong><ol><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ol></li><li><strong>权限管理、发布审核、操作审计</strong><ol><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便的追踪问题</li></ol></li><li><strong>客户端配置信息监控</strong><ol><li>可以在界面上方便地看到配置在被哪些实例使用</li></ol></li><li><strong>提供Java和.Net原生客户端</strong><ol><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便的使用</li></ol></li><li><strong>提供开放平台API</strong><ol><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。</li><li>不过Apollo出于通用性考虑，对配置的修改不会做过多限制，只要符合基本的格式就能够保存。</li><li>在我们的调研中发现，对于有些使用方，它们的配置可能会有比较复杂的格式，而且对输入的值也需要进行校验后方可保存，如检查数据库、用户名和密码是否匹配。</li><li>对于这类应用，Apollo支持应用方通过开放接口在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ol></li><li><strong>部署简单</strong><ol><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ol></li></ol><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>Apollo是需要JDK的</p><ol><li>Apollo服务端的JDK至少是：JDK1.8</li><li>Apollo客户端的JDK至少是：JDK1.7</li></ol><p>Apollo支持的mysql，最低版本5.6</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>下载（我这边是用git下载的，所以需要安装git）</p><p>yum -y install git</p><p>git clone <a href="https://github.com/nobodyiam/apollo-build-scripts.git" target="_blank" rel="noopener">https://github.com/nobodyiam/apollo-build-scripts.git</a></p><p>Mysql配置</p><p>Apollo项目包中有提供给我们sql脚本，我们真的导入数据库就可以了</p><p>进入数据库</p><p>mysql -u root -p</p><p>创建二个数据库(数据库名要一致，如果不一致就要去配置文件修改数据库名)</p><p>create database ApolloPortalDB;</p><p>create database ApolloConfigDB;</p><p>导入数据库(数据库文件，在项目中的sql目录下)</p><p>cd apollo-build-scripts-master/sql/</p><p>mysql -u root -p ApolloPortalDB &lt; apolloportaldb.sql</p><p>mysql -u root -p ApolloConfigDB &lt; apolloconfigdb.sql</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>修改demo.sh配置文件</p><p>vim apollo-build-scripts-master/demo.sh</p><pre class="line-numbers language-shell"><code class="language-shell"># apollo config db infoapollo_config_db_url=jdbc:mysql://172.30.30.1:3306/ApolloConfigDB?characterEncoding=utf8apollo_config_db_username=rootapollo_config_db_password=123456# apollo portal db infoapollo_portal_db_url=jdbc:mysql://172.30.30.1:3306/ApolloPortalDB?characterEncoding=utf8apollo_portal_db_username=rootapollo_portal_db_password=123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动文件，就是我们刚刚修改的demo.sh配置文件</p><p>./demo.sh start</p><p>启动的时候有比较慢</p><p>启动后，web界面的端口就是8070</p><p>推荐文档：<a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki/Quick-Start?tdsourcetag=s_pcqq_aiomsg</a></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos6.5下安装 mysql5.7</title>
      <link href="/2019/01/23/mysql/centos6.5-xia-an-zhuang-mysql5.7/"/>
      <url>/2019/01/23/mysql/centos6.5-xia-an-zhuang-mysql5.7/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>官方下载地址：</strong><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a></p><p><strong>版本：</strong>mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</p><p><strong>下载：</strong>wget <a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</a></p><p><strong>安装依赖包：</strong></p><p>yum -y install libaio numactl</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>解压：</strong>tar -zxf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz </p><p><strong>移动：</strong>mv mysql-5.7.25-linux-glibc2.12-x86_64 /usr/local/mysql</p><p><strong>创建数据目录：</strong>mkdir /usr/local/mysql/data</p><p><strong>创建用户：</strong></p><p>groupadd mysql</p><p>useradd -r -s /sbin/nologin -g mysql mysql -d /usr/local/mysql</p><p><strong>赋予权限</strong></p><p>chown mysql:mysql -R /usr/local/mysql/</p><p><strong>创建链接：</strong></p><p>cd /usr/local/mysql</p><p>ln support-files/mysql.server /etc/init.d/mysqld</p><p>ln bin/mysql /bin/mysql</p><p><strong>初始化数据库：</strong></p><p>bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><p><strong>注意：</strong></p><p>初始化数据库，会随机创建密码</p><p>一般密码在，初始化输出的日志中，最后一行，最后一个值</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p><strong>修改my.cnf配置文件</strong></p><p>vim /etc/my.cnf</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysql]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysqld]</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql</span><span class="token constant">basedir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql</span><span class="token constant">datadir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/data</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">pid-file</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysqld.pid</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token constant">server-id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token constant">sql_mode</span><span class="token attr-value"><span class="token punctuation">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,PIPES_AS_CONCAT,ANSI_QUOTES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p><strong>修改mysqld文件</strong></p><p>vim /etc/init.d/mysqld</p><pre class="line-numbers language-shell"><code class="language-shell">basedir=/usr/local/mysqldatadir=/usr/local/mysql/datamysqld_pid_file_path=/usr/local/mysql/mysqld.pid##修改以上这三行的配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h2><p><strong>启动：</strong>service mysqld start</p><p><strong>进入mysql：</strong>mysql -u root -p#F,bkgSk/4hg （密码是随机生成的）</p><p>想要对数据库进行操作，需要修改密码，不然会一提示你</p><pre class="line-numbers language-shell"><code class="language-shell">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改密码</strong></p><p>SET PASSWORD FOR ‘root’@localhost=PASSWORD(‘#F,bkgSk/4hg’);</p><p><strong>创建外部连接用户跟密码</strong></p><p>create user ‘root’@’%’ identified by ‘密码’;</p><p><strong>赋予二个用户权限（最大）</strong></p><p>grant all on <em>.</em> to root@’%’ identified by ‘密码’;</p><p>grant all on <em>.</em> to root@’localhost’ identified by ‘密码’;</p><p><strong>刷新Mysql权限</strong></p><p>flush privileges;</p><p><strong>查看数据库版本</strong></p><p>SHOW VARIABLES WHERE Variable_name = ‘version’;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nfs网络文件服务安装</title>
      <link href="/2019/01/17/linux-fu-wu/nfs-wang-luo-wen-jian-fu-wu-an-zhuang/"/>
      <url>/2019/01/17/linux-fu-wu/nfs-wang-luo-wen-jian-fu-wu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>nfs的工作流程</p><p>NFS是Network File System的缩写，即网络文件系统。客户端通过挂载的方式将NFS服务器端共享的数据目录挂载到本地目录下</p><pre class="line-numbers language-bash"><code class="language-bash">1、由程序在NFS客户端发起存取文件的请求，客户端本地的RPC<span class="token punctuation">(</span>rpcbind<span class="token punctuation">)</span>服务会通过网络向NFS服务端的RPC的111端口发出文件存取功能的请求。2、NFS服务端的RPC找到对应已注册的NFS端口，通知客户端RPC服务。3、客户端获取正确的端口，并与NFS daemon联机存取数据。4、存取数据成功后，返回前端访问程序，完成一次存取操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a><strong>服务器端</strong></h2><p><strong>安装</strong></p><p>yum -y install nfs-utils rpcbind</p><p><strong>配置文件</strong></p><p>vim /etc/sysconfig/nfs</p><pre class="line-numbers language-shell"><code class="language-shell">MOUNTD_PORT=4001　　STATD_PORT=4002LOCKD_TCPPORT=4003LOCKD_UDPPORT=4003RQUOTAD_PORT=4004<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限声明</strong></p><pre class="line-numbers language-shell"><code class="language-shell">1、普通用户当设置all_squash时：访客时一律被映射为匿名用户(nfsnobody)当设置no_all_squash时：访客被映射为服务器上相同uid的用户，因此在客户端应建立与服务端uid一致的用户，否则也映射为nfsnobody。root除外，因为root_suqash为默认选项，除非指定了no_root_squash2、root用户当设置root_squash时：访客以root用户访问NFS服务端时，被映射为nfsnobody用户当设置no_root_squash时：访客以root用户访问NFS服务端时，被映射为root用户。以其他用户访问时同样映射为对应uid的用户，因为no_all_squash是默认选项选项说明ro：共享目录只读rw：共享目录可读可写all_squash：所有访问用户都映射为匿名用户或用户组no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组root_squash（默认）：将来访的root用户映射为匿名用户或用户组no_root_squash：来访的root用户保持root帐号权限anonuid=<UID>：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）anongid=<GID>：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器insecure：允许客户端从大于1024的tcp/ip端口连接服务器sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性async：将数据先保存在内存缓冲区中，必要时才写入磁盘wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率no_wdelay：若有写操作则立即执行，应与sync配合使用subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置挂载目录</strong></p><p>vim /etc/exports</p><pre class="line-numbers language-shell"><code class="language-shell">/qqkj *(rw,sync,no_wdelay)   ## *代表全部<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建挂载目录并给予权限</strong></p><p>mkdir /qqkj</p><p>chown nfsnobody:nfsnobody -R /qqkj/</p><p><strong>exportfs操作</strong></p><pre class="line-numbers language-shell"><code class="language-shell">-a 全部挂载或卸载 /etc/exports中的内容-r 重新读取/etc/exports 中的信息 ，并同步更新/etc/exports、/var/lib/nfs/xtab-u 卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录）-v 输出详细的共享参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重载exportfs配置并查看</p><p>exportfs -r</p><p>exportfs -v</p><p><strong>启动服务</strong></p><p>需要按顺序启动，先启动rpcbind 在启动nfs-utils</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start rpcbind.servicesystemctl enable rpcbind.servicesystemctl start nfs.servicesystemctl enable nfs.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h2><p><strong>安装</strong></p><p>yum -y install nfs-utils rpcbind</p><p><strong>创建挂载目录</strong></p><p>mkdir /qqkj</p><p><strong>挂载</strong></p><p>mount -t nfs 192.168.1.66:/qqkj /qqkj</p><p><strong>永久挂载</strong></p><p>vim /etc/fstab</p><pre class="line-numbers language-shell"><code class="language-shell">192.168.1.66:/qqkj     /qqkj     nfs    defaults     0  0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka集群的搭建</title>
      <link href="/2019/01/10/kafka/kafka-ji-qun-de-da-jian/"/>
      <url>/2019/01/10/kafka/kafka-ji-qun-de-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="kafka定义"><a href="#kafka定义" class="headerlink" title="kafka定义"></a><strong>kafka定义</strong></h2><ol><li><p>Java 和 scala都是运行在JVM上的语言。</p></li><li><p>erlang和最近比较火的和go语言一样是从代码级别就支持高并发的一种语言，所以RabbitMQ天生就有很高的并发性能，但是 有RabbitMQ严格按照AMQP进行实现，受到了很多限制。kafka的设计目标是高吞吐量，所以kafka自己设计了一套高性能但是不通用的协议，他也是仿照AMQP（ Advanced Message Queuing Protocol  高级消息队列协议）设计的</p></li><li><p>事物的概念：在数据库中，多个操作一起提交，要么操作全部成功，要么全部失败。举个例子， 在转账的时候付款和收款，就是一个事物的例子，你给一个人转账，你转成功，并且对方正常行收到款项后，这个操作才算成功，有一方失败，那么这个操作就是失败的。 </p><p>对应消在息队列中，就是多条消息一起发送，要么全部成功，要么全部失败。3个中只有ActiveMQ支持，这个是因为，RabbitMQ和Kafka为了更高的性能，而放弃了对事物的支持</p></li><li><p>集群：多台服务器组成的整体叫做集群，这个整体对生产者和消费者来说，是透明的。其实对消费系统组成的集群添加一台服务器减少一台服务器对生产者和消费者都是无感之的</p></li><li><p>负载均衡，对消息系统来说负载均衡是大量的生产者和消费者向消息系统发出请求消息，系统必须均衡这些请求使得每一台服务器的请求达到平衡，而不是大量的请求，落到某一台或几台，使得这几台服务器高负荷或超负荷工作，严重情况下会停止服务或宕机</p></li><li><p>动态扩容是很多公司要求的技术之一，不支持动态扩容就意味着停止服务，这对很多公司来说是不可以接受的</p></li><li><p>kafka支持的客户端语言：Kafka客户端支持当前大部分主流语言，包括：C、C++、Erlang、Java、.net、perl、PHP、Python、Ruby、Go、Javascript，可以使用以上任何一种语言和kafka服务器进行通信（即辨析自己的consumer从kafka集群订阅消息也可以自己写producer程序）</p></li></ol><h2 id="kafka的基础概念"><a href="#kafka的基础概念" class="headerlink" title="kafka的基础概念"></a><strong>kafka的基础概念</strong></h2><ol><li>消费者：（Consumer）：从消息队列中请求消息的客户端应用程序</li><li>生产者：（Producer）  ：向broker发布消息的应用程序</li><li>AMQP服务端（broker）：用来接收生产者发送的消息并将这些消息路由给服务器中的队列，便于fafka将生产者发送的消息，动态的添加到磁盘并给每一条消息一个偏移量，所以对于kafka一个broker就是一个应用程序的实例</li></ol><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿二台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.153</p><p>副节点IP地址：192.168.0.154</p><p><strong>JDK8</strong></p><p>zookeeper是需要jdk8的</p><p>JDK8安装文章：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8安装">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：zookeeper-3.4.12</p><p>官方下载地址：<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz</a></p><p>kafka下载，建议下载 <a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">kafka_2.11-2.1.0.tgz</a>不要下载<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka-2.1.0-src.tgz" target="_blank" rel="noopener">kafka-2.1.0-src.tgz</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>以下操作二台主机都要操作</p><p>解压：tar -zxvf kafka_2.11-2.1.0.tgz</p><p>移动：mv kafka_2.11-2.1.0 /usr/local/kafka</p><p><strong>修改配置文件</strong></p><p>cd /usr/local/kafka/config/</p><p>vim server.properties</p><pre class="line-numbers language-shell"><code class="language-shell">broker.id=1   ##集群的唯一标识，注意这里要改不一样，节点分别1,2 来标识listeners=PLAINTEXT://192.168.0.153:9092  ##设置kafka的监控地址和端口log.dirs=/usr/local/kafka/logs  ##设置日志文件地址num.partitions=6   ##设置新创建的topic有多少分区,按照情况设置log.retention.hours=60   ##配置kafka中消息保存的时间zookeeper.connect=192.168.0.153:2181,192.168.0.154:2181  ##指定zookeeper的地址，可以设置多个auto.create.topics.enable=true  ##设置是否自动创建topicdelete.topic.enable=true   ##设置提供删除topicr的功能 ###以上的配置是要求修改的以下是收集来的全配置信息，可以按自身情况修改broker.id=0  #当前机器在集群中的唯一标识，和zookeeper的myid性质一样port=19092 #当前kafka对外提供服务的端口默认是9092host.name=192.168.7.100 #这个参数默认是关闭的，在0.8.1有个bug，DNS解析问题，失败率的问题。num.network.threads=3 #这个是borker进行网络处理的线程数num.io.threads=8 #这个是borker进行I/O处理的线程数log.dirs=/opt/kafka/kafkalogs/ #消息存放的目录，这个目录可以配置为“，”逗号分割的表达式，上面的num.io.threads要大于这个目录的个数这个目录，如果配置多个目录，新创建的topic他把消息持久化的地方是，当前以逗号分割的目录中，那个分区数最少就放那一个socket.send.buffer.bytes=102400 #发送缓冲区buffer大小，数据不是一下子就发送的，先回存储到缓冲区了到达一定的大小后在发送，能提高性能socket.receive.buffer.bytes=102400 #kafka接收缓冲区大小，当数据到达一定大小后在序列化到磁盘socket.request.max.bytes=104857600 #这个参数是向kafka请求消息或者向kafka发送消息的请请求的最大数，这个值不能超过java的堆栈大小num.partitions=1 #默认的分区数，一个topic默认1个分区数log.retention.hours=168 #默认消息的最大持久化时间，168小时，7天message.max.byte=5242880  #消息保存的最大值5Mdefault.replication.factor=2  #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务replica.fetch.max.bytes=5242880  #取消息的最大直接数log.segment.bytes=1073741824 #这个参数是：因为kafka的消息是以追加的形式落地到文件，当超过这个值的时候，kafka会新起一个文件log.retention.check.interval.ms=300000 #每隔300000毫秒去检查上面配置的log失效时间（log.retention.hours=168 ），到目录查看是否有过期的消息如果有，删除log.cleaner.enable=false #是否启用log压缩，一般不用启用，启用的话可以提高性能zookeeper.connect=192.168.7.100:12181,192.168.7.101:12181,192.168.7.107:1218 #设置zookeeper的连接端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p><strong>启动</strong></p><p>cd /usr/local/kafka/</p><p>nohup bin/kafka-server-start.sh config/server.properties &amp;</p><p>这里是将kafka放入后台运行，启动后，会在启动kafka的当前目录下生成一个nohup.out文件</p><p>可以通过这文件查看kafka的启动状态和运行状态</p><p><strong>测试</strong></p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost config]# jps7013 QuorumPeerMain7754 Jps7070 Kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过jps命令，可以看到有个kafka的标识，这就是kafka进程启动成功的标识</p>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeepre集群的搭建</title>
      <link href="/2019/01/09/zookeeper/zookeepre-ji-qun-de-da-jian/"/>
      <url>/2019/01/09/zookeeper/zookeepre-ji-qun-de-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="zookeepre的简单原理"><a href="#zookeepre的简单原理" class="headerlink" title="zookeepre的简单原理"></a><strong>zookeepre的简单原理</strong></h2><p>ZooKeeper是一个开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它实现同步服务，配置维护和命名服务等。</p><h3 id="Zookeeper设计目的"><a href="#Zookeeper设计目的" class="headerlink" title="Zookeeper设计目的"></a><strong>Zookeeper设计目的</strong></h3><p>最终一致性：client不论连接到那个Server，展示给它的都是同一个视图</p><p>可靠性：具有简单、健壮、良好的性能、如果消息m被到一台服务器接收，那么消息m将被所有服务器接收。</p><p>实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</p><p>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</p><p>原子性：更新只能成功或者失败，没有中间状态。</p><p>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</p><h3 id="zookeeper的工作原理"><a href="#zookeeper的工作原理" class="headerlink" title="zookeeper的工作原理"></a><strong>zookeeper的工作原理</strong></h3><p><strong>在zookeeper的集群中，各个节点共有下面3种角色和4种状态</strong></p><p>角色：leader、follower、observer</p><p>状态：leading、following、observing、looking</p><p><strong>每个Server在工作过程中有4种状态：</strong></p><p>LOOKING：当前Server不知道leader是谁，正在搜寻。</p><p>LEADING：当前Server即为选举出来的leader。</p><p>FOLLOWING：leader已经选举出来，当前Server与之同步。</p><p>OBSERVING：observer的行为在大多数情况下与follower完全一致，但是他们不参加选举和投票，而仅仅接受(observing)选举和投票的结果。</p><p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议（ZooKeeper Atomic Broadcast protocol）。</p><p>Zab协议有两种模式，它们分别是恢复模式（Recovery选主）和广播模式（Broadcast同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p><p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p><h3 id="Zookeeper集群节点"><a href="#Zookeeper集群节点" class="headerlink" title="Zookeeper集群节点"></a><strong>Zookeeper集群节点</strong></h3><p>Zookeeper节点部署越多，服务的可靠性越高，建议部署奇数个节点，因为zookeeper集群是以宕机个数过半才会让整个集群宕机的。</p><p>需要给每个zookeeper 1G左右的内存，如果可能的话，最好有独立的磁盘，因为独立磁盘可以确保zookeeper是高性能的。如果你的集群负载很重，不要把zookeeper和RegionServer运行在同一台机器上面，就像DataNodes和TaskTrackers一样</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿二台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.153</p><p>副节点IP地址：192.168.0.154</p><p><strong>JDK8</strong></p><p>zookeeper是需要jdk8的</p><p>JDK8安装文章：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8安装">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：zookeeper-3.4.12</p><p>官方下载地址：<a href="https://zookeeper.apache.org/doc/r3.4.13/" target="_blank" rel="noopener">https://zookeeper.apache.org/doc/r3.4.13/</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>以下的操作二台主机都要操作</p><p>解压：tar -zxf zookeeper-3.4.12.tar.gz </p><p>移动：mv zookeeper-3.4.12 /usr/local/zookeeper</p><p>进入：cd /usr/local/zookeeper/conf/</p><p>拷贝配置文件：cp -a zoo_sample.cfg zoo.cfg</p><p>创建数据目录：mkdir -p /data/zookeeper/logs</p><p><strong>配置zoo.cfg</strong></p><pre class="line-numbers language-shell"><code class="language-shell">以下是需要修改跟增加的配置行dataDir=/data/zookeeper       ##数据目录dataLogDir=/data/zookeeper/logs  ##日志目录server.1=192.168.0.153:2888:3888server.2=192.168.0.154:2888:3888##集群配置方式server.A=B:C:D中的A是一个数字,表示这个是第几号服务器,B是这个服务器的IP地址，C第一个端口用来集群成员的信息交换,表示这个服务器与集群中的leader服务器交换信息的端口，D是在leader挂掉时专门用来进行选举leader所用的端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建集群标识，myid文件</strong></p><p>注意：这个标识跟我们上面配置文件高架的server有关</p><p>192.168.0.153这台机的标识就是1，因为我们在配置文件设置了，server.1=192.168.0.153:2888:3888</p><p>192.168.0.154这台机的标识就是2，因为我们在配置文件设置了，server.2=192.168.0.154:2888:3888</p><p>myid这个文件要放在zookeeper的数据目录，我们设置的数据目录是在/data/zookeeper/目录中</p><p><strong>在192.168.0.153主机的操作</strong></p><p>echo “1” &gt; /data/zookeeper/myid</p><p><strong>在192.168.0.154主机的操作</strong></p><p>echo “2” &gt; /data/zookeeper/myid</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p>/usr/local/zookeeper/bin/zkServer.sh start </p><p><strong>查看集群</strong></p><pre class="line-numbers language-shell"><code class="language-shell">机器：192.168.0.153[root@localhost ~]# /usr/local/zookeeper/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/bin/../conf/zoo.cfgMode: follower机器：192.168.0.154[root@localhost ~]# /usr/local/zookeeper/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/bin/../conf/zoo.cfgMode: leader集群有二种模式，follow、leaderfollow模式是代表副节点leader模式是代表主节点zookeepre集群的主副节点，是随机选中的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>测试集群</strong></p><p>/usr/local/zookeeper/bin/zkCli.sh -server 192.168.0.154:2181</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs//npm 安装</title>
      <link href="/2019/01/07/linux-fu-wu/nodejsnpm-an-zhuang/"/>
      <url>/2019/01/07/linux-fu-wu/nodejsnpm-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>下载</p><p>wget <a href="https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装 </p><p><strong>解压：</strong></p><p>xz -d node-v10.15.0-linux-x64.tar.xz </p><p>tar -xvf node-v10.15.0-linux-x64.tar </p><p><strong>移动：</strong></p><p>mv node-v10.15.0-linux-x64 /usr/local/node</p><p><strong>创建软链接：</strong></p><p>ln -s /usr/local/node/bin/npm /bin/</p><p>ln -s /usr/local/node/bin/node /bin/</p><p><strong>测试：</strong></p><p>npm -v</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>修改为淘宝源</p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>npm config set registry <a href="http://registy.npm.taobao.org/" target="_blank" rel="noopener">http://registy.npm.taobao.org/</a></p><p>npm install</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux回收站脚本之二</title>
      <link href="/2018/12/27/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-er/"/>
      <url>/2018/12/27/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>说明</strong></p><p>只需把这个脚本按自己的情况修改一下就可以使用</p><p>需要赋予脚本777权限</p><p>需要用这脚本，代替/bin/rm脚本</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>shell脚本</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Author Attitude</span><span class="token comment" spellcheck="true"># Modify 2018/12/26</span>pw<span class="token operator">=</span><span class="token variable">$2</span>pq<span class="token operator">=</span><span class="token variable">${pw: -1}</span>p<span class="token operator">=</span>/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pq</span> <span class="token operator">==</span> <span class="token variable">$p</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">$pw</span> <span class="token operator">></span> /dev/null<span class="token keyword">else</span>        pw<span class="token operator">=</span><span class="token variable">$pw</span>/<span class="token keyword">fi</span><span class="token keyword">function</span> rm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pa<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> $pw <span class="token operator">|</span> <span class="token function">grep</span> -o / <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 1 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span>    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 2 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,100<span class="token punctuation">)</span>        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 2,100<span class="token punctuation">)</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 3 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,100<span class="token punctuation">)</span>            ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 3,100<span class="token punctuation">)</span>        <span class="token keyword">else</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 4 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,100<span class="token punctuation">)</span>                ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 4,100<span class="token punctuation">)</span>            <span class="token keyword">else</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 5 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,100<span class="token punctuation">)</span>                    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 5,100<span class="token punctuation">)</span>                <span class="token keyword">else</span>                    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 6 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,6,100<span class="token punctuation">)</span>                        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 6,100<span class="token punctuation">)</span>                    <span class="token keyword">else</span>                        <span class="token keyword">echo</span> <span class="token string">"最多只能跨6个目录删除"</span>                        <span class="token keyword">exit</span>                    <span class="token keyword">fi</span>                <span class="token keyword">fi</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span>Store<span class="token operator">=</span>/tmp/.rmtime<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>timee<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m.%d-%H:%M:%S<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$Store</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$Store</span>"</span>    <span class="token function">chmod</span> 777 <span class="token string">"<span class="token variable">$Store</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>    <span class="token function">chmod</span> 777 <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"删除机制出错，请联系运维:***-***********"</span>        <span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                    <span class="token keyword">echo</span> <span class="token string">"已删除至回收站*如果意外删除，请及时联系运维:***-***********"</span>            <span class="token keyword">else</span>                    <span class="token keyword">echo</span> <span class="token string">"删除文件失败*请检查文件/目录是否正在使用或联系运维:***-***********"</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span><span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"已删除至回收站，如果意外删除，请及时联系运维:***-***********"</span>    <span class="token keyword">else</span>                   <span class="token keyword">echo</span> <span class="token string">"删除文件失败，请检查文件/目录是否正在使用或联系运维:***-***********"</span>           <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">##删除</span>pash<span class="token operator">=</span>/tmp/.rm/quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$quantity</span> -gt 3 <span class="token punctuation">]</span><span class="token keyword">do</span>        que<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -n 1p<span class="token punctuation">)</span>        /root/.rm -rf <span class="token string">"<span class="token variable">$pash</span>"</span><span class="token string">"<span class="token variable">$que</span>"</span>        quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">done</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>    -rf<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -fr<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -r<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -f<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m Usage: \033[0m  \033[0;34m  rm的选项只能填写 {-rf|-fr|-r|-f} \033[0m"</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#这脚本使用的时候是必须带选项的#如果想要可以不带选项的rm脚本，可以自己修改一下，也可以参考linux回收站脚本之一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux回收站脚本之一</title>
      <link href="/2018/12/26/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-yi/"/>
      <url>/2018/12/26/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>说明</strong></p><p>只需把这个脚本按自己的情况修改一下就可以使用</p><p>需要赋予脚本777权限</p><p>需要用这脚本，代替/bin/rm脚本</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>shell脚本</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Author Attitude</span><span class="token comment" spellcheck="true"># Modify 2018/12/26</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -rf <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -fr <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -r <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -f <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>pw<span class="token operator">=</span><span class="token variable">$2</span>pq<span class="token operator">=</span><span class="token variable">${pw: -1}</span>p<span class="token operator">=</span>/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pq</span> <span class="token operator">==</span> <span class="token variable">$p</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$pw</span> <span class="token operator">></span> /dev/null<span class="token keyword">else</span>    pw<span class="token operator">=</span><span class="token variable">$pw</span>/<span class="token keyword">fi</span>pa<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> $pw <span class="token operator">|</span> <span class="token function">grep</span> -o / <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 1 <span class="token punctuation">]</span><span class="token keyword">then</span>    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span>    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 2 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,100<span class="token punctuation">)</span>        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 2,100<span class="token punctuation">)</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 3 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,100<span class="token punctuation">)</span>            ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 3,100<span class="token punctuation">)</span>        <span class="token keyword">else</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 4 <span class="token punctuation">]</span>            <span class="token keyword">then</span>                pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,100<span class="token punctuation">)</span>                ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 4,100<span class="token punctuation">)</span>            <span class="token keyword">else</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 5 <span class="token punctuation">]</span>                <span class="token keyword">then</span>                    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,100<span class="token punctuation">)</span>                    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 5,100<span class="token punctuation">)</span>                <span class="token keyword">else</span>                    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 6 <span class="token punctuation">]</span>                    <span class="token keyword">then</span>                        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,6,100<span class="token punctuation">)</span>                        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 6,100<span class="token punctuation">)</span>                    <span class="token keyword">else</span>                        <span class="token keyword">exit</span>                    <span class="token keyword">fi</span>                <span class="token keyword">fi</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span>Store<span class="token operator">=</span>/tmp/.rmtime<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>timee<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m.%d-%H:%M:%S<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$Store</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$Store</span>"</span>    <span class="token function">chmod</span> 777 <span class="token string">"<span class="token variable">$Store</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>    <span class="token function">chmod</span> 777 <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"删除机制出错，请联系运维:***-***********"</span>        <span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>                    <span class="token keyword">echo</span> <span class="token string">"已删除至回收站*如果意外删除，请及时联系运维:***-***********"</span>            <span class="token keyword">else</span>                    <span class="token keyword">echo</span> <span class="token string">"删除文件失败*请检查文件/目录是否正在使用或联系运维:***-***********"</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span><span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"已删除至回收站，如果意外删除，请及时联系运维:***-***********"</span>    <span class="token keyword">else</span>                   <span class="token keyword">echo</span> <span class="token string">"删除文件失败，请检查文件/目录是否正在使用或联系运维:***-***********"</span>           <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">##删除</span>pash<span class="token operator">=</span>/tmp/.rm/quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$quantity</span> -gt 3 <span class="token punctuation">]</span><span class="token keyword">do</span>        que<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -n 1p<span class="token punctuation">)</span>        /root/.rm -rf <span class="token string">"<span class="token variable">$pash</span>"</span><span class="token string">"<span class="token variable">$que</span>"</span>        quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#这脚本使用的时候是不能带选项的#如果想要可以带选项的rm脚本，可以自己修改一下，也可以参考linux回收站脚本之二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell正则</title>
      <link href="/2018/12/25/linux-ming-ling/shell-zheng-ze/"/>
      <url>/2018/12/25/linux-ming-ling/shell-zheng-ze/</url>
      
        <content type="html"><![CDATA[<p><strong>以下文章内容，参考了良哥的shell从入门到精通的文章</strong></p><p>正则表达式在每种语言中都会有，功能就是匹配符合你预期要求的字符串，是我们要写shell脚本中最常用的</p><p>Shell 正则表达式分为两种：</p><p>​    基础正则表达式：BRE（basic regular express）</p><p>​    扩展正则表达式：ERE（extend regular express），扩展的表达式有+、?、|和() </p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a><strong>正则</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">.  ##匹配除换行符(\n)之外的任 意单个字符      例：匹配 123： echo -e "123\n456" |grep '1.3'^  ##匹配前面字符串开头      例：匹配以 abc 开头的行： echo -e "abc\nxyz" |grep ^abc $  ##匹配前面字符串结尾      例：匹配以 xyz 结尾的行：echo -e "abc\nxyz" |grep xyz$ *  ##匹配前一个字符零个或多个      例：匹配 x、xo 和 xoo：         echo -e "x\nxo\nxoo\no\noo" |grep "xo*"         x 是必须的，批量了 0 零个或多个 +  ##匹配前面字符1个或多个      例：匹配 abc 和 abcc：echo -e "abc\nabcc\nadd" |grep -E 'ab+'         匹配单个数字：echo "113" |grep -o '[0-9]'         连续匹配多个数字：echo "113" |grep -E -o '[09]+' ？  ##匹配前面字符0个或1个      例：匹配 ac 或 abc： echo -e "ac\nabc\nadd" |grep -E 'a?c' []  ##匹配中括号之中的任意一个字符       例：匹配 a 或 c： echo -e "a\nb\nc" |grep '[ac]' [ .-.]  ##匹配中括号中范围内的任意 一个字符           例：匹配所有字母： echo -e "a\nb\nc" |grep '[a-z]' [^]  ##匹配[^字符]之外的任意一个字符        例：匹配 a 或 b： echo -e "a\nb\nc" |grep '[^c-z]'           匹配末尾数字：echo "abc:cde;123" |grep -E '[^;]+$' ^[^]  ##匹配不是中括号内任意一个字符开头的行         例：匹配不是#开头的行： grep '^[^#]' /etc/httpd/conf/httpd.conf {n}或 {n,}  ##匹配花括号前面字符至少 n 个字符               例：匹配 abc 字符串（至少三个字符以上字符串）                  echo -e "a\nabc\nc" |grep -E '[a-z]{3}' {n,m}  ##匹配花括号前面字符至少 n 个字符，最多 m 个字符          例：匹配 12 和 123（不加边界符会匹配单个字符）            echo -e "1\n12\n123\n1234" |grep -E -w -o '[09]{2,3}' \<   ##边界符，匹配字符串开始        例：匹配开始是 123 和 1234          echo -e "1\n12\n123\n1234" |grep '\<123' \>   ##边界符，匹配字符串结束        例：匹配结束是 1234           echo -e "1\n12\n123\n1234" |grep '4\>' ( )   ##单元或组合：将小括号里面作为一个组合        分组：匹配小括号中正则表达式或字符。\n 反向引 用，n 是数字，        从1开始编号，表示引用第n个分组匹配的内容        例：单元：匹配 123a 字符串               echo "123abc" |grep -E -o '([0-9a-z]){4}'            分组：匹配 11               echo "113abc" |grep -E -o '(1)\1'            匹配出现 xo 出现零次或多次：               echo -e "x\nxo\nxoo\no\noo" |egrep "(xo)*"|  ##匹配竖杠两边的任意一个       例：匹配 12 和 123：           echo -e "1\n12\n123\n1234" |grep -E '12\>|123\>' \  ##转义符，将特殊符号转成原有意义      例：1.2，匹配 1.2：1\.2，否则 112 也会匹配到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Posix-字符"><a href="#Posix-字符" class="headerlink" title="Posix 字符"></a><strong>Posix 字符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">[:alnum:] 等效[a-zA-Z0-9] [:alpha:] 等效[a-zA-Z] [:lower:] 等效[a-z] [:upper:] 等效[A-Z] [:digit:] 等效[0-9] [:space:] 匹配任意空白字符，等效[\t\n\r\f\v] [:graph:] 非空白字符 [:blank:] 空格与定位字符 [:cntrl:] 控制字符 [:print:] 可显示的字符 [:punct:] 标点符号字符 [:xdigit:] 十六进制 示例： echo -e "1\n12\n123\n1234a" |grep '[[:digit:]]'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客，正则支持率"><a href="#shell文本处理三剑客，正则支持率" class="headerlink" title="shell文本处理三剑客，正则支持率"></a><strong>shell文本处理三剑客，正则支持率</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">grep    #默认不支持扩展表达式，加-E 选项开启 ERE    如果不加-E 使用花括号要加 转义符\{\}      egrep 支持基础和扩展表达式 awk    #支持 egrep 所有的正则表达式 sed    #默认不支持扩展表达式    加-r 选项开启 ERE。    如果不加-r 使用花括号要加 转义符\{\}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客-支持的特殊字符"><a href="#shell文本处理三剑客-支持的特殊字符" class="headerlink" title="shell文本处理三剑客 支持的特殊字符"></a><strong>shell文本处理三剑客 支持的特殊字符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">\w  ##匹配任意数字和字母，等效[a-zA-Z0-9_] \W  ##与\w 相反，等效[^a-zA-Z0-9_] \b  ##匹配字符串开始或结束，等效\<和\> \s  ##匹配任意的空白字符 \S  ##匹配非空白字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客-支持的空白符"><a href="#shell文本处理三剑客-支持的空白符" class="headerlink" title="shell文本处理三剑客 支持的空白符"></a><strong>shell文本处理三剑客 支持的空白符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">\n  ##换行符 \r  ##回车符 \t  ##水平制表符 \v  ##垂直制表符 \0  ##空值符 \b  ##退后一格 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装nginx1.15-stream模块安装（ssh映射）</title>
      <link href="/2018/12/18/nginx/yuan-ma-an-zhuang-nginx1.15-stream-mo-kuai-an-zhuang-ssh-ying-she/"/>
      <url>/2018/12/18/nginx/yuan-ma-an-zhuang-nginx1.15-stream-mo-kuai-an-zhuang-ssh-ying-she/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>安装依赖包</p><p>yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel </p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>下载，安装</p><p><strong>下载</strong></p><p>wget <a href="http://nginx.org/download/nginx-1.15.7.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.7.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf nginx-1.15.7.tar.gz </p><p><strong>进入</strong></p><p>cd nginx-1.15.7</p><p><strong>创建目录</strong></p><p>mkdir /usr/local/nginx</p><p><strong>检查环境</strong></p><p>./configure –prefix=/usr/local/nginx –user=www –group=www –with-http_ssl_module –with-http_gzip_static_module –http-client-body-temp-path=/usr/local/nginx/tmp/client/ –http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ –http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ –with-poll_module –with-file-aio –with-http_realip_module –with-http_addition_module –with-http_addition_module –with-http_random_index_module –with-http_stub_status_module –http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp –http-scgi-temp-path=/usr/local/nginx/scgi_temp –with-pcre=/usr/local/src/pcre-8.41 –with-stream</p><p><strong>编译</strong></p><p>make</p><p><strong>安装</strong></p><p>make install</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p>ln -s /usr/local/nginx/sbin/nginx /bin/</p><p>nginx</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yum安装jenkins最新版本</title>
      <link href="/2018/12/17/linux-fu-wu/yum-an-zhuang-jenkins-zui-xin-ban-ben/"/>
      <url>/2018/12/17/linux-fu-wu/yum-an-zhuang-jenkins-zui-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>自行安装JDK8</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装jenkins</p><p><strong>添加Jenkins存储库</strong></p><p>wget -O /etc/yum.repos.d/jenkins.repo <a href="http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo" target="_blank" rel="noopener">http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</a></p><p><strong>添加jenkins包</strong></p><p>rpm –import <a href="https://jenkins-ci.org/redhat/jenkins-ci.org.key" target="_blank" rel="noopener">https://jenkins-ci.org/redhat/jenkins-ci.org.key</a></p><p><strong>安装jenkins</strong></p><p>yum -y install jenkins</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>jenkins默认端口是8080</p><p>修改端口，如果不需要修改端口，可过</p><p>vim /etc/sysconfig/jenkins</p><pre class="line-numbers language-java"><code class="language-java">## Type<span class="token operator">:</span>        <span class="token function">integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">65535</span><span class="token punctuation">)</span>## Default<span class="token operator">:</span>     <span class="token number">8080</span>## ServiceRestart<span class="token operator">:</span> jenkins## Port Jenkins is listening on<span class="token punctuation">.</span># Set to <span class="token operator">-</span><span class="token number">1</span> to disable#JENKINS_PORT<span class="token operator">=</span><span class="token string">"8080"</span>    ##端口，可修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动</p><p><strong>启动</strong></p><p>systemctl start jenkins</p><p><strong>设置开机启动</strong></p><p>chkconfig jenkins on</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装GitLab最新版本</title>
      <link href="/2018/12/17/linux-fu-wu/yum-an-zhuang-gitlab-zui-xin-ban-ben/"/>
      <url>/2018/12/17/linux-fu-wu/yum-an-zhuang-gitlab-zui-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>安装依赖</p><p><strong>安装policycoreutils-python openssh-server 来开启http跟ssh访问</strong></p><p>yum install curl policycoreutils openssh-server openssh-clients</p><p>systemctl enable sshd</p><p>systemctl start sshd</p><p><strong>安装Postfix以发送通知电子邮件</strong></p><p>yum install postfix</p><p>systemctl enable postfix</p><p>systemctl start postfix</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装gitlab</p><p><strong>添加GitLab包存储库</strong></p><p>curl <a href="https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh" target="_blank" rel="noopener">https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh</a> | sudo bash</p><p><strong>安装</strong> </p><p>yum install -y gitlab-ee</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>gitlab默认端口为80</p><p>修改端口，如果不需要修改端口可过</p><p>vim /etc/gitlab/gitlab.rb</p><p>以下就是修改端口需要更改的二个地方</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token number">939</span>  nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token number">940</span>  nginx<span class="token punctuation">[</span><span class="token string">'client_max_body_size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'250m'</span> <span class="token number">941</span>  nginx<span class="token punctuation">[</span><span class="token string">'redirect_http_to_https'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token number">942</span>  #nginx<span class="token punctuation">[</span><span class="token string">'redirect_http_to_https_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8010</span> <span class="token number">980</span> ##<span class="token operator">!</span> Docs<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>gitlab<span class="token punctuation">.</span>com<span class="token operator">/</span>omnibus<span class="token operator">/</span>settings<span class="token operator">/</span>nginx<span class="token punctuation">.</span>html#setting<span class="token operator">-</span>the<span class="token operator">-</span>nginx<span class="token operator">-</span>listen<span class="token operator">-</span>port <span class="token number">981</span> nginx<span class="token punctuation">[</span><span class="token string">'listen_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</p><p>以下就是修改端口需要更改的一个地方</p><pre class="line-numbers language-java"><code class="language-java">server <span class="token punctuation">{</span>  listen <span class="token operator">*</span><span class="token operator">:</span><span class="token number">8010</span><span class="token punctuation">;</span>  server_name gitlab<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  server_tokens off<span class="token punctuation">;</span> ## Don't show the nginx version number<span class="token punctuation">,</span> a security best practice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动</p><p><strong>重新加载配置文件</strong></p><p>gitlab-ctl reconfigure</p><p><strong>启动</strong></p><p>gitlab-ctl start</p><p><strong>停止</strong></p><p>gitlab-ctl stop</p><p><strong>重启</strong></p><p>gitlab-ctl restart</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录</title>
      <link href="/2018/12/05/linux/ssh-mian-mi-deng-lu/"/>
      <url>/2018/12/05/linux/ssh-mian-mi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>ssh密钥的简介</p><p>简单来说，就是在你安装以下的步骤后，在本机用户的用户目录中的.ssh目录中生成二个文件，为私钥(id_rsa)跟密钥(id_rsa.pub)。</p><p>私钥：私钥就是对应密钥的一个加密文件。</p><p>密钥：密钥要存储在你要免密登录的机器中的家目录下的.ssh目录下的authorized_keys文件，如果authorized_keys文件不存在，可以新建</p><p>注意：</p><p>authorized_keys文件的权限一定要是600</p><p>id_rsa私钥文件的权限一定要是600</p><p>id_rsa.pub密钥文件的权限一定要是644</p><p>警告：如果私钥文件被人获取，只要把私钥文件放在他们的机器中，也一样可以免密登录你们设置好的免密登录机器中</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>生成私钥密钥文件</p><p>ssh-keygen -t rsa</p><p>一直回车就ok了</p><p>这步骤完成了，私钥跟密钥文件就在你们用户的家目录中生成了</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 获取最新版本安装，以python方式安装</title>
      <link href="/2018/12/05/python/pip-huo-qu-zui-xin-ban-ben-an-zhuang-yi-python-fang-shi-an-zhuang/"/>
      <url>/2018/12/05/python/pip-huo-qu-zui-xin-ban-ben-an-zhuang-yi-python-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h3><p>获取最新的版本安装脚本</p><p>wget <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h3><p>使用python运行脚本安装</p><p>python get-pip.py</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h3><p>测试pip</p><p>pip -V</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装svn(Subversion-1.10.3)</title>
      <link href="/2018/11/22/linux-fu-wu/yuan-ma-an-zhuang-svn-subversion-1.10.3/"/>
      <url>/2018/11/22/linux-fu-wu/yuan-ma-an-zhuang-svn-subversion-1.10.3/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h1><p>安装各种依赖</p><h4 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a><strong>yum安装</strong></h4><p>yum -y install gcc gcc-c++ sqlite* zlib-devel zlib expat-devel openssh-clients</p><h4 id="安装apr"><a href="#安装apr" class="headerlink" title="安装apr"></a><strong>安装apr</strong></h4><p><strong>下载</strong></p><p>wget <a href="http://mirror.bit.edu.cn/apache//apr/apr-1.6.5.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache//apr/apr-1.6.5.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf apr-1.6.5.tar.gz </p><p><strong>安装</strong></p><p>cd apr-1.6.5</p><p>./configure –prefix=/usr/local/apr</p><p>make</p><p>make install</p><h4 id="安装apr-util"><a href="#安装apr-util" class="headerlink" title="安装apr-util"></a><strong>安装apr-util</strong></h4><p><strong>下载</strong></p><p>wget <a href="http://mirrors.hust.edu.cn/apache//apr/apr-util-1.6.1.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf apr-util-1.6.1.tar.gz</p><p><strong>安装</strong></p><p>cd apr-util-1.6.1</p><p>./configure –prefix=/usr/local/apr-util –with-apr=/usr/local/apr</p><p>make</p><p>make install</p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h1><p>安装Subversion</p><p><strong>下载</strong></p><p>wget <a href="http://mirror.bit.edu.cn/apache/subversion/subversion-1.10.3.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/subversion/subversion-1.10.3.tar.gz</a></p><p>wget <a href="https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz" target="_blank" rel="noopener">https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf subversion-1.10.3.tar.gz</p><p>tar -zxf sqlite-autoconf-3250300.tar.gz</p><p><strong>移动</strong></p><p>mv sqlite-autoconf-3250300 subversion-1.10.3/sqlite-amalgamation</p><p><strong>安装</strong></p><p>cd subversion-1.10.3</p><p>./configure –prefix=/usr/local/svn/ –with-apr=/usr/local/apr –with-apr-util=/usr/local/apr-util -with-utf8proc=internal –with-zlib –enable-maintainer-mode –with-lz4=internal</p><p>make</p><p>make install</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h1><p>设置环境变量</p><p>vim /etc/profile</p><pre class="line-numbers language-shell"><code class="language-shell">##SVNexport SVN_HOME=/usr/local/svn/export PATH=$PATH:$SVN_HOME/binsource ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>source /etc/profile</p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h1><p>配置svn-设置代码仓库</p><p><strong>创建目录做为代码仓库目录</strong></p><p>mkdir /svn</p><p><strong>进入</strong></p><p>cd /svn</p><p><strong>创建代码仓库（一定要在svn目录下，test代表代码仓库名）</strong></p><p>svnadmin create test</p><h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h1><p>启动访问svn服务</p><p><strong>启动</strong></p><p>svnserve -d -r /svn –listen-port=3690</p><p><strong>访问</strong></p><p>svn://IP地址:3690:/test</p><h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a><strong>第六步</strong></h1><p>设置svn开机自启（没需求可跳过）</p><p>vim /etc/rc.d/rc.local</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/svn/bin/svnserve -d -r /svn --listen-port=3690<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a><strong>第七步</strong></h1><p>代码仓库权限配置</p><p><strong>配置目录，我的代码仓库在/svn目录中，配置文件就在/svn目录中</strong></p><p>cd /svn/test/conf/</p><p>vim svnserve.conf</p><p><strong>代码仓库权限配置文件：svnserve.conf</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装字体</title>
      <link href="/2018/11/19/linux/an-zhuang-zi-ti/"/>
      <url>/2018/11/19/linux/an-zhuang-zi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>明确linux字体跟windows的位置</p><p>linux: /usr/share/fonts</p><p>windows：C:\Windows\Fonts”</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>准备好字体，上传至linux</p><p><strong>进入字体目录，可以用fonts目录下原来存在的字体目录，也可以新建目录。</strong></p><p><strong>我这边选择使用原先目录</strong></p><p>cd /usr/share/fonts</p><p>cd lyx/</p><p><strong>安装</strong></p><p>yum -y install fontconfig mkfontscale</p><p><strong>这边选使用rz来上传</strong></p><p>rz timesbd.ttf</p><p><strong>修改权限</strong></p><p>chmod 755 *.ttf</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>建立字体缓存，如果命令报错没有，请yum安装</p><p>mkfontscale</p><p>mkfontdir</p><p>fc-cache -fv</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装jenkins2.3，war包安装</title>
      <link href="/2018/11/15/linux-fu-wu/an-zhuang-jenkins2.3-war-bao-an-zhuang/"/>
      <url>/2018/11/15/linux-fu-wu/an-zhuang-jenkins2.3-war-bao-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载jenkins</p><p>分享二种下载方式</p><p><strong>系统下载</strong></p><p>wget <a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></p><p><strong>官方下载</strong></p><p><a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装tomcat，jdk</p><p><strong>可以参考我之前的文章</strong></p><p>jdk：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p>tomcat8：<a href="http://www.linux91.cn/c/Linux__centos7__tomcat8">http://www.linux91.cn/c/Linux__centos7__tomcat8</a></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装 </p><p><strong>移动</strong></p><p>mv jenkins.war /usr/local/tomcat/webapps/</p><p><strong>启动 后 等待3秒</strong></p><p>/usr/local/tomcat/bin/startup.sh</p><p><strong>删除加移动</strong></p><p>cd /usr/local/tomcat/webapps/</p><p>rm -rf ROOT/*</p><p>cp -a jenkins/* ROOT/</p><p><strong>重启</strong></p><p>/usr/local/tomcat/bin/shutdown.sh</p><p>/usr/local/tomcat/bin/startup.sh</p><p>最后，进入jenkins中</p><p>记得是8080端口</p><p>进去后，会让你去系统中的一个文件中获取密码，按提醒操作</p><p>还有让你选择，是安装，系统推荐的插件，还是自定义插件，建议选择推荐</p><p>最后就会让你，设置帐号密码</p><p><strong>到这里本章就结束了</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装redis4.0</title>
      <link href="/2018/11/15/redis/an-zhuang-redis4.0/"/>
      <url>/2018/11/15/redis/an-zhuang-redis4.0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)</p><p>zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><p>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p><p>Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p><p><a href="http://92.linux91.cn/attachment/20181115/b01a245897b4488d99a21ae444ae481c.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/b01a245897b4488d99a21ae444ae481c.jpg" alt="img"></a></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装依赖包</p><p>yum -y install gcc gcc++</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>解压，移动，编译，安装，配置</p><p><strong>解压</strong></p><p>tar -zxf redis-4.0.11.tar.gz </p><p><strong>移动</strong></p><p>mv redis-4.0.11 /usr/local/redis</p><p>cd /usr/local/redis</p><p><strong>编译</strong></p><p>make MALLOC=libc</p><p>或</p><p>make</p><p><strong>安装</strong></p><p>cd src</p><p>make install</p><p><strong>修改配置文件</strong></p><p>vim /usr/local/redis/redis.conf</p><pre class="line-numbers language-shell"><code class="language-shell">daemonize yes   #找到这个配置行，on修改成yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>启动</p><p><strong>指定配置文件启动</strong></p><p>/usr/local/redis/src/redis-server /usr/local/redis/redis.conf</p><p><strong>不指定</strong></p><p>/usr/local/redis/src/redis-server</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装 gitlab</title>
      <link href="/2018/11/13/linux-fu-wu/docker-an-zhuang-gitlab/"/>
      <url>/2018/11/13/linux-fu-wu/docker-an-zhuang-gitlab/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h3><p>需要安装docker</p><p><strong>可以参考之前的文章</strong></p><p>docker1.8：<a href="http://www.linux91.cn/c/centos7安装docker1_18">http://www.linux91.cn/c/centos7%E5%AE%89%E8%A3%85docker1_18</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h3><p>拉取镜像并启动</p><p><strong>拉取镜像</strong></p><p>docker pull gitlab/gitlab-ce:latest</p><p><strong>启动</strong></p><p>将hostname替换为本机的IP地址</p><p>docker run –detach –hostname 192.168.0.251 –publish 443:443 –publish 80:80 –publish 22:22 –name gitlab –restart always –volume /srv/gitlab/config:/etc/gitlab –volume /srv/gitlab/logs:/var/log/gitlab –volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest</p><h3 id="注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意"><a href="#注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意" class="headerlink" title="注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意"></a><strong>注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意</strong></h3><p>1.要注意系统内存，gitlab官方是要求2G以上的内存，如果没有到2G或以到2G都建议先部署虚拟内存，怎么部署虚拟内存，可以查看我之前的文章</p><p>2.gitlab启动的比较慢，要是没启动成功就会报502，所以请等待个1-2分钟，在去访问</p><p>3.gitlab第一次访问，会让你更新root管理员的密码</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Yearning-SQL审核平台</title>
      <link href="/2018/11/09/sql-shen-he/an-zhuang-yearning-sql-shen-he-ping-tai/"/>
      <url>/2018/11/09/sql-shen-he/an-zhuang-yearning-sql-shen-he-ping-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Yearning 开源的MYSQL SQL语句审核平台</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装环境，需要python3.6,mysql,nginx</p><p>注意：mysql跟nginx都可以yum安装，python3.6只能源码安装</p><p><strong>安装这些服务可以参考一下我之前的文章</strong></p><p>python3.6：<a href="http://www.linux91.cn/c/linux_centos7_Python3_6_3安装">http://www.linux91.cn/c/linux_centos7_Python3_6_3%E5%AE%89%E8%A3%85</a></p><p>mysql：<a href="http://www.linux91.cn/c/linux___centos7_下源码安装mysql5_7">http://www.linux91.cn/c/linux___centos7_%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql5_7</a></p><p>nginx：<a href="http://www.linux91.cn/c/liunx___centos7_下安装Yearning_SQL审核平台">http://www.linux91.cn/c/liunx___centos7_%E4%B8%8B%E5%AE%89%E8%A3%85Yearning_SQL%E5%AE%A1%E6%A0%B8%E5%B9%B3%E5%8F%B0</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>mysql配置</p><p><strong>进入mysql</strong></p><p>mysql -u root -p</p><p><strong>创建数据库</strong></p><p>CREATE DATABASE IF NOT EXISTS Yearning default charset utf8 COLLATE utf8_general_ci;</p><p><strong>创建数据库用户</strong></p><p>grant all on <em>.</em> to ‘yearning’@’%’ identified by ‘yearning’;</p><p><strong>刷新权限</strong></p><p>flush privileges;</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>下载Yearning源并解压</p><p>注意：如果去官方下载，一定要下载1.2版本的，因为1.2跟1.3版本安装方式不同</p><p>wget <a href="https://github.com/cookieY/Yearning/archive/v1.2.0.zip" target="_blank" rel="noopener">https://github.com/cookieY/Yearning/archive/v1.2.0.zip</a></p><p>unzip v1.2.0.zip</p><p>mv Yearning-1.2.0 Yearning</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>修改配置Yearning的配置文件</p><p>cd Yearning/src</p><p>cp -a deploy.conf.template deploy.conf</p><p>vim deploy.conf</p><p><strong>以下deploy.conf的配置，请按实际情况填写</strong></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token constant">db</span> <span class="token attr-value"><span class="token punctuation">=</span> Yearning</span><span class="token constant">address</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span>yearning</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span>yearning</span><span class="token selector">[host]</span><span class="token constant">ipaddress</span> <span class="token attr-value"><span class="token punctuation">=</span> 192.168.1.39:8080</span><span class="token selector">[Inception]</span><span class="token constant">ip</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 6669</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> root</span><span class="token constant">password</span>  <span class="token attr-value"><span class="token punctuation">=</span> x</span><span class="token constant">backupdb</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">backupport</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">backupuser</span> <span class="token attr-value"><span class="token punctuation">=</span> root</span><span class="token constant">backuppassword</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token selector">[LDAP]</span><span class="token constant">LDAP_SERVER</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_SCBASE</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_DOMAIN</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_TYPE</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token selector">[email]</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">smtp_server</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">smtp_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 25</span><span class="token selector">[sql]</span><span class="token constant">limit</span> <span class="token attr-value"><span class="token punctuation">=</span> 1000</span><span class="token selector">[webhook]</span><span class="token constant">dingding</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token constant">db</span> <span class="token attr-value"><span class="token punctuation">=</span> 所创建的库名</span><span class="token constant">address</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库地址</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库端口</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库密码</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库用户</span><span class="token selector">[host]</span><span class="token constant">ipaddress</span> <span class="token attr-value"><span class="token punctuation">=</span> 服务器ip地址:端口 (涉及跨域十分重要!!设置不正确将无法登陆!!)</span>            例如 本机地址为192.168.1.2 nginx端口为80(端口可自己定义，定义什么端口就填写什么端口)            则应填写为 192.168.1.2:80 之后只能通过该地址访问平台其他地址一概无效!            注意！访问的是nginx的端口不是后端8000端口！            (仅对于v1.2版本以下版本，对于1.2以上版本此配置信息只用来消息推送时显示平台地址）特别注意！ 以下配置信息为v1.2版本以下配置信息。v1.2版本及以上版本不存在以下配置信息<span class="token selector">[Inception]</span><span class="token constant">ip</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception地址</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception端口</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception用户名</span><span class="token constant">password</span>  <span class="token attr-value"><span class="token punctuation">=</span> Inception密码</span><span class="token constant">backupdb</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库地址</span><span class="token constant">backupport</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库端口</span><span class="token constant">backupuser</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库用户名</span><span class="token constant">backuppassword</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库密码</span><span class="token selector">[LDAP]</span> LDAP相关设置<span class="token constant">LDAP_SERVER</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP服务地址</span><span class="token constant">LDAP_SCBASE</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP dc 设置 如 dc=xxx,dc=com</span><span class="token constant">LDAP_DOMAIN</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP域名 如 xxx.com</span><span class="token constant">LDAP_TYPE</span> <span class="token attr-value"><span class="token punctuation">=</span> 1  1 通过域名进行ldap认证  2 通过uid进行ldap认证 3 通过cn进行ldap认证</span><span class="token selector">[email]</span> 邮箱推送相关设置<span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱发件账号 如 xxxx@163.com</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱发件账号密码</span><span class="token constant">smtp_server</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱stmp地址, 具体地址请咨询对应邮箱提供者</span><span class="token selector">[sql]</span><span class="token constant">limit</span> <span class="token attr-value"><span class="token punctuation">=</span> 100 查询最高的Limit数量</span><span class="token selector">[webhook]</span><span class="token constant">dingding</span> <span class="token attr-value"><span class="token punctuation">=</span>  权限提交,查询工单等其他非sql工单提交消息推送钉钉webhook</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>配置其它依赖</p><p><strong>安装相应python依赖库</strong></p><p>/usr/local/python3/bin/pip3 install -r requirements.txt</p><p><strong>初始化数据库</strong></p><p>python3 manage.py makemigrations core &amp;&amp; python3 manage.py migrate core</p><p><strong>添加初始化用户</strong></p><p>echo “from core.models import Account;Account.objects.create_user(username=’admin’, password=’Jlkj#123’, group=’admin’,is_staff=1)” | python3 manage.py shell</p><p><strong>初始化权限</strong></p><p>echo “from core.models import grained;grained.objects.get_or_create(username=’admin’, permissions={‘person’: [], ‘ddl’: ‘1’, ‘ddlcon’: [], ‘dml’: ‘1’, ‘dmlcon’: [], ‘dic’: ‘1’, ‘diccon’: [], ‘dicedit’: ‘0’, ‘user’: ‘1’, ‘base’: ‘1’, ‘dicexport’: ‘0’})” | python3 manage.py shell</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>移动网页文件到nginx的网页目录中</p><p>cp -rf Yearning/webpage/dist/* $NGINX_HOME/html/</p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>启动django</p><p>cd Yearning/src</p><p>python3 manage.py runserver 0.0.0.0:8000 </p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装nginx</title>
      <link href="/2018/11/09/nginx/yum-an-zhuang-nginx/"/>
      <url>/2018/11/09/nginx/yum-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>添加nginx到yum源中</p><pre class="line-numbers language-shell"><code class="language-shell">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>yum安装nginx</p><p>yum install -y nginx</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>启动并设置开机自启</p><p>systemctl start nginx</p><p>systemctl enable nginx</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>nginx目录配置路径</p><p><strong>网站文件存放默认目录</strong></p><p>/usr/share/nginx/html</p><p><strong>网站默认站点配置</strong></p><p>/etc/nginx/conf.d/default.conf</p><p><strong>自定义Nginx站点配置文件存放目录</strong></p><p>/etc/nginx/conf.d/Nginx</p><p><strong>全局配置</strong></p><p>/etc/nginx/nginx.conf</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yearning SQL审核平台1.3.0版本--docker安装</title>
      <link href="/2018/11/09/sql-shen-he/yearning-sql-shen-he-ping-tai-1.3.0-ban-ben-docker-an-zhuang/"/>
      <url>/2018/11/09/sql-shen-he/yearning-sql-shen-he-ping-tai-1.3.0-ban-ben-docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Yearning 开源的MYSQL SQL语句审核平台</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>自行安装docker-ce跟docker-compose</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装Yearning</p><p><strong>拉取服务，如果没有git命令，直接用yum安装</strong></p><p>git clone <a href="https://github.com/cookieY/Yearning.git" target="_blank" rel="noopener">https://github.com/cookieY/Yearning.git</a></p><p><strong>进入Yearning中的docker目录</strong></p><p>cd Yearning/install/yearning-docker-compose/</p><p><strong>启动</strong></p><p>docker-compose up -d</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>记得打开docker服务</p></li><li><p>保持3306，8080，8000这三个端口不存在，没被其它服务占有</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InceptionSQL自动审核-无web界面----第二种方式安装</title>
      <link href="/2018/11/09/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-er-chong-fang-shi-an-zhuang/"/>
      <url>/2018/11/09/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-er-chong-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Inception是一款用于MySQL语句的审核的开源工具，不但具备自动化审核功能，同时还具备执行、生成对影响数据的回滚语句功能。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装lnception需要以下三个服务，bison2.5.1。</p><p>需要安装以下三个组件服务，可以参考我之前的文章</p><p>bison2.5.1：<a href="http://www.linux91.cn/c/linux_centos7_bison_2_5_1安装">http://www.linux91.cn/c/linux_centos7_bison_2_5_1%E5%AE%89%E8%A3%85</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装相关依赖包</p><p>yum -y install bison ncurses-libs libncurses5-devel ncurses-devel wget git cmake openssl gcc-c++ gcc openssl-devel MySQL-python </p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装Inception</p><p><strong>把安装包移动至opt目录中，并安装</strong></p><p>mkdir -p /data/inception</p><p>cd /opt/</p><p>unzip inception-master.zip </p><p>mv inception-master inception</p><p>cd inception</p><p>sh inception_build.sh debug</p><p><strong>创建配置目录，并把执行文件复制过去</strong></p><p>cd debug/sql/</p><p>mkdir -p /data/inception /data/inception/bin /data/inception/temp</p><p>cp Inception /data/inception/bin/</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>修改配置文件</p><p>vim /etc/inc.cnf</p><pre class="line-numbers language-shell"><code class="language-shell">[inception]general_log=1general_log_file=/opt/inception/inception.logport=6669socket=/opt/inception/inc.socketcharacter-set-client-handshake=0character-set-server=utf8inception_remote_system_password=123456inception_remote_system_user=rootinception_remote_backup_port=3306inception_remote_backup_host=127.0.0.1inception_support_charset=utf8mb4inception_enable_nullable=0inception_check_primary_key=1inception_check_column_comment=1inception_check_table_comment=1inception_osc_min_table_size=1inception_osc_bin_dir=/opt/inception/tempinception_osc_chunk_time=0.1inception_ddl_support=1inception_enable_blob_type=1inception_check_column_default_value=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>启动</p><p>/data/inception/bin/Inception –defaults-file=/etc/inc.cnf &amp;</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>登录验证</p><p> mysql -uroot -h127.0.0.1 -P6669</p><p> inception get variables;</p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InceptionSQL自动审核-无web界面----第一种方式安装</title>
      <link href="/2018/11/08/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-yi-chong-fang-shi-an-zhuang/"/>
      <url>/2018/11/08/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-yi-chong-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Inception是一款用于MySQL语句的审核的开源工具，不但具备自动化审核功能，同时还具备执行、生成对影响数据的回滚语句功能。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装lnception需要以下三个服务，python3.6，pip9.0.1，bison2.5.1</p><p>需要安装以下三个组件服务，可以参考我之前的文章</p><p>python3.6：<a href="http://www.linux91.cn/c/linux_centos7_Python3_6_3安装">http://www.linux91.cn/c/linux_centos7_Python3_6_3%E5%AE%89%E8%A3%85</a></p><p>pip9.0.1：<a href="http://www.linux91.cn/c/linux_centos7_pip_9_0_3安装">http://www.linux91.cn/c/linux_centos7_pip_9_0_3%E5%AE%89%E8%A3%85</a></p><p>bison2.5.1：<a href="http://www.linux91.cn/c/linux_centos7_bison_2_5_1安装">http://www.linux91.cn/c/linux_centos7_bison_2_5_1%E5%AE%89%E8%A3%85</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装pip常用组件</p><p>pip install numpy scipy matplotlib scikit-learn</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装lnception</p><p>unzip inception-master.zip</p><p>cd inception-master</p><p>cmake .</p><p>cmake -DWITH_DEBUG=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/inception/ -DMYSQL_DATADIR=/inception -DWITH_SSL=yes -DCMAKE_BUILD_TYPE=RELEASE-DWITH_ZLIB=bundled-DMY_MAINTAINER_CXX_WARNINGS=”-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing -Wno-unused-parameter -Woverloaded-virtual” -DMY_MAINTAINER_C_WARNINGS=”-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing -Wdeclaration-after-statement”</p><p>make &amp;&amp; make install</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>添加配置文件</p><p>vim /etc/inc.cnf</p><pre class="line-numbers language-shell"><code class="language-shell">[inception]general_log=1general_log_file=inc.logport=6669socket=/tmp/inc.socketcharacter-set-client-handshake=0character-set-server=utf8mb4inception_remote_system_password=backupinception_remote_system_user=backupinception_remote_backup_port=3306inception_remote_backup_host=192.168.22.130inception_support_charset=utf8,utf8mb4,latin1inception_enable_nullable=0inception_check_primary_key=1inception_check_column_comment=1inception_check_table_comment=1inception_osc_min_table_size=1inception_osc_bin_dir=/usr/bininception_osc_chunk_time=0.1inception_ddl_support=1inception_enable_blob_type=1inception_check_column_default_value=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>启动Inception</p><p>/usr/local/inception/bin/Inception –defaults-file=/etc/inc.cnf &amp;</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>测试</p><p>查看端口是否存在</p><p>netstat -an | grep 6669</p><p>本地登录变量测试</p><p>mysql -uroot -P6669 -h127.0.0.1</p><p>inception get variables;</p><p>如果有出结果，就证明安装完成</p><h2 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h2><h3 id="第一个错误问题"><a href="#第一个错误问题" class="headerlink" title="第一个错误问题"></a>第一个错误问题</h3><p>在安装的时候，遇到了一个错误：make[2]: <em>*</em> [sql/CMakeFiles/sql.dir/sql_yacc.cc.o]</p><p>解决办法：</p><p>这个报错是代表你系统中的bison版本太高</p><h3 id="第二个错误问题"><a href="#第二个错误问题" class="headerlink" title="第二个错误问题"></a>第二个错误问题</h3><p>在安装的时候，还遇到另一个报错，一直显示目标目录不存在</p><p>CMake Error: The source directory “/j/inception-master/ -DMYSQL_DATADIR=/inception” does not exist.<br>Specify –help for usage, or press the help button on the CMake GUI.</p><p>解决办法：</p><p>在-DMYSQL_DATADIR左右的空格保持到只有一个，如果你们按我这个文章搭建就不会出现这种问题，因为文章中的所有命令都是解决了问题实验好后的命令</p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bison-2.5.1安装</title>
      <link href="/2018/11/06/linux-fu-wu/bison-2.5.1-an-zhuang/"/>
      <url>/2018/11/06/linux-fu-wu/bison-2.5.1-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>因为我们是要安装bison2.5.1的版本，centos中可能会自带bison的服务，一般版本会过高</p><p>查看系统中bison的版本，要是高于2.5.1就进行卸载</p><p>bison -V</p><p>卸载</p><p>yum remove bison</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>下载bison</p><p>wget <a href="http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz</a></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>安装bison</p><p>tar -zxf bison-2.5.1.tar.gz </p><p>cd bison-2.5.1</p><p>./configure </p><p>make</p><p>make install</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>测试bison</p><p>先确实bison在那个目录中。</p><p>which bison</p><p>正常会是在/usr/local/bin/bison</p><p>做软链接</p><p>ln -s /usr/local/bin/bison /usr/bin/bison</p><p>在测试</p><p>bison -V</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-pip-9.0.3安装</title>
      <link href="/2018/11/06/python/centos7-pip-9.0.3-an-zhuang/"/>
      <url>/2018/11/06/python/centos7-pip-9.0.3-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>下载pip9.0</p><p>wget <a href="https://files.pythonhosted.org/packages/c4/44/e6b8056b6c8f2bfd1445cc9990f478930d8e3459e9dbf5b8e2d2922d64d3/pip-9.0.3.tar.gz" target="_blank" rel="noopener">https://files.pythonhosted.org/packages/c4/44/e6b8056b6c8f2bfd1445cc9990f478930d8e3459e9dbf5b8e2d2922d64d3/pip-9.0.3.tar.gz</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安装pip</p><p>tar -zxf pip-9.0.3.tar.gz</p><p>cd pip-9.0.3</p><p>python setup.py install</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>测试pip是否安装成功</p><p>pip -V</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 下源码安装mysql5.7</title>
      <link href="/2018/11/05/mysql/centos7-xia-yuan-ma-an-zhuang-mysql5.7/"/>
      <url>/2018/11/05/mysql/centos7-xia-yuan-ma-an-zhuang-mysql5.7/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载MySQL5.7版本</p><p>官方网页：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p><p>下载方式：wget ht<a href="tps://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5." target="_blank" rel="noopener">tps://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.</a>7.23.tar.gz</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装依赖包</p><p>yum -y install ncurses ncurses-devel bison cmake gcc gcc-c++ make</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>创建数据库程度用户</p><p>useradd -s /sbin/nologin mysql</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>由于mysql5.7版本需求boost的版本要高，系统自带的boost版本偏低，不可用</p><h3 id="在-usr-local下创建一个名为boost的文件夹"><a href="#在-usr-local下创建一个名为boost的文件夹" class="headerlink" title="在/usr/local下创建一个名为boost的文件夹"></a><strong>在/usr/local下创建一个名为boost的文件夹</strong></h3><p>mkdir -p /usr/local/boost</p><h3 id="进入这个新创建的文件夹然后下载boost"><a href="#进入这个新创建的文件夹然后下载boost" class="headerlink" title="进入这个新创建的文件夹然后下载boost"></a><strong>进入这个新创建的文件夹然后下载boost</strong></h3><p>cd /usr/local/boost</p><p>wget <a href="http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz" target="_blank" rel="noopener">http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a><strong>解压</strong></h3><p>tar -xvzf boost_1_59_0.tar.gz</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>安装mysql</p><h3 id="解压MYSQL源码包并进入"><a href="#解压MYSQL源码包并进入" class="headerlink" title="解压MYSQL源码包并进入"></a><strong>解压MYSQL源码包并进入</strong></h3><p>tar -zxf mysql-5.7.23.tar.gz</p><p>cd mysql-5.7.23/</p><h3 id="检测安装环境"><a href="#检测安装环境" class="headerlink" title="检测安装环境"></a><strong>检测安装环境</strong></h3><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DSYSCONFDIR=/etc -DSYSTEMD_PID_DIR=/usr/local/mysql -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DMYSQL_DATADIR=/usr/local/mysql/data -DWITH_BOOST=boost -DWITH_SYSTEMD=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h4><p>-DCMAKE_INSTALL_PREFIX=/usr/local/mysql</p><p>​    ##定义安装目录</p><p>-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock</p><p>​    ##连接数据库socket路径</p><p>-DSYSCONFDIR=/etc</p><p>​    ##指定初始化参数文件目录（my.cnf）</p><p>-DSYSTEMD_PID_DIR=/usr/local/mysql</p><p>​    ##数据库目录</p><p>-DDEFAULT_CHARSET=utf8</p><p>​    ##指定默认使用的字符集编码</p><p>-DDEFAULT_COLLATION=utf8_general_ci</p><p>​    ##指定默认使用的字符集校对规则，utf8_general_ci是适用于UTF-8字符集的通用规则</p><p>-DWITH_INNOBASE_STORAGE_ENGINE=1</p><p>​    ##支持InnoDB引擎</p><p>-DWITH_PERFSCHEMA_STORAGE_ENGINE=1</p><p>​    ##安装支持数据库分区</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h3><p>make</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>make install</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>优化mysql的配置</p><h3 id="对数据库目录进行权限设置"><a href="#对数据库目录进行权限设置" class="headerlink" title="对数据库目录进行权限设置"></a><strong>对数据库目录进行权限设置</strong></h3><p>chown -R mysql.mysql /usr/local/mysql/</p><h3 id="配置mysql主配置文件"><a href="#配置mysql主配置文件" class="headerlink" title="配置mysql主配置文件"></a><strong>配置mysql主配置文件</strong></h3><h4 id="清空mysql主配置文件中的默认配置"><a href="#清空mysql主配置文件中的默认配置" class="headerlink" title="清空mysql主配置文件中的默认配置"></a><strong>清空mysql主配置文件中的默认配置</strong></h4><p>echo ‘’ &gt; /etc/my.cnf</p><h4 id="添加mysql主配置文件中的默认配置"><a href="#添加mysql主配置文件中的默认配置" class="headerlink" title="添加mysql主配置文件中的默认配置"></a><strong>添加mysql主配置文件中的默认配置</strong></h4><p>vim /etc/my.cnf</p><p>增加以下的配置</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysql]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysqld]</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql</span><span class="token constant">basedir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql</span><span class="token constant">datadir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/data</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">pid-file</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysqld.pid</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token constant">server-id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token constant">sql_mode</span><span class="token attr-value"><span class="token punctuation">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,PIPES_AS_CONCAT,ANSI_QUOTES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="权限赋予"><a href="#权限赋予" class="headerlink" title="权限赋予"></a><strong>权限赋予</strong></h4><p>chown mysql:mysql /etc/my.cnf</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a><strong>设置环境变量</strong></h3><p>vim /etc/profile</p><p>增加以下的配置</p><pre class="line-numbers language-shell"><code class="language-shell">PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATHexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>source /etc/profile</p><p>   ##刷新配置文件</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a><strong>初始化数据库</strong></h3><h4 id="进入mysql目录"><a href="#进入mysql目录" class="headerlink" title="进入mysql目录"></a><strong>进入mysql目录</strong></h4><p>cd /usr/local/mysql/bin/</p><h4 id="初始化数据库-1"><a href="#初始化数据库-1" class="headerlink" title="初始化数据库"></a><strong>初始化数据库</strong></h4><p>mysqld –initialize-insecure –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><h3 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a><strong>添加系统服务</strong></h3><p>cp /usr/local/mysql/usr/lib/systemd/system/mysqld.service /usr/lib/systemd/system/</p><p>systemctl daemon-reload</p><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a><strong>设置开机自启</strong></h3><p>systemctl enable mysqld</p><h3 id="开启mysql服务"><a href="#开启mysql服务" class="headerlink" title="开启mysql服务"></a><strong>开启mysql服务</strong></h3><p>systemctl start mysqld</p><h3 id="查看mysql服务是否开启"><a href="#查看mysql服务是否开启" class="headerlink" title="查看mysql服务是否开启"></a><strong>查看mysql服务是否开启</strong></h3><p>netstat -an | grep 3306</p><h3 id="修改mysql密码"><a href="#修改mysql密码" class="headerlink" title="修改mysql密码"></a><strong>修改mysql密码</strong></h3><h4 id="初始数据库是没有密码的，所以直接进入"><a href="#初始数据库是没有密码的，所以直接进入" class="headerlink" title="初始数据库是没有密码的，所以直接进入"></a><strong>初始数据库是没有密码的，所以直接进入</strong></h4><p>mysql -u root</p><h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a><strong>修改密码</strong></h4><p>update mysql.user set authentication_string=password(‘密码’) where user=’root’;</p><h4 id="增加外部连接用户"><a href="#增加外部连接用户" class="headerlink" title="增加外部连接用户"></a><strong>增加外部连接用户</strong></h4><p>create user ‘root’@’%’ identified by ‘密码’;</p><h4 id="增加用户全部权限"><a href="#增加用户全部权限" class="headerlink" title="增加用户全部权限"></a><strong>增加用户全部权限</strong></h4><p>grant all on <em>.</em> to root@’%’ identified by ‘123456’;</p><p>grant all on <em>.</em> to root@’localhost’ identified by ‘123456’;</p><h4 id="刷新Mysql权限"><a href="#刷新Mysql权限" class="headerlink" title="刷新Mysql权限"></a><strong>刷新Mysql权限</strong></h4><p>flush privileges;</p><h4 id="查看数据库版本"><a href="#查看数据库版本" class="headerlink" title="查看数据库版本"></a><strong>查看数据库版本</strong></h4><p>SHOW VARIABLES WHERE Variable_name = ‘version’;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql修改连接数</title>
      <link href="/2018/11/02/mysql/mysql-xiu-gai-lian-jie-shu/"/>
      <url>/2018/11/02/mysql/mysql-xiu-gai-lian-jie-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="第一种临时生效"><a href="#第一种临时生效" class="headerlink" title="第一种临时生效"></a>第一种临时生效</h4><p>直接修改mysql中的表数据，只能临时生效，重启mysql不生效</p><p>用管理员进入mysql后</p><p>set GLOBAL max_connections=1024;</p><h4 id="第二种永久生效"><a href="#第二种永久生效" class="headerlink" title="第二种永久生效"></a>第二种永久生效</h4><p>通过直接修改mysql的配置文件</p><p>vim /etc/my.con</p><p>这个配置文件是mysql默认的配置文件</p><p>max_connections=1000 </p><p>加上这个，连接数就会变成1000</p><p>重启mysql</p><h4 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h4><p>通过重启后测试了连接数没有更改过来，在网上查找原因：max_connections依托于操作系统，Linux系统必要时需要增加open-files-limit</p><p>解决方案：</p><p>vim /usr/lib/systemd/system/mysqld.service</p><p>LimitNOFILE=50000</p><p>在重启一下mysql，问题解决</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于log.io项目，实现实时日志web实现查看</title>
      <link href="/2018/10/26/linux-fu-wu/ji-yu-log.io-xiang-mu-shi-xian-shi-shi-ri-zhi-web-shi-xian-cha-kan/"/>
      <url>/2018/10/26/linux-fu-wu/ji-yu-log.io-xiang-mu-shi-xian-shi-shi-ri-zhi-web-shi-xian-cha-kan/</url>
      
        <content type="html"><![CDATA[<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>  centos7.4</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>安装所需依赖，Epel存储库，node.js平台，npm节点管理器</p><h4 id="Epel存储库"><a href="#Epel存储库" class="headerlink" title="Epel存储库"></a>Epel存储库</h4><p>这是Epel官方推荐的安装方式，安装后更新一下系统的软件</p><p>yum install <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p><p>yum update</p><h4 id="node-js平台-npm节点管理器。"><a href="#node-js平台-npm节点管理器。" class="headerlink" title="node.js平台-npm节点管理器。"></a>node.js平台-npm节点管理器。</h4><p>这二种可以看成是一体的，因为npm实际算是node.js的包管理器</p><p>安装前先添加ngde.js的yum源</p><p>yum install -y gcc-c++ make</p><p>curl -sL <a href="https://rpm.nodesource.com/setup_6.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_6.x</a> | sudo -E bash -</p><p>检测系统是否有老版本的ngde.js跟npm服务</p><p>卸载：yum erase nodejs npm -y</p><p>检测：rpm -qa ‘node|npm’ | grep -v nodesource</p><p>安装ngde.js跟npm</p><p>yum -y install nodejs -y</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安装log.io服务</p><p>Log.io应用程序必须在系统上通过NPM通过指定一个有效的本地系统用户，个人建议使用root用户或你日常使用的用户</p><p>npm install -g log.io –user “root”</p><p>安装完后，目录是在你指定的用户家目录下的.log.io目录，为了增加安全性，设置了隐藏目录</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>.log.io目录中有三个文件，harvester.conf，log_server.conf ，web_server.conf。</p><h4 id="harvester-conf"><a href="#harvester-conf" class="headerlink" title="harvester.conf"></a>harvester.conf</h4><p>harvester.conf文件在其配置中声明在指定的本地日志文件的变化，通过TCP socket.io将其输出 »»何其他远程服务器-文件harvester.conf-bash: harvester.conf文件在其配置中声明在指定的本地日志文件的变化，通过TCP: 未找到命令[root@localhost .log.io]# 协议进一步邮件发送到Log.io本地服务器或它的IP地址（harvester.conf指定广播到所有log.io监听服务器0.0.0.0地址）宣布任何其他远程服务器，如果不需要远程收集，建议修改0.0.0.0地址</p><h4 id="log-server-conf"><a href="#log-server-conf" class="headerlink" title="log_server.conf"></a>log_server.conf</h4><p>Log.io服务器在所有网络接口上绑定（如果没有在log_server.conf文件中指定），并等待来自本地或远程收集器节点的消息，并将其输出发送到log.io Web服务器（0.0.0.0表示它等待消息从任何本地或远程收割机）log_server.conf文件，如果不需要远程收集，建议修改0.0.0.0地址</p><h4 id="web-server-conf"><a href="#web-server-conf" class="headerlink" title="web_server.conf"></a>web_server.conf</h4><p>Log.io Web服务器绑定所有网络接口，监听端口28778和流程的Web客户端的连接，并输出它从log.io服务器收到内部消息，如登 录凭据，HTTPS或限制基础上的IP，以Log.io Web服务器可以在Web服务器端的应用-web_server.conf</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>启动服务</p><p>log.io-server &amp; </p><p>log.io-harvester &amp;</p><p>web界面请访问web_server.conf配置文件中的端口，默认为：28778</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 RocketMQ</title>
      <link href="/2018/10/25/linux-fu-wu/centos7-an-zhuang-rocketmq/"/>
      <url>/2018/10/25/linux-fu-wu/centos7-an-zhuang-rocketmq/</url>
      
        <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>  centos7.4</p><p>  mavem3.5</p><p>RocketMQ是需要mavem来编译的，安装mavem可以查找我之前的文章</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>下载RocketMQ并编译</p><p>下载：wget <a href="http://mirror.bit.edu.cn/apache/rocketmq/4.3.0/rocketmq-all-4.3.0-source-release.zip" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/rocketmq/4.3.0/rocketmq-all-4.3.0-source-release.zip</a></p><p>解压：unzip rocketmq-all-4.3.0-source-release.zip </p><p>移动：mv rocketmq-all-4.3.0 /usr/local/rocketmq</p><p>进入：cd /usr/local/rocketmq</p><p>编译：mvn -Prelease-all -DskipTests clean install -U</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>调整内存大小，RocketMQ默认分配的内存太大，需要按自己的情况调整，大佬随意过</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>这里要调整二个内存配置文件，因为RocketMQ有二个进程，runbroker.sh 和 runserver.sh 文件</p><p>vim runserver.sh</p><p>修改以下的配置来控制内存<br>JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m”</p><p>vim runbroker.sh</p><p>修改以下的配置来控制内存</p><p>JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m”</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>启动RocketMQ的二个进程namesrv，broker，官方建议先启动namesrv，然后启动 broker</p><p>namesrv启动</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>启动：nohup bin/mqnamesrv &amp;</p><p>查看启动日志：tail -f nohup.out</p><p>broker启动</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>启动：nohup sh bin/mqbroker -n localhost:9876 &amp;</p><p>查看启动日志：tail -f nohup.out</p><p>注意：在启动的时候可能会出错，可以看最后的出错总结</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>关闭服务，跟启动顺序相反，官方建议先关闭broker，然后在关闭namesrv</p><p>sh bin/mqshutdown broker</p><p>sh bin/mqshutdown namesrv</p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>常用命令，日常不用到</p><p>查看集群情况： ./mqadmin clusterList -n 127.0.0.1:9876</p><p>查看 broker 状态： ./mqadmin brokerStatus -n 127.0.0.1:9876 -b 172.20.1.138:10911</p><p>查看 topic 列表： ./mqadmin topicList -n 127.0.0.1:9876</p><p>查看 topic 状态： ./mqadmin topicStatus -n 127.0.0.1:9876 -t MyTopic (换成想查询的 topic)</p><p>查看 topic 路由： ./mqadmin topicRoute -n 127.0.0.1:9876 -t MyTopic</p><h4 id="出错总结"><a href="#出错总结" class="headerlink" title="出错总结"></a>出错总结</h4><p>安装时，遇到的所有出错</p><p>1.</p><p>ERROR: Please set the JAVA_HOME variable in your environment, We need java(x64)! !!</p><p>启动namesrv的时候报了上面的这个错，又查看自身的jdk配置没问题，是runserver.sh文件中的jdk配置有问题</p><p>解决方案：</p><p>vim runserver.sh 或 vim runbroker.sh</p><p>下面第二行，有写jdk的路径，我把他更改成我系统中的jdk路径。解决</p><p>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; JAVA_HOME=$HOME/jdk/java<br>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; JAVA_HOME=/usr/local/jdk<br>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; error_exit “Please set the JAVA_HOME variable in your environment, We need java(x64)!”</p><p>2.</p><p>如果没有调整内存的话，你的机器没有足够的内存支持，也是会报错的，解决方案：看第二步</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 activemq</title>
      <link href="/2018/10/25/linux-fu-wu/centos7-an-zhuang-activemq/"/>
      <url>/2018/10/25/linux-fu-wu/centos7-an-zhuang-activemq/</url>
      
        <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>  centos7.4</p><p>activemq的安装很简单，这里只会说到activemq的配置跟内存控制</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>安装activemq，我们需要下载activemq的安装包，我这边就先下载好了，小伙伴们可以去官方下载</p><p>解压：tar -zxf apache-activemq-5.9.0-bin.tar.gz</p><p>移动：mv apache-activemq-5.9.0 /usr/local/activemq</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>设置内存大小限制，这一步如果小伙伴不需要限制可以直接看第三步</p><p>进入：cd /usr/local/activemq/bin/</p><p>配置启动文件：vim activemq</p><p>找到以下的配置行，默认来说是1g</p><pre class="line-numbers language-shell"><code class="language-shell"># Set jvm memory configurationif [ -z "$ACTIVEMQ_OPTS_MEMORY" ] ; thenACTIVEMQ_OPTS_MEMORY="-Xms1G-Xmx1G"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>启动activemq</p><p>进入：cd /usr/local/activemq/bin/</p><p>启动：./activemq start</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装zookeeper</title>
      <link href="/2018/10/25/zookeeper/centos7-an-zhuang-zookeeper/"/>
      <url>/2018/10/25/zookeeper/centos7-an-zhuang-zookeeper/</url>
      
        <content type="html"><![CDATA[<p>环境：</p><p>  centos7.4</p><p>  JDK1.8</p><p>要安装就要先安装jdk，安装jdk可以查我之前的文章</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>上传zookeeper安装包，解压，移动，创建数据目录</p><p>安装我是先准备好的，你们可以去官方下载</p><p>解压：tar -zxf zookeeper-3.4.12.tar.gz</p><p>移动：mv zookeeper-3.4.12 /usr/local/zookeeper</p><p>创建数据目录：mkdir /usr/local/zookeeper/data</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>配置文件中的配置行，配置文件改名</p><p>进入：cd /usr/local/zookeeper/conf/</p><p>改名：mv zoo_sample.cfg zoo.cfg </p><p>修改：vim zoo.cfg</p><p>  dataDir=/usr/local/zookeeper/data   </p><p>​      ##修改为我们刚刚创建的数据目录路径</p><p>  clientPort=2181</p><p>​      ##这配置行可以修改端口，有需要的小伙伴可以通过这配置行修改zk的端口</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>第三步是修改内存大小，这步只针对需要限制zk对内存使用的大小的小伙伴们</p><p>如果zk是新装的，正常来说内存配置文件是不存在的。</p><p>cd /usr/local/zookeeper/bin/</p><p>vim zkEnv.sh</p><p>查看以下的配置，查看是否存在，正常来说是存在的，配置中的java.env这个是内存分配文件的名称</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>f <span class="token string">"$ZOOCFGDIR/java.env"</span> <span class="token punctuation">]</span>then<span class="token punctuation">.</span> <span class="token string">"$ZOOCFGDIR/java.env"</span>fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建内存配置文件跟配置</p><p>cd /usr/local/zookeeper/conf/</p><p>vim java.env </p><p>java.env就复制下面的配置，JAVA_HOME是系统jdk的路径，VMFLAGS是要分配内存的大小，最小-最大。</p><p>#!/bin/sh</p><p>export JAVA_HOME=/usr/local/jdk</p><p># heap size MUST be modified according to cluster environment</p><p>export JVMFLAGS=”-Xms256m -Xmx512m $JVMFLAGS”</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>就是说一下常用命令，命令目录在zk中的bin目录中</p><p>cd /usr/local/zookeeper/bin/</p><p>启动：./zkServer.sh start</p><p>停止：./zkServer.sh stop</p><p>查看状态：./zkServer.sh status</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本二进制加密，shc的安装和简单使用</title>
      <link href="/2018/10/23/linux-fu-wu/shell-jiao-ben-er-jin-zhi-jia-mi-shc-de-an-zhuang-he-jian-dan-shi-yong/"/>
      <url>/2018/10/23/linux-fu-wu/shell-jiao-ben-er-jin-zhi-jia-mi-shc-de-an-zhuang-he-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>centos7.4</p><p>shc9.3</p><h4 id="下载shc的安装包，"><a href="#下载shc的安装包，" class="headerlink" title="下载shc的安装包，"></a>下载shc的安装包，</h4><p>可以去GIT中下载：<a href="https://github.com/neurobin/shc/tree/3.9.3" target="_blank" rel="noopener">https://github.com/neurobin/shc/tree/3.9.3</a></p><p>wget <a href="https://github.com/neurobin/shc/archive/3.9.3.zip" target="_blank" rel="noopener">https://github.com/neurobin/shc/archive/3.9.3.zip</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>unzip 3.9.3.zip</p><p>cd shc-3.9.3/</p><p>./configure</p><p>make</p><p>make install</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>shc -v</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>shc -v -r -f 文件名</p><p>-v：详细编译</p><p>-r：创建一个可在发行的二进制文件 </p><p>-f：要编译的脚本名</p><p>编译后会出现二个文件</p><p>脚本.x ：可以执行的二进制脚本</p><p>脚本.x.c ：可以脚本.x的原文件，简单来说就是c语言的脚本</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保存yum下载软件包</title>
      <link href="/2018/10/12/linux/bao-cun-yum-xia-zai-ruan-jian-bao/"/>
      <url>/2018/10/12/linux/bao-cun-yum-xia-zai-ruan-jian-bao/</url>
      
        <content type="html"><![CDATA[<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>我们要先安装测试yum命令中的一个参数，低版本的centos默认是不带的</p><p>yum install yum-downloadonly</p><p>安装完毕后，yum就有这二个参数–downloadonly，–downloaddir=。</p><p>现在实现下载安装包不安装，</p><p>yum install wget –downloadonly –downloaddir=/root/</p><p>运行这个命令，就会把wget的安装包放置在root目录下</p><p><strong>不过有个问题，就是你要下载的这个软件包，要是你系统中已安装了，就不会下载成功</strong></p><h4 id="第二种的"><a href="#第二种的" class="headerlink" title="第二种的"></a>第二种的</h4><p>修改yum的配置文件，使我们下载安装软件后，软件包不删除</p><p>vim/etc/yum.conf</p><p>把里面的keepcache=0改成keepcache=1</p><p>以后安装或更新后，软件包都会保存在/var/cache/yum这个目录中</p><p>在这个配置文件中有个选项</p><p>cachedir=/var/cache/yum</p><p>这个选项就代表软件包的存放地</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别名永久设置，alias永久设置</title>
      <link href="/2018/09/28/linux/bie-ming-yong-jiu-she-zhi-alias-yong-jiu-she-zhi/"/>
      <url>/2018/09/28/linux/bie-ming-yong-jiu-she-zhi-alias-yong-jiu-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>别名设置，分临时跟永久，本章就只介绍永久设置怎么设置</p><p>永久设置的配置文件.bashrc</p><p>在每个用户的家目录都有</p><p>如果在用户家目录中的.bashrc设置，就这别名只针对这用户</p><p>要面向全部用户，就要去/etc/skel/.bashrc这里修改</p><p>alias配置</p><p>alias 名称=’替换的参数’</p><p>例：</p><p>alias rm=’rm -i’</p><p>配置完，保险起见，来一个source</p><p>source /etc/skel/.bashrc</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪守护进程脚本，无限循环检测。开机自启</title>
      <link href="/2018/09/26/linux/wei-shou-hu-jin-cheng-jiao-ben-wu-xian-xun-huan-jian-ce-kai-ji-zi-qi/"/>
      <url>/2018/09/26/linux/wei-shou-hu-jin-cheng-jiao-ben-wu-xian-xun-huan-jian-ce-kai-ji-zi-qi/</url>
      
        <content type="html"><![CDATA[<p>要在项目中加上守护进程，意外崩溃后自动启动项目，机器重启时自动启动项目。</p><p>分为二种脚本</p><h4 id="第一种，无限循环检测项目是否启动。"><a href="#第一种，无限循环检测项目是否启动。" class="headerlink" title="第一种，无限循环检测项目是否启动。"></a>第一种，无限循环检测项目是否启动。</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/<span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token keyword">do</span>PID<span class="token operator">=</span><span class="token punctuation">$(</span>ps -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"检测关键字"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$PID</span>"</span><span class="token operator">></span>/dev/null        <span class="token keyword">else</span>                启动方法                <span class="token function">sleep</span> 3        <span class="token keyword">fi</span><span class="token function">sleep</span> 3<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种，开机自启动脚本"><a href="#第二种，开机自启动脚本" class="headerlink" title="第二种，开机自启动脚本"></a>第二种，开机自启动脚本</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#chkconfig: 35 20 80</span><span class="token comment" spellcheck="true">#description: server</span><span class="token comment" spellcheck="true">#mkdir /var/run/zabbix</span><span class="token comment" spellcheck="true">#chown zabbix:zabbix -R /var/run/zabbix/</span><span class="token comment" spellcheck="true">#/usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</span><span class="token function">sleep</span> 1启动循环脚本 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后要是要自启动，可别忘了用chkconfig命令"><a href="#最后要是要自启动，可别忘了用chkconfig命令" class="headerlink" title="最后要是要自启动，可别忘了用chkconfig命令"></a>最后要是要自启动，可别忘了用chkconfig命令</h4><p>chkconfig –add </p><p>可能大家会问，为什么不把启动脚本写到循环脚本中，可能是博主懒吧，因为在装zabbix客户端后，重启是可能会报错，博客就报了个错，找不到目录，我顺便把解放方法写进启动脚本，让他开机运行一次，这个解决是可以写入zabbix客户端的启动脚本中的，就可以解决，因博主管理的主机比较多点，懒得去修改，刚好需要编写循环脚本，就直接写到启动脚本中，还有一个问题，就是我公司不是说每一台服务都只放一个项目，很多都是二个项目或三个项目放在一台服务器上，这样用启动脚本，全部都可以带起来，就不用一个一个去循环脚本编写和加入自启动服务中。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置脚本或命令开机自启动</title>
      <link href="/2018/09/25/linux/she-zhi-jiao-ben-huo-ming-ling-kai-ji-zi-qi-dong/"/>
      <url>/2018/09/25/linux/she-zhi-jiao-ben-huo-ming-ling-kai-ji-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>目前有三种文件，如果是说需要脚本自启动，我推荐第三种方法</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>编辑文件 /etc/rc.local</p><p>  vim /etc/rc.local</p><p>  在最下面增加你要启动的命令如</p><p>  /etc/init.d/mysqld start   ## mysql开机启动</p><p>  exit 0  #在文件末尾（添加好命令后）</p><p>注意：执行的程序需要写绝对路径，添加到系统环境变量的除外</p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>把自己写好的shell脚本放在/etc/profile.d/</p><p>系统启动后就会自动执行该目录下的所有shell脚本</p><p>注意：在使用第二种方法时，遇到一个坑，就是放在/etc/profile.d/的脚本，每开启一个终端，就会执行一次。</p><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><p>通过chkconfig命令设置</p><p>将准备好的启动脚本放在/etc/init.d/或者/etc/rc.d/init.d/</p><p>启动脚本文件中，必须要有</p><p>#!/bin/bash              ##告诉系统使用的shell,所以的shell脚本都是这样<br>#chkconfig: 35 20 80       ##分别代表运行级别，启动优先权，关闭优先权，这行都注释掉！！！，此行代码必须<br>#description: server        ##（随便填写）这行都注释掉！！！，此行代码必须</p><p>chkconfig –add 脚本文件名    ##这样子，就添加了</p><p>注意：启动脚本必须要用执行权限</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix-agent--安装zabbix客户端--yum安装</title>
      <link href="/2018/09/25/zabbix/zabbix-agent-an-zhuang-zabbix-ke-hu-duan-yum-an-zhuang/"/>
      <url>/2018/09/25/zabbix/zabbix-agent-an-zhuang-zabbix-ke-hu-duan-yum-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>环境：centos7.4</p><p>软件包：zabbix-agent-3.2.6-1.el6.x86_64.rpm、</p><p>把准备好的安装包放入系统中</p><h4 id="安装zabbix客户端"><a href="#安装zabbix客户端" class="headerlink" title="安装zabbix客户端"></a>安装zabbix客户端</h4><p>yum -y install zabbix-agent-3.2.6-1.el6.x86_64.rpm</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>vim /etc/zabbix/zabbix_agentd.conf</p><pre class="line-numbers language-shell"><code class="language-shell">Server=192.168.1.66##修改为zabbix服务器地址ServerActive=192.168.1.66##修改收集数据端为zabbix服务器地址Hostname=127.0.0.1##修改为本机的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h4><p>service zabbix-agent start</p><p>或</p><p>systemctl start zabbix-agent</p><h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><p>chkconfig zabbix-agent on</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>遇到的一个坑，在服务器重新开机时，启动不了，具体的报错，忘了</p><p>解决方案：</p><p>​    mkdir /var/run/zabbix<br>​    chown zabbix:zabbix -R /var/run/zabbix/<br>​    /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</p><p>可以写入开机启动时自动执行的文件中</p>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java诊断工具之Arthas简单安装--阿里开源项目</title>
      <link href="/2018/09/25/linux-fu-wu/java-zhen-duan-gong-ju-zhi-arthas-jian-dan-an-zhuang-a-li-kai-yuan-xiang-mu/"/>
      <url>/2018/09/25/linux-fu-wu/java-zhen-duan-gong-ju-zhi-arthas-jian-dan-an-zhuang-a-li-kai-yuan-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>官方安装文档：<a href="https://alibaba.github.io/arthas/install-detail.html#linux-unix-mac" target="_blank" rel="noopener">https://alibaba.github.io/arthas/install-detail.html#linux-unix-mac</a></p><h4 id="安装前要先安装依赖包"><a href="#安装前要先安装依赖包" class="headerlink" title="安装前要先安装依赖包"></a>安装前要先安装依赖包</h4><p>yum -y install unzip telnet</p><h4 id="JDK的安装位置"><a href="#JDK的安装位置" class="headerlink" title="JDK的安装位置"></a>JDK的安装位置</h4><p>JDK要存储位置：/opt/taobao/java</p><h4 id="Arthas安装"><a href="#Arthas安装" class="headerlink" title="Arthas安装"></a>Arthas安装</h4><p><strong>下载</strong></p><pre><code>curl -L https://alibaba.github.io/arthas/install.sh | sh</code></pre><h4 id><a href="#" class="headerlink" title=" "></a> </h4><p><strong>安装</strong></p><p>./as.sh $PATH</p><p>本人在arthar安装的时候遇到的神坑，在总结经过上面的依赖包跟JDK安装位置的经验，安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建swap分区文件-实现虚拟内存--阿里云</title>
      <link href="/2018/09/25/linux/chuang-jian-swap-fen-qu-wen-jian-shi-xian-xu-ni-nei-cun-a-li-yun/"/>
      <url>/2018/09/25/linux/chuang-jian-swap-fen-qu-wen-jian-shi-xian-xu-ni-nei-cun-a-li-yun/</url>
      
        <content type="html"><![CDATA[<h4 id="建立虚拟内存文件存储目录"><a href="#建立虚拟内存文件存储目录" class="headerlink" title="建立虚拟内存文件存储目录"></a>建立虚拟内存文件存储目录</h4><p>mkdir /swap</p><h4 id="创建虚拟内存文件"><a href="#创建虚拟内存文件" class="headerlink" title="创建虚拟内存文件"></a>创建虚拟内存文件</h4><p>dd if=/dev/zero of=/swap/swapfile bs=1M count=1024</p><p>   其中的count等于想要的块的数量(bs*count=文件大小)，1024为1G。</p><h4 id="格式虚拟内存文件为交换内存分区文件"><a href="#格式虚拟内存文件为交换内存分区文件" class="headerlink" title="格式虚拟内存文件为交换内存分区文件"></a>格式虚拟内存文件为交换内存分区文件</h4><p>mkswap /swap/swapfile </p><p>   建立swap的文件系统</p><h4 id="启动交换区文件"><a href="#启动交换区文件" class="headerlink" title="启动交换区文件"></a>启动交换区文件</h4><p>swapon /swap/swapfile</p><p>   启用swap文件</p><h4 id="系统开机时自启用"><a href="#系统开机时自启用" class="headerlink" title="系统开机时自启用"></a>系统开机时自启用</h4><p>vim /etc/fstab</p><p>/swap/swapfile swap swap defaults 0 0</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库备份机制的描述</title>
      <link href="/2018/09/21/mysql/mysql-shu-ju-ku-bei-fen-ji-zhi-de-miao-shu/"/>
      <url>/2018/09/21/mysql/mysql-shu-ju-ku-bei-fen-ji-zhi-de-miao-shu/</url>
      
        <content type="html"><![CDATA[<p>公司要求，数据库每天备份一次，保存30份或天的数据备份文件，在保存每个月的最后一天的数据备份文件</p><p>根据公司的需求，个人想出了一个方案，可能是因能力不足，无法想出更完善的方案</p><p>方案分为三个步。</p><p>​    \1. 备份方案</p><p>​        制定备份脚本，设置定时任务，使脚本每天晚上在指定的时间执行一次，</p><p>​           脚本要求：如MySQL数据库。因项目有关，需要备份MySQL中的3个数据库，三个数据库不能同时备份，</p><p>​                  要先备份一个，在检测是否有生成备份文件后在备份第二个，第二个备份完在检测<strong><em><em>*</em></em></strong>。</p><p>​                  备份不能远程备份。要在本机备份后，打成压缩包并发送到指定存储的服务器上，检测是否发送成功，</p><p>​                  如果成功，执行删除刚刚备份的文件目录，要是不成功报错。</p><p>​                  这样有个好处，如果脚本运行中只要有一步出错，备份脚本就会停止并报错，</p><p>​                  减少需要恢复数据库时所产生的数据库备份不完整风险。</p><p>​    \2. 删除方案</p><p>​        制定删除脚本，设置定时任务，使脚本每天在指定的时间执行一次。</p><p>​           脚本要求：本人感觉只保留最近30份文件比保留最近30天的比较靠谱一点，其实都是一样的，哈哈。</p><p>​                  设置脚本在每天执行一次，一定要比保留方案晚执行，就是要在保留脚本执行后过一段时间，</p><p>​                  在执行删除脚本，实现删除。前期在测试删除脚本时，建议需要，修改备份脚本，</p><p>​                  让发送的备份压缩文件增加到二台机，一台用于测试删除脚本</p><p>​    \3. 保留方案</p><p>​        制定保留脚本，设置定时任务，使脚本在每个月最后天执行一次。</p><p>​           脚本要求：检测出对应日期的文件，进行发送到指定存储的服务器上，还有一个要求，就一个。</p><p>​                  保留脚本一定要比删除脚本早执行一段时间，如果保留脚本出错，一定要通过监控服务或其它，</p><p>​                  及时的通知运维们</p><p>​                                                         目前以博主的能力，就只能想出这种方案</p><p>​                                                                          2018年9月份</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAMBA服务的简单应用，Linux对Linux文件共享</title>
      <link href="/2018/09/21/linux-fu-wu/samba-fu-wu-de-jian-dan-ying-yong-linux-dui-linux-wen-jian-gong-xiang/"/>
      <url>/2018/09/21/linux-fu-wu/samba-fu-wu-de-jian-dan-ying-yong-linux-dui-linux-wen-jian-gong-xiang/</url>
      
        <content type="html"><![CDATA[<p>本章的samba服务是由yum源安装的</p><p>环境：centos7.4</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>yum install samba</p><h4 id="创建samba用户"><a href="#创建samba用户" class="headerlink" title="创建samba用户"></a>创建samba用户</h4><p>samba用户是以系统中的用户的基础在增加，所以想要创建samba用户，就要先有一个系统用户。</p><p><strong>添加系统用户</strong></p><p>useradd samba</p><p>passwd samba</p><p><strong>添加或删除samba用户</strong></p><p>smbpasswd -a samba  #会让你创建samba用户的密码，是用于samba服务中使用的密码,可以与原始密码相同,也可以不同。</p><p>pdbedit -L  #查看samba用户列表</p><p>smbpasswd -x samba  #删除现有的samba用户</p><h4 id="修改samba配置文件"><a href="#修改samba配置文件" class="headerlink" title="修改samba配置文件"></a>修改samba配置文件</h4><p>vim /etc/samba/smb.conf</p><p>进去后，我们在最后添加我们要共享的目录的配置信息</p><p>[ share ]   #连接的共享名</p><p>​      comment=user_mode   #描述，无用的，可以随便写</p><p>​      path=/var/film        #要共享的目录路径</p><p>​      public=yes           #是否公开共享</p><p>​      writable = yes         #是否开启写入权限</p><p>保存退出</p><p>service smb restart   #重启smb服务器</p><p>注意：目录路径的目录要有samba用户的权限，最好是要samba对应的家目录里，不然就把要共享的目录的属主给samba用户</p><p>目前在主端就设置好了</p><h4 id="进去另一台linux服务器：挂载"><a href="#进去另一台linux服务器：挂载" class="headerlink" title="进去另一台linux服务器：挂载"></a>进去另一台linux服务器：挂载</h4><p>yum -y install samba</p><p>yum -y install cifs-utils</p><p>注意：这二个软件包必须安装，不然挂载出错</p><h4 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h4><p>mount -t cifs -o username=用户名 //主端的IP地址/share 挂载到本机的那个目录中</p><p>mount -t cifs -o username=samba //192.168.1.3/share /tmp/share</p><p>注意：在本机被挂载进去的目录要先创建出来</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>今天在我公司中搭建一个samba服务，用于二台linux进入文件传输。</p><p>在挂载的时候，发现挂载出现异常情况，无法说明。</p><p>解决方案：更新yum源，就好了</p><p>在出现挂载的时候，出现目录没权限访问，</p><p>解决方案：检查了主端的权限是通的，在来从端中检查，发现目录的权限跟属主之类的都出现？号“d????????? ? ?  ?    ?      ?”，试着去删除该目录，发现用 rm -rf 也无法删除，最终使用mount命令查看了当前的挂载点，发现有一个挂载点失效，但是挂载的目录就是我要挂载的目录，就用umount -a 取消挂载点，重新挂载，问题解决</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim命令</title>
      <link href="/2018/09/20/linux-ming-ling/linux-vim-ming-ling/"/>
      <url>/2018/09/20/linux-ming-ling/linux-vim-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>h （左移） j （下移） k （上移） l （右移）</p><p>x （删除光标当前所在的位置的字符）</p><p>y ：复制选中的字条</p><p>yy ：复制整行 （2yy：复制当前行跟下一行）</p><p>p ：粘贴</p><p>i （光标前插入文本）</p><p>a （光标后插入文本）</p><p>o （光标向下一行插入新一行并进行编辑模式）</p><p>de / d$ (从光标当前位置到行尾删除)</p><p>dd (删除当前行) （2dd：删除当前行跟下一行） （3dd：删除当前行加下二行）</p><p>u ：撤销最后执行的命令</p><p>Ctrl+R ：撤销，撤销命令的操作命令</p><p>/ ：查找命令 （按N键可相反方向查找）</p><p>？ ：查找命令（逆向查找）</p><p>:s/old/new/g （把old替换成new 在当前行中）</p><p>:#,#s/old/new/g （把old替换成new #,#代表的是两行的行号）</p><p>:%s/old/new/g （把old替换成new 全文本）</p><p>:! ：可以执行外部命令</p><p>:w ：可以把当前文件保存到另一个文件中</p><p>:files ##查看当前一共打开了几个文件</p>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liunx--centos7--JDK8安装</title>
      <link href="/2018/09/20/linux/liunx-centos7-jdk8-an-zhuang/"/>
      <url>/2018/09/20/linux/liunx-centos7-jdk8-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>从官方网上下载JDK8：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz" target="_blank" rel="noopener">http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz</a></p><ul><li>解压并存放到指定目录中</li></ul><p>​     tar -zxf jdk-8u181-linux-x64.tar.gz</p><p>​     mv jdk1.8.0_181/ /usr/local/jdk</p><ul><li>配置JDK的系统环境</li></ul><p>​     vim /etc/profile</p><hr><p>​     #JDK<br>​     JAVA_HOME=/usr/local/jdk<br>​     CLASSPATH=$JAVA_HOME/lib/<br>​     PATH=$PATH:$JAVA_HOME/bin<br>​     export PATH JAVA_HOME CLASSPATH</p><hr><p>​     source /etc/profile</p><ul><li>测试JDK8是否配置成功</li></ul><p>​     java -version</p><p>​     成功信息：</p><p>​      java version “1.8.0_181”<br>​      Java(TM) SE Runtime Environment (build 1.8.0_181-b13)<br>​      Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</p><h3 id="修改linux-中的JDK版本"><a href="#修改linux-中的JDK版本" class="headerlink" title="修改linux 中的JDK版本"></a>修改linux 中的JDK版本</h3><p>删除jdk文件</p><p>rm -f /usr/bin/java </p><p>rm -f /usr/bin/javac</p><p>rm -f /etc/alternatives/java</p><p>rm -f /etc/alternatives/javac</p><p>在添加/etc/profile中的JDK信息，就可以更改Linux系统自带的老版本JDK</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7--mavem3.5安装</title>
      <link href="/2018/09/20/linux/centos7-mavem3.5-an-zhuang/"/>
      <url>/2018/09/20/linux/centos7-mavem3.5-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>从官方网上下载mavem3.5：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz" target="_blank" rel="noopener">http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</a></p><p>解压并存放在指定目录中</p><p>   tar -zxf apache-maven-3.5.3-bin.tar.gz</p><p>   mv apache-maven-3.5.3 /usr/local/maven</p><p>配置mavem的系统环境</p><p>   vim /etc/profile</p><hr><p>   ##MAVEN<br>   export M2_HOME=/usr/local/maven<br>   export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$M2_HOME/bin:$PATH</p><hr><p>   source /etc/profile</p><p>测试mavem是否配置成功</p><p>   mvn -v</p><p>   成功信息如下</p><p>​      Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>​      Maven home: /usr/local/maven</p><p>如果有安装JDK跟mavem的</p><p>   使用mvn -v 就会跟JDK的系统配置信息一起出现。如下</p><p>​      Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>​      Maven home: /usr/local/maven<br>​      Java version: 1.8.0_181, vendor: Oracle Corporation<br>​      Java home: /usr/local/jdk/jre<br>​      Default locale: en_US, platform encoding: UTF-8<br>​      OS name: “linux”, version: “3.10.0-693.el7.x86_64”, arch: “amd64”, family: “unix”</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-admin，部署Dubbo后台管理</title>
      <link href="/2018/09/20/dubbo/dubbo-admin-bu-shu-dubbo-hou-tai-guan-li/"/>
      <url>/2018/09/20/dubbo/dubbo-admin-bu-shu-dubbo-hou-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<p>部署Dubbo后台管理需要三个软件，JDK,mavem,tomcat，安装这三个软件，可以参考我之前写的笔记</p><p>三个软件部署好后，我们就需要下载Dubbo-admin项目：<a href="https://github.com/apache/incubator-dubbo/tree/2.5.x" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/tree/2.5.x</a></p><p><a href="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/85623ebb2f4449b388aaad2f795649bc.png" alt="img"></a></p><p>注意：Dubbo-admin有一个坑，要注意，下载项目的时候要全部下载，不要单独下载一个项目。因为在用mvn编译的时候，不能在单个项目中编译，只能在所有项目中一起编译才会成功</p><p> 为了方便我提供了下载链接，可以直接在linux中下载：wget <a href="https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x" target="_blank" rel="noopener">https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x</a></p><h4 id="解压并编译"><a href="#解压并编译" class="headerlink" title="解压并编译"></a>解压并编译</h4><p>unzip incubator-dubbo-2.5.x.zip</p><p>cd incubator-dubbo-2.5.x</p><p>mvn install -Dmaven.test.skip=true</p><p>请稍等，估计要十多分钟</p><h4 id="找到-war文件并复制到tomcat中的webapps目录中"><a href="#找到-war文件并复制到tomcat中的webapps目录中" class="headerlink" title="找到.war文件并复制到tomcat中的webapps目录中"></a>找到.war文件并复制到tomcat中的webapps目录中</h4><p>.war文件：dubbo-admin-2.8.4.war（有可能不同版本的名称不一样）</p><p>cp -a dubbo-admin/target/dubbo-admin-2.8.4.war /usr/local/tomcat/webapps/</p><p>进入tomcat中重启服务，让我们复制过去的.war文件解压运行</p><h4 id="修改dubbo-properties配置文件"><a href="#修改dubbo-properties配置文件" class="headerlink" title="修改dubbo.properties配置文件"></a>修改dubbo.properties配置文件</h4><p>进入tomcat中的webapps目录中，找到解压好的dubbo-admin目录，进去，找到dubbo.properties文件</p><p>vim dubbo.properties</p><p>修改第一行的IP地址，dubbo.registry.address=127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</p><p>如果有安装过zookeeper，那就在dubbo.registry.address=中填写zookeeper的IP地址以及端口号</p><p>第二行跟第三行是用户配置信息</p><p>打开浏览器输入地址: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://IP地址/域名:8080/dubbo-admin</a></p><p>用户就在dubbo.properties文件中的第二第三行中。</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>这是我在我公司真实环境中遇到的一个坑</p><p>我想修改一下dubbo-admin的root登录密码跟禁用guest用户</p><p>发现，如果没有guest用户，无论你怎么重启tomcat，访问管理后台会发现找不到网页</p><p>还有一个想法，就是把dubbo-admin中的guest用户改一下名字，测试一下可不可以访问，发现还是不可以。</p><p>总结出现，dubbo-admin中的这二个用户可能都是必须存在的，要是不存在，系统就报错</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-monitor，部署Dubbo监控平台monitor</title>
      <link href="/2018/09/20/dubbo/dubbo-monitor-bu-shu-dubbo-jian-kong-ping-tai-monitor/"/>
      <url>/2018/09/20/dubbo/dubbo-monitor-bu-shu-dubbo-jian-kong-ping-tai-monitor/</url>
      
        <content type="html"><![CDATA[<p>部署Dubbo后台管理需要三个软件，JDK,mavem,tomcat，安装这三个软件，可以参考我之前写的笔记</p><p>三个软件部署好后，我们就需要下载Dubbo-admin项目：<a href="https://github.com/apache/incubator-dubbo/tree/2.5.x" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/tree/2.5.x</a></p><p><a href="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" target="_blank" rel="noopener"><img src="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" alt="img"></a></p><p>注意：Dubbo-admin有一个坑，要注意，下载项目的时候要全部下载，不要单独下载一个项目。因为在用mvn编译的时候，不能在单个项目中编译，只能在所有项目中一起编译才会成功</p><p> 为了方便我提供了下载链接，可以直接在linux中下载：wget <a href="https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x" target="_blank" rel="noopener">https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x</a></p><h4 id="解压并编译"><a href="#解压并编译" class="headerlink" title="解压并编译"></a>解压并编译</h4><p>unzip incubator-dubbo-2.5.x.zip</p><p>cd incubator-dubbo-2.5.x</p><p>mvn install -Dmaven.test.skip=true</p><p>请稍等，估计要十多分钟</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>cd dubbo-simple/dubbo-monitor-simple/target/</p><p>tar -zxf dubbo-monitor-simple-2.8.4-assembly.tar.gz</p><p>可以把解压出来的项目目录放在你习惯放的位置上，博主就习惯放在/usr/local/下</p><p>mv dubbo-monitor-simple-2.8.4 /usr/local/monitor</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>cd /usr/local/monitor/conf/</p><p>vim dubbo.properties</p><p><a href="http://92.linux91.cn/attachment/20180920/37d5b7603aee446f8e22921fda6e2795.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/37d5b7603aee446f8e22921fda6e2795.png" alt="img"></a></p><p>在图中，dubbo.registry.address=的配置中，博主只有zookeeper，所有除了zookeeper，其它的都注释掉</p><p>如果有多少zookeeper，想配置集群，可以用”,”符号要隔开</p><p>在注意端口，不能和系统中其它端口相同发生冲突，配置前最好先查看一下，在修改</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>cd /usr/local/monitor/bin/</p><p>restart.sh  #重启</p><p>start.sh    #启动</p><p>stop.sh    #停止</p><p>./start.sh</p><p>这样就启动了</p><p>打开浏览器输入地址: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://IP地址/域名:1288/i</a>ndex.html</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx问题合集</title>
      <link href="/2018/09/20/nginx/nginx-wen-ti-he-ji/"/>
      <url>/2018/09/20/nginx/nginx-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题"><a href="#nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题" class="headerlink" title="nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题"></a>nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题</h2><p>使用nginx代理时，发现代理过去的显示找不到文件</p><p>解决方案：</p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token keyword">location</span> <span class="token operator">/</span>monitor <span class="token punctuation">{</span>       <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.81</span><span class="token punctuation">:</span><span class="token number">1288</span><span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这下好了，是找到了首页文件，但是其它的文件并没有代理过来。</p><p>想了好久，发现了问题的点，就在我们设置好的路径中没有明确标明目录下的所有文件。</p><p>不知道怎么解释清楚，直接写解决方案</p><p>解决方案：</p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token keyword">location</span> <span class="token operator">/</span>monitor<span class="token operator">/</span> <span class="token punctuation">{</span>       <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.81</span><span class="token punctuation">:</span><span class="token number">1288</span><span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在我们设置好的路径后在要加 / 加完你会发现，很神奇的又找得到了</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下的tomcat8启动很慢现象处理</title>
      <link href="/2018/09/20/tomcat/linux-xia-de-tomcat8-qi-dong-hen-man-xian-xiang-chu-li/"/>
      <url>/2018/09/20/tomcat/linux-xia-de-tomcat8-qi-dong-hen-man-xian-xiang-chu-li/</url>
      
        <content type="html"><![CDATA[<p>关于tomcat容器为什么运行很慢，本人查了下百度，发现百度上的学法很多，本人比较倾向一种学法，由于SHA1PRNG算法造成的，</p><p>SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。</p><ul><li>如果Java.security.egd属性或securerandom.source属性指定的是”file:/dev/random”或”file:/dev/urandom”，那么JVM会使用本地种子产生器NativeSeedGenerator，它会调用super()方法，即调用SeedGenerator.URLSeedGenerator(/dev/random)方法进行初始化。  </li><li>如果java.security.egd属性或securerandom.source属性指定的是其它已存在的URL，那么会调用SeedGenerator.URLSeedGenerator(url)方法进行初始化。</li></ul><p>本人对这个算法也没什么研究</p><p>今天对公司的服务器搭建并测试tomcat，就发现出现这问题，下面发布在真实环境下怎么处理</p><ul><li>修改tomcat中的bin目录中的catalina.sh文件</li></ul><p><a href="http://92.linux91.cn/attachment/20180919/405e42d0d0a0434ab2b6795f0203a2e7.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/405e42d0d0a0434ab2b6795f0203a2e7.png" alt="img"></a></p><p>找到图上的配置行，增加：-Djava.security.egd=file:/dev/./urandom</p><pre class="line-numbers language-java"><code class="language-java">JAVA_OPTS<span class="token operator">=</span><span class="token string">"$JAVA_OPTS -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Djava.security.egd=file:/dev/./urandom"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样子重启tomcat容器后，就不会出现启动慢的现象</p>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7--tomcat8简单安装</title>
      <link href="/2018/09/20/tomcat/centos7-tomcat8-jian-dan-an-zhuang/"/>
      <url>/2018/09/20/tomcat/centos7-tomcat8-jian-dan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="tomcat8"><a href="#tomcat8" class="headerlink" title="tomcat8"></a><strong>tomcat8</strong></h3><p>从官方网上下载tomcat8：<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-80.cgi</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz</a></p><h3 id="解压并放入指定的目录中"><a href="#解压并放入指定的目录中" class="headerlink" title="解压并放入指定的目录中"></a><strong>解压并放入指定的目录中</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">tar -zxf apache-tomcat-8.0.53.tar.gzmv apache-tomcat-8.0.53 /usr/local/tomcat/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如有.war包，可以直接放进tomcat目录中的webapps目录里，因为tomcat启动会自动解压webapps目录中的.war文件，并会进行加载</p><h3 id="启动跟停止"><a href="#启动跟停止" class="headerlink" title="启动跟停止"></a><strong>启动跟停止</strong></h3><p>在tomcat目录下的bin目录中</p><pre class="line-numbers language-shell"><code class="language-shell">   ./startup.sh     #启动   ./shutdown.sh   #停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改tomcat支持的JDK配置"><a href="#修改tomcat支持的JDK配置" class="headerlink" title="修改tomcat支持的JDK配置"></a><strong>修改tomcat支持的JDK配置</strong></h3><p>tomcat支持的JDK配置是系统默认的JDK，按各自情况决定是否要修改</p><p>修改tomcat中的bin目录下的catalina.sh跟setclasspath.sh</p><p>在两个文件的开头的空白地方添加以下的配置</p><pre class="line-numbers language-java"><code class="language-java">export JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk<span class="token operator">/</span>export JRE_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk<span class="token operator">/</span>jreexport CLASSPATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>export PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>在tomcat目录下的webapps目录中有一个ROOT目录，这个目录最好不要删除，因为有特殊的权限，如果你删除重新创建，那也是没用的</p><p>要是你想让tomcat默认到你的项目中，那你就把ROOT目录下的所有东西给清了，在把你的项目移动在ROOT目录中 </p><p>最好不要删除ROOT目录！！！</p><p>最好不要删除ROOT目录！！！</p><p>最好不要删除ROOT目录！！！</p><p>重要的话说三遍</p>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux--centos7--yum网络源</title>
      <link href="/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/"/>
      <url>/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/</url>
      
        <content type="html"><![CDATA[<p>今天我选择的yum源是网易的</p><p>网易（163）yum源是国内最好的yum源之一 ，无论是速度还是软件版本，都非常的不错，将yum源设置为163yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到</p><h4 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h4><ul><li>进入系统中存储yum源的目录</li></ul><p>​       cd /etc/yum.repos.d/</p><ul><li>备份系统自带的yum源</li></ul><p>​       mv CentOS-Base.repo CentOS-Base.repo.J</p><ul><li>下载网易yum源</li></ul><p>​       wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><ul><li>将下载的yum源文件改成系统自带yum源文件的名字</li></ul><p>​        mv CentOS7-Base-163.repo CentOS-Base.repo</p><ul><li>创建元数据缓存</li></ul><p>​        yum makecache</p><ul><li>更新系统yum源  </li></ul><p>​        yum -y update</p><h4 id="温馨提醒："><a href="#温馨提醒：" class="headerlink" title="温馨提醒："></a>温馨提醒：</h4><p>​    除了网易yum源中国国内还有其它很不错的yum源</p><p>​    中科大的yum源：</p><p>​       wget <a href="http://centos.ustc.edu.cn/CentOS-Base.repo" target="_blank" rel="noopener">http://centos.ustc.edu.cn/CentOS-Base.repo</a></p><p>​    sohu的yum源</p><p>​       wget <a href="http://mirrors.sohu.com/help/CentOS-Base-sohu.repo" target="_blank" rel="noopener">http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</a></p><p>​    阿里云的yum源</p><p>​        wget <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-centos7-Python3.6源码安装</title>
      <link href="/2018/09/19/python/linux-centos7-python3.6-yuan-ma-an-zhuang/"/>
      <url>/2018/09/19/python/linux-centos7-python3.6-yuan-ma-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>环境：centos7.4</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>设置网络YUN源</p><p>可以查看之前的笔记，有记录怎么更改网络yum源</p><p><a href="https://www.linux91.cn/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/">https://www.linux91.cn/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/</a></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>安装python3.6所需要的依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>把准备好的源码包放入系统并解压进入</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zxf Python-3.6.1.tgzcd Python-3.6.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>安装python6.3</p><pre class="line-numbers language-shell"><code class="language-shell">./configure --prefix=/usr/local/makemake altinstallcd/usr/binln -s /usr/local/bin/python3.6 /usr/bin/python3.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>python3.6程序的执行文件：/usr/local/bin/python3.6</li><li>python3.6应用程序目录：/usr/local/lib/python3.6</li><li>pip3的执行文件：/usr/local/bin/pip3.6</li><li>pyenv3的执行文件：/usr/local/bin/pyenv-3.6</li></ol><p>到这一步python3.6就大概算是安装完成了，</p><p>在linux 字符界面上输入python3.6，就可以进入python3.6的操作界面</p><p>因centos7.4系统自带的是python2.7，所以要想进入就要输入python3.6，不可以直接输入python就进入，因为直接输入python进入的就是进入python自带的2.7的操作界面</p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>系统中自带的python版本是2.7，将python3.6取代python2.7</p><p>mv /usr/bin/python /usr/bin/python.bak</p><p>ln -s /usr/local/bin/python3 /usr/bin/python</p><p>vim /usr/bin/yum</p><p>将开头的#!/usr/bin/python改成#!/usr/bin/python2.7</p><p>vim /usr/libexec/urlgrabber-ext-down</p><p>将开头的#! /usr/bin/python改成#! /usr/bin/python2.7</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
