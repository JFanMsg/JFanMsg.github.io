<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>prometheus-基于http_sd_configs的服务发现</title>
      <link href="/2021/12/09/prometheus/prometheus-ji-yu-http-sd-configs-de-fu-wu-fa-xian/"/>
      <url>/2021/12/09/prometheus/prometheus-ji-yu-http-sd-configs-de-fu-wu-fa-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>暂时不考虑写prometheus的搭建章（单机搭建太简单了。。。），后续可能会考虑写prometheus的集群、prometheus的外部存储等文章</p><p>这文章需要一定的GO基础，如果只是直接尝试使用，无所谓</p><p><strong>这文章只是测试而已，真实使用还需要根据实际环境修改使用</strong></p><h2 id="Prometheus-服务发现机制概述"><a href="#Prometheus-服务发现机制概述" class="headerlink" title="Prometheus 服务发现机制概述"></a>Prometheus 服务发现机制概述</h2><p>Prometheus数据源的配置主要分为静态配置和动态发现, 常用的为以下几类:</p><ol><li>static_configs: #静态服务发现</li><li>file_sd_configs: #文件服务发现</li><li>dns_sd_configs: #DNS 服务发现</li><li>kubernetes_sd_configs: #Kubernetes 服务发现</li><li>consul_sd_configs: #Consul 服务发现</li><li>http_sd_configs: #自建API 服务发现</li></ol><h2 id="http-sd-configs实验"><a href="#http-sd-configs实验" class="headerlink" title="http_sd_configs实验"></a>http_sd_configs实验</h2><p>竟然是服务自动发现，那么就不能有手动写入的情况发生</p><p>官方相关文档：</p><pre><code>1. https://prometheus.io/docs/prometheus/latest/configuration/configuration/#http_sd_config 2. https://prometheus.io/docs/prometheus/latest/http_sd/#comparison-between-file-based-sd-and-http-sd</code></pre><p><strong>流程：</strong></p><pre><code>  1. Prometheus-server配置加上http_sd_configs配置  2. node_exporter添加一个获取IP、主机名、机器唯一ID发给节点API的功能  3. 节点API有二个接口        1. 一个接收node_exporter启动发过来的数据        2. 一个等待Prometheus来调用获取节点数据列表</code></pre><p><strong>数据格式</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"targets"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"&lt;host>"</span><span class="token punctuation">,</span> ... <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"labels"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"&lt;labelname>"</span><span class="token operator">:</span> <span class="token string">"&lt;labelvalue>"</span><span class="token punctuation">,</span> ...    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  ...<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程1</strong></p><p>在Prometheus-server添加http_sd_configs配置</p><pre class="line-numbers language-shell"><code class="language-shell">scrape_configs  - job_name: httpsd    http_sd_configs:      - url: "http://127.0.0.1:8080/authentication"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程二</strong></p><p>在node_exporter主代码文件中添加</p><pre class="line-numbers language-go"><code class="language-go"><span class="token comment" spellcheck="true">// 以下是自定义功能</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ip<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">GetIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token function">authenticationhttp</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 发送http验证信息</span><span class="token keyword">func</span> <span class="token function">authenticationhttp</span><span class="token punctuation">(</span>ip <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取主机名</span>    hostname<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Hostname</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    authenticationtextr <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"ip"</span><span class="token punctuation">:</span> ip<span class="token punctuation">,</span> <span class="token string">"hostname"</span><span class="token punctuation">:</span>hostname<span class="token punctuation">}</span>    j<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>authenticationtextr<span class="token punctuation">)</span>    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Post</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:8080/authentication"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    body<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取内网IP</span><span class="token keyword">func</span> <span class="token function">GetIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    addr<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">InterfaceAddrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"获取IP失败"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> address <span class="token operator">:=</span> <span class="token keyword">range</span> addr <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 检查ip地址判断是否回环地址</span>        <span class="token keyword">if</span> ipnet<span class="token punctuation">,</span> ok <span class="token operator">:=</span> address<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>net<span class="token punctuation">.</span>IPNet<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>ipnet<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">IsLoopback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> ipnet<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">To4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> ipnet<span class="token punctuation">.</span>IP<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"获取IP失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 以上是自定义功能</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>流程三</strong></p><p>API脚本</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> authentication <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Ip <span class="token builtin">string</span> <span class="token string">`json:"ip"`</span>    Hostname <span class="token builtin">string</span> <span class="token string">`json:"hostname"`</span><span class="token punctuation">}</span><span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 因为测试没有用持久化存储，所以暂时使用脚本内部缓存存储</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/authentication"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        authenticationr <span class="token operator">:=</span> authentication<span class="token punctuation">{</span><span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">BindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>authenticationr<span class="token punctuation">)</span>        da <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>            <span class="token string">"targets"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%v:9100"</span><span class="token punctuation">,</span> authenticationr<span class="token punctuation">.</span>Ip<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"labels"</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>                <span class="token string">"hostname"</span><span class="token punctuation">:</span> authenticationr<span class="token punctuation">.</span>Hostname<span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>        data <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> da<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"pong"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/authentication"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 监听并在 0.0.0.0:8080 上启动服务</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong></p><ol><li>使用http_sd_configs有一定的风险，因为数据都是存在API方的</li><li>可以把思路转换一下，可以用file_sd_configs的方式，只需要将API改动一下，每次获取到机器信息，就进行写入指定文件，那么file_sd_configs检测到文件发生变化，就会重新加载文件</li><li>http_sd_configs如果读取失败，会使用上一次完成获取到的API结果，所以需要对结果进行持久化存储不建议文件</li></ol><p>博主的想法是，将节点API归于OPS平台的一个API，如果有多云的情况下，那么每个云中每个区域，单独放一个节点API，用于Prometheus的调用，以及Prometheus之node节点的上报，后续还会深度学习Prometheus，重点在于node，因为想把node二开成平台的node</p>]]></content>
      
      
      <categories>
          
          <category> prometheus </category>
          
      </categories>
      
      
        <tags>
            
            <tag> prometheus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitlab的不中断业务升级</title>
      <link href="/2021/10/14/gitlab/gitlab-de-bu-zhong-duan-ye-wu-sheng-ji/"/>
      <url>/2021/10/14/gitlab/gitlab-de-bu-zhong-duan-ye-wu-sheng-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>今早一个需求就扔到我头上，差点爆炸</p><p>gitlab升级要求不停业务，就代表升级过程中，开发还是可以提交代码，拉取代码。。。。。。</p><p>虽然想吐槽一下，不过吃人家饭，需求要硬也得搞，方法总比问题多嘛</p><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>怎么实现业务不中断，突然想到了gitlab的副本，可以按副本的思想，进行不中断业务升级</p><p>这里，我使用的是docker安装方式，所以方案会偏向docker方向的gitlab升级，不过思想是一样的</p><p>简单说：</p><pre><code>1. 将代码存储目录共享，git-data 2. 注意其他目录不要共享，以免导致资源冲突以及升级后资源不适用 3. 开启备用容器记得将端口进行改动 4. nginx切换就行了，这样业务的操作就会转到备用gitlab中</code></pre><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>直接修改共享卷路径，不过要先复制原共享卷中的数</p><pre class="line-numbers language-shell"><code class="language-shell">      volumes:        - /sdata/etc/gitlabs:/etc/gitlab # 无需改动        - /sdata/data/gitlabs:/var/opt/gitlab # 需要老/sdata/data/gitlab/git-data，通过软链接的方式，放在新的/sdata/data/gitlabs目录下，代码存储目录共享        - /sdata/var/log/gitlabs:/var/log/gitlab # 无需改动        - /sdata/data/gitlab/git-data:/sdata/data/gitlab/git-data # 因为是通过软链接的方式，开启容器后，也需要/sdata/data/gitlab/git-data目录存在<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改端口</p><p>启动容器</p><p>切换nginx</p><p>对gitlab进行升级</p><p>升级完毕后，nginx切回</p><p>备用gitlab回收</p>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsyslog日志传输不完整</title>
      <link href="/2021/10/08/linux-fu-wu/rsyslog-ri-zhi-chuan-shu-bu-wan-zheng/"/>
      <url>/2021/10/08/linux-fu-wu/rsyslog-ri-zhi-chuan-shu-bu-wan-zheng/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>国庆期间，我老大反馈说日志服务器收集的日志不完整，我吓得马上去看，日志嘛很重要，发现出现不完整的日志都是数据量过大，还是nginx日志</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>为了验证是nginx的问题还是rsyslog的问题，我通过nginx重新定义一份日志写本地，接下来静静的等，等长日志出现</p><p>不出意外，竟然是rsyslog的问题</p><p>我第一直觉告诉我，是rsyslog传输的日志大小问题</p><p>我马上上网查了一下，还真对了，不过关于这类问题的博文还是太少了</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>rsyslog默认的单条日志传输大小为(2k/4k)，网上的有人说是2k，有人说是4k，有可能是版本问题</p><p>那么这算什么问题，直接加大，给个128k（开玩笑，还是得按公司实际业务来给，在这里我就直接写128k了，看到这括号内容的大佬们可以假装没看到）</p><p>rsyslog控制单条日志传输大小是用：<code>$MaxMessageSize</code>参数</p><p>那么就简单了</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/rsyslog.conf$MaxMessageSize 128k  #直接干<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意哦：</strong></p><ol><li><strong>参数最好写在</strong>：<code>#### GLOBAL DIRECTIVES ####</code><strong>下面</strong></li><li><strong>服务端以及客户端都得加，需要重启！！！</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose安装的gitlab升级</title>
      <link href="/2021/09/27/gitlab/docker-compose-an-zhuang-de-gitlab-sheng-ji/"/>
      <url>/2021/09/27/gitlab/docker-compose-an-zhuang-de-gitlab-sheng-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="升级路线图"><a href="#升级路线图" class="headerlink" title="升级路线图"></a>升级路线图</h1><p>我安装的是12版本，要升级到14版本</p><p>官方路径图：<a href="https://docs.gitlab.com/ee/update/index.html#upgrade-paths" target="_blank" rel="noopener">https://docs.gitlab.com/ee/update/index.html#upgrade-paths</a></p><p><code>8.11.Z</code>-&gt; <code>8.12.0</code>-&gt; <code>8.17.7</code>-&gt; <code>9.5.10</code>-&gt; <code>10.8.7</code>-&gt; <a href="https://docs.gitlab.com/ee/update/index.html#1200" target="_blank" rel="noopener"><code>11.11.8</code></a>-&gt; <code>12.0.12</code>-&gt; <a href="https://docs.gitlab.com/ee/update/index.html#1210" target="_blank" rel="noopener"><code>12.1.17</code></a>-&gt; <code>12.10.14</code>-&gt; <code>13.0.14</code>-&gt; <a href="https://docs.gitlab.com/ee/update/index.html#1310" target="_blank" rel="noopener"><code>13.1.11</code></a>-&gt; <a href="https://docs.gitlab.com/ee/update/index.html#1388" target="_blank" rel="noopener"><code>13.8.8</code></a>-&gt;<a href="https://about.gitlab.com/releases/categories/releases/" target="_blank" rel="noopener">最新<code>13.12.Z</code></a>-&gt;<a href="https://docs.gitlab.com/ee/update/index.html#1400" target="_blank" rel="noopener">最新<code>14.0.Z</code></a>-&gt;<a href="https://about.gitlab.com/releases/categories/releases/" target="_blank" rel="noopener">最新<code>14.Y.Z</code></a></p><table><thead><tr><th align="left">目标版本</th><th align="left">你的版本</th><th align="left">支持的升级路径</th><th align="left">笔记</th></tr></thead><tbody><tr><td align="left"><code>14.1.2</code></td><td align="left"><code>13.9.2</code></td><td align="left"><code>13.9.2</code>-&gt; <code>13.12.9</code>-&gt; <code>14.0.7</code>-&gt;<code>14.1.2</code></td><td align="left">需要两个中间版本：<code>13.12</code>和<code>14.0</code>，然后<code>14.1</code>。</td></tr><tr><td align="left"><code>13.12.10</code></td><td align="left"><code>12.9.2</code></td><td align="left"><code>12.9.2</code>-&gt; <code>12.10.14</code>-&gt; <code>13.0.14</code>-&gt; <code>13.1.11</code>-&gt; <code>13.8.8</code>-&gt;<code>13.12.10</code></td><td align="left">需要四个中间版本：<code>12.10</code>、<code>13.0</code>、<code>13.1</code>和<code>13.8.8</code>，然后<code>13.12.10</code>。</td></tr><tr><td align="left"><code>13.2.10</code></td><td align="left"><code>11.5.0</code></td><td align="left"><code>11.5.0</code>-&gt; <code>11.11.8</code>-&gt; <code>12.0.12</code>-&gt; <code>12.1.17</code>-&gt; <code>12.10.14</code>-&gt; <code>13.0.14</code>-&gt; <code>13.1.11</code>-&gt;<code>13.2.10</code></td><td align="left">需要六个中间版本：<code>11.11</code>、<code>12.0</code>、<code>12.1</code>、<code>12.10</code>、<code>13.0</code>和<code>13.1</code>，然后<code>13.2.10</code>。</td></tr><tr><td align="left"><code>12.10.14</code></td><td align="left"><code>11.3.4</code></td><td align="left"><code>11.3.4</code>-&gt; <code>11.11.8</code>-&gt; <code>12.0.12</code>-&gt; <code>12.1.17</code>-&gt;<code>12.10.14</code></td><td align="left">需要三个中间版本：<code>11.11</code>,<code>12.0</code>和<code>12.1</code>, 然后<code>12.10.14</code>。</td></tr><tr><td align="left"><code>12.9.5</code></td><td align="left"><code>10.4.5</code></td><td align="left"><code>10.4.5</code>-&gt; <code>10.8.7</code>-&gt; <code>11.11.8</code>-&gt; <code>12.0.12</code>-&gt; <code>12.1.17</code>-&gt;<code>12.9.5</code></td><td align="left">需要四个中间版本：<code>10.8</code>、<code>11.11</code>、<code>12.0</code>和<code>12.1</code>，然后<code>12.9.5</code>。</td></tr><tr><td align="left"><code>12.2.5</code></td><td align="left"><code>9.2.6</code></td><td align="left"><code>9.2.6</code>-&gt; <code>9.5.10</code>-&gt; <code>10.8.7</code>-&gt; <code>11.11.8</code>-&gt; <code>12.0.12</code>-&gt; <code>12.1.17</code>-&gt;<code>12.2.5</code></td><td align="left">需要五个中间版本：<code>9.5</code>、<code>10.8</code>、<code>11.11</code>、<code>12.0</code>、<code>12.1</code>、 然后<code>12.2.5</code>。</td></tr><tr><td align="left"><code>11.3.4</code></td><td align="left"><code>8.13.4</code></td><td align="left"><code>8.13.4</code>-&gt; <code>8.17.7</code>-&gt; <code>9.5.10</code>-&gt; <code>10.8.7</code>-&gt;<code>11.3.4</code></td><td align="left"><code>8.17.7</code>是第 8 版的最后一个版本，<code>9.5.10</code>是第 9 版的最后一个版本，<code>10.8.7</code>是第 10 版的最后一个版本。</td></tr></tbody></table><h1 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h1><p>我的版本为12.3.5，安装升级路线来看看，我要先升级到12.10.14</p><p><strong>编辑docker-compose.yml</strong></p><pre class="line-numbers language-shell"><code class="language-shell">services:    gitlab:      image: 'gitlab/gitlab-ce:12.10.14-ce.0'      restart: unless-stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>升级</strong></p><pre class="line-numbers language-go"><code class="language-go">docker<span class="token operator">-</span>compose pulldocker<span class="token operator">-</span>compose up <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>同理</strong></p><p>我升级到了12.10.14，接着要升级到13.0.14</p><p><strong>编辑docker-compose.yml</strong></p><pre class="line-numbers language-shell"><code class="language-shell">services:    gitlab:      image: 'gitlab/gitlab-ce:13.0.14-ce.0'      restart: unless-stopped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>升级</strong></p><pre class="line-numbers language-go"><code class="language-go">docker<span class="token operator">-</span>compose pulldocker<span class="token operator">-</span>compose up <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>就是这么升级下去的。。。。。。</strong></p>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose安装gitlab</title>
      <link href="/2021/09/15/gitlab/docker-compose-an-zhuang-gitlab/"/>
      <url>/2021/09/15/gitlab/docker-compose-an-zhuang-gitlab/</url>
      
        <content type="html"><![CDATA[<h2 id="创建相关目录"><a href="#创建相关目录" class="headerlink" title="创建相关目录"></a>创建相关目录</h2><pre class="line-numbers language-shell"><code class="language-shell">mkdir -p /data/docker-app/gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="编写docker-compose-yml"><a href="#编写docker-compose-yml" class="headerlink" title="编写docker-compose.yml"></a>编写docker-compose.yml</h2><pre class="line-numbers language-shell"><code class="language-shell">cd /data/docker-app/gitlabvim docker-compose.yml version: '3'services:    gitlab:      image: 'gitlab/gitlab-ce:12.3.5-ce.0'      restart: unless-stopped      hostname: 'gitlab.linux91.cn' # 主机名      environment:        TZ: 'Asia/Shanghai'        GITLAB_OMNIBUS_CONFIG: |          external_url 'http://gitlab.linux91.cn' # 域名          gitlab_rails['time_zone'] = 'Asia/Shanghai'      deploy:        resources:          limits:            cpus: "1"            memory: 2G          reservations:            cpus: "0.5"            memory: 1G      ports:        - '8000:80'        - '8001:443'        - '8002:22'      volumes:        - /data/etc/gitlab:/etc/gitlab        - /data/data/gitlab:/var/opt/gitlab        - /data/var/log/gitlab:/var/log/gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动docker组"><a href="#启动docker组" class="headerlink" title="启动docker组"></a>启动docker组</h2><pre class="line-numbers language-shell"><code class="language-shell">docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看docker组"><a href="#查看docker组" class="headerlink" title="查看docker组"></a>查看docker组</h2><pre class="line-numbers language-shell"><code class="language-shell">docker-compose ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更改gitlab中文"><a href="#更改gitlab中文" class="headerlink" title="更改gitlab中文"></a>更改<em>gitlab</em>中文</h2><p>下载相应版本的中文包<br><a href="https://gitlab.com/xhang/gitlab" target="_blank" rel="noopener"><em>gitlab</em>中文社区</a></p><p>去掉cp -i alias</p><pre class="line-numbers language-shell"><code class="language-shell">unalias cp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>传输到<em>gitlab</em>容器里的目录</p><pre class="line-numbers language-shell"><code class="language-shell">docker cp zh/gitlab gitlab_gitlab_1:/opt/gitlab/embedded/service/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入容器里替换文件，重载和重启<em>gitlab</em></p><pre class="line-numbers language-shell"><code class="language-shell">docker exec -it gitlab_gitlab_1 /bin/bashcd /opt/gitlab/embedded/servicecp -rf gitlab/* gitlab-rails/gitlab-ctl reconfiguregitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php的composer占用内存不够导致失败</title>
      <link href="/2021/08/31/linux-fu-wu/php-de-composer-zhan-yong-nei-cun-bu-gou-dao-zhi-shi-bai/"/>
      <url>/2021/08/31/linux-fu-wu/php-de-composer-zhan-yong-nei-cun-bu-gou-dao-zhi-shi-bai/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>公司的测试环境突然composer失败，原因是内存不够编译失败</p><pre class="line-numbers language-shell"><code class="language-shell">PHP Fatal error: Allowed memory size of 2147483648 bytes exhausted (tried to allocate 4096 bytes) in phar:///usr/local/composer/composer.phar/src/Composer/DependencyResolver/RuleWatchGraph.php on line 52Fatal error: Allowed memory size of 2147483648 bytes exhausted (tried to allocate 4096 bytes) in phar:///usr/local/composer/composer.phar/src/Composer/DependencyResolver/RuleWatchGraph.php on line 52Check https://getcomposer.org/doc/articles/troubleshooting.md#memory-limit-errors for more info on how to handle out of memory errors.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>目前有二种解决思路</p><ol><li>采用Swap虚拟内存来增加内存，使用Swap确实是可以，但是还是时不时失败，那么这个解决思路放弃，想要尝试这个方式的小伙伴可以去我博客找Swap相关文章</li><li>采用php限制内存<ol><li>竟然系统不满足资源，那么我们就要让它限制到系统能给到的最大资源</li><li>限制php.ini的内存</li><li>使用composer加上资源限制</li></ol></li></ol><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p><strong>第一步：</strong></p><p>打开php.ini配置文件，找到memory_limit选项，按系统资源进行限制</p><pre class="line-numbers language-shell"><code class="language-shell">memory_limit = 1024M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第二步</strong></p><p>使用composer命令时，前面加上 COMPOSER_MEMORY_LIMIT=-1</p><pre class="line-numbers language-shell"><code class="language-shell">COMPOSER_MEMORY_LIMIT=-1 composer install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新建swap缓存内存分区没生效</title>
      <link href="/2021/08/31/linux/xin-jian-swap-huan-cun-nei-cun-fen-qu-mei-sheng-xiao/"/>
      <url>/2021/08/31/linux/xin-jian-swap-huan-cun-nei-cun-fen-qu-mei-sheng-xiao/</url>
      
        <content type="html"><![CDATA[<p>划分了swap分区，但在内存很高时，swap的使用率仍是0</p><p>查看系统内存参数vm.swappiness</p><p>vm.swappiness：控制换出运行时内存的相对权重，参数值大小对如何使用swap分区有很大联系。值越大，表示越积极使用swap分区，越小表示越积极使用物理内存</p><p>修改vm.swappiness参数为60</p><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/sysctl.confvm.swappiness = 60sysctl -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文档正式上线</title>
      <link href="/2021/08/31/sui-bi/wen-dang-zheng-shi-shang-xian/"/>
      <url>/2021/08/31/sui-bi/wen-dang-zheng-shi-shang-xian/</url>
      
        <content type="html"><![CDATA[<p><strong>直连入口：</strong><a href="https://92.linux91.cn/" target="_blank" rel="noopener">https://92.linux91.cn/</a><br>文档正式上线啦，页面有二个入口：</p><p><img src="https://gitee.com/linux91/document-img/raw/master/img/image-20210831162025149.png" alt="image-20210831162025149"></p><p><img src="https://gitee.com/linux91/document-img/raw/master/img/image-20210831161829404.png" alt="image-20210831161829404"></p><p><strong>文档页面：</strong></p><p><img src="https://gitee.com/linux91/document-img/raw/master/img/image-20210831161930797.png" alt="image-20210831161930797"></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于vuepress自动生成配置脚本</title>
      <link href="/2021/08/30/python/yong-yu-vuepress-zi-dong-sheng-cheng-pei-zhi-jiao-ben/"/>
      <url>/2021/08/30/python/yong-yu-vuepress-zi-dong-sheng-cheng-pei-zhi-jiao-ben/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近采用vuepress来存放文档，配置起来太麻烦了，所以写了个脚本，自动生成配置</p><h1 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h1><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> osconf <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'Python'</span><span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true"># 多目录结构</span>        <span class="token string">'nav'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'text'</span><span class="token punctuation">:</span><span class="token string">'Python文档'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 主text</span>            <span class="token string">'items'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true"># 记得每个目录对应的text名，如果没有对应的那么text为目录名</span>                <span class="token string">'1.Python-Basics'</span><span class="token punctuation">:</span> <span class="token string">'Python-基础'</span><span class="token punctuation">,</span>                <span class="token string">'2. Python-object'</span><span class="token punctuation">:</span> <span class="token string">'Python-面向对象'</span><span class="token punctuation">,</span>                <span class="token string">'3. Python-module'</span><span class="token punctuation">:</span> <span class="token string">'Python-模块与包'</span><span class="token punctuation">,</span>                <span class="token string">'4. Python-network'</span><span class="token punctuation">:</span> <span class="token string">'Python-网络'</span><span class="token punctuation">,</span>                <span class="token string">'5. Python-frontend'</span><span class="token punctuation">:</span> <span class="token string">'Python-前端'</span><span class="token punctuation">,</span>                <span class="token string">'6. Python-MySQL'</span><span class="token punctuation">:</span> <span class="token string">'Python-数据库'</span><span class="token punctuation">,</span>                <span class="token string">'7. Python-Django'</span><span class="token punctuation">:</span> <span class="token string">'Python-Django'</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true"># 记得每个目录对应的title名，如果没有对应的那么title为目录名</span>            <span class="token string">'1.Python-Basics'</span><span class="token punctuation">:</span> <span class="token string">'Python-基础'</span><span class="token punctuation">,</span>            <span class="token string">'2. Python-object'</span><span class="token punctuation">:</span> <span class="token string">'Python-面向对象'</span><span class="token punctuation">,</span>            <span class="token string">'3. Python-module'</span><span class="token punctuation">:</span> <span class="token string">'Python-模块与包'</span><span class="token punctuation">,</span>            <span class="token string">'4. Python-network'</span><span class="token punctuation">:</span> <span class="token string">'Python-网络'</span><span class="token punctuation">,</span>            <span class="token string">'5. Python-frontend'</span><span class="token punctuation">:</span> <span class="token string">'Python-前端'</span><span class="token punctuation">,</span>            <span class="token string">'6. Python-MySQL'</span><span class="token punctuation">:</span> <span class="token string">'Python-数据库'</span><span class="token punctuation">,</span>            <span class="token string">'7. Python-Django'</span><span class="token punctuation">:</span> <span class="token string">'Python-Django'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'more'</span><span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 1：为多目录结构，2：单目录结构</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">'docker'</span><span class="token punctuation">:</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true"># 单目录结构</span>        <span class="token string">'nav'</span><span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token string">'text'</span><span class="token punctuation">:</span><span class="token string">'docker文档'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 主text</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'docker文档'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 进去这个页面的title</span>        <span class="token string">'more'</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true"># 1：为多目录结构，2：单目录结构</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"docs"</span><span class="token punctuation">)</span>conf_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"docs"</span><span class="token punctuation">,</span><span class="token string">".vuepress"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">catalogue</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    tp <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">return</span> tp<span class="token keyword">def</span> <span class="token function">files</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    tp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">".md"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    tp<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'README'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> tpnav <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>sidebar <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> path_list_i <span class="token keyword">in</span> conf<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    more <span class="token operator">=</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'more'</span><span class="token punctuation">]</span>    path_da <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> path_list_i<span class="token punctuation">)</span>    <span class="token keyword">if</span> more<span class="token punctuation">:</span>        catalogues <span class="token operator">=</span> catalogue<span class="token punctuation">(</span>path_da<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        catalogues <span class="token operator">=</span> <span class="token punctuation">{</span>path_list_i<span class="token punctuation">:</span>path_da<span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> catalogues<span class="token punctuation">:</span>        key <span class="token operator">=</span> i        value <span class="token operator">=</span> catalogues<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 单目录跟多目录区分</span>        <span class="token keyword">if</span> more<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 导航栏</span>            text_name <span class="token operator">=</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'nav'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">or</span> key            <span class="token keyword">if</span> nav<span class="token punctuation">.</span>get<span class="token punctuation">(</span>path_list_i<span class="token punctuation">)</span><span class="token punctuation">:</span>                nav<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'items'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span>text_name<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">:</span><span class="token string">'/%s/%s/'</span><span class="token operator">%</span><span class="token punctuation">(</span>path_list_i<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                nav<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">'text'</span><span class="token punctuation">:</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'nav'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'items'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'text'</span><span class="token punctuation">:</span>text_name<span class="token punctuation">,</span> <span class="token string">'link'</span><span class="token punctuation">:</span><span class="token string">'/%s/%s/'</span><span class="token operator">%</span><span class="token punctuation">(</span>path_list_i<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span>                <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 侧边栏配置</span>            path_da_da <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path_da<span class="token punctuation">,</span> key<span class="token punctuation">)</span>            filess <span class="token operator">=</span> files<span class="token punctuation">(</span>path_da_da<span class="token punctuation">)</span>            title_name <span class="token operator">=</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">or</span> key            sidebar<span class="token punctuation">[</span><span class="token string">'/%s/%s/'</span><span class="token operator">%</span><span class="token punctuation">(</span>path_list_i<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                    <span class="token string">'title'</span><span class="token punctuation">:</span> title_name<span class="token punctuation">,</span>                    <span class="token string">'collapsable'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                    <span class="token string">'children'</span><span class="token punctuation">:</span> filess            <span class="token punctuation">}</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 导航栏</span>            nav<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'text'</span><span class="token punctuation">:</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'nav'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'text'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'link'</span><span class="token punctuation">:</span> <span class="token string">'/%s/'</span><span class="token operator">%</span>path_list_i<span class="token punctuation">,</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 侧边栏配置</span>            filess <span class="token operator">=</span> files<span class="token punctuation">(</span>path_da<span class="token punctuation">)</span>            sidebar<span class="token punctuation">[</span><span class="token string">'/%s/'</span><span class="token operator">%</span>path_list_i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>                <span class="token string">'title'</span><span class="token punctuation">:</span> conf<span class="token punctuation">[</span>path_list_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">'collapsable'</span><span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">,</span>                <span class="token string">'children'</span><span class="token punctuation">:</span> filess            <span class="token punctuation">}</span><span class="token punctuation">]</span>text <span class="token operator">=</span> <span class="token triple-quoted-string string">"""module.exports = {    title: 'MSG',    description: '这是技术文档',    base: '/', // 这是部署到github相关的配置    markdown: {      lineNumbers: false // 代码块显示行号    },    themeConfig: {      // 导航栏配置      nav:%s,      sidebar: %s,      sidebarDepth: 3, // 侧边栏显示2级    }  };"""</span><span class="token operator">%</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>nav<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sidebar<span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'text'"</span><span class="token punctuation">,</span> <span class="token string">"text"</span><span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'link'"</span><span class="token punctuation">,</span> <span class="token string">"link"</span><span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'title'"</span><span class="token punctuation">,</span> <span class="token string">"title"</span><span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'children'"</span><span class="token punctuation">,</span> <span class="token string">"children"</span><span class="token punctuation">)</span>text <span class="token operator">=</span> text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'collapsable'"</span><span class="token punctuation">,</span> <span class="token string">"collapsable"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>conf_path<span class="token punctuation">,</span><span class="token string">"config_i.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>脚本需要注意的地方</p><ol><li>conf变量：是存放相关配置信息<ol><li>单目录结构：使用这个配置方式，生成的配置不会去扫描目录下的子目录，只会扫描目录下的文件进行生成配置</li><li>多目录结构：使用这个配置方式，页面路由会变成下拉多选方式，会对目录下的子目录进行扫描，生成配置</li></ol></li><li>最后的写入文件方式：我这边是采用了生成别的配置文件名，这样就可以去生成的配置文件截取有用的配置信息，进行修改，复制到真实的配置文件中</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客来源</title>
      <link href="/2021/08/25/sui-bi/bo-ke-lai-yuan/"/>
      <url>/2021/08/25/sui-bi/bo-ke-lai-yuan/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我写博客也有一段时间了，中间经历过博客系统的故障、采用新博客系统、服务器到期迁移等。<br>也因为这些问题的产生，也有可能是我比较懒吧，中间就停更了好长一段时间。<br>现在我使用了<code>GitHub Pages</code>来做博客<br>在这里我要感谢一个人，谢谢他提供的博客模板，十分感谢，地址为：<a href="https://github.com/godweiyang/hexo-theme-sungod" target="_blank" rel="noopener">https://github.com/godweiyang/hexo-theme-sungod</a></p><h1 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h1><p>新的开始，会先将旧博客的文章迁移到新博客里面，进行分类。<br>新的开始，我会更加注重技术方向</p><h1 id="文章的分类"><a href="#文章的分类" class="headerlink" title="文章的分类"></a>文章的分类</h1><p>后续我会把文章跟文档分开<br>    1. 文章：章数不多并更开放性等<br>    2. 文档：章数比较多、技术方向比较统一等</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Clickhouse的RBAC用户权限</title>
      <link href="/2021/07/02/clickhouse/clickhouse-de-rbac-yong-hu-quan-xian/"/>
      <url>/2021/07/02/clickhouse/clickhouse-de-rbac-yong-hu-quan-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我公司准备要上线Clickhouse，研发自己的数据平台，现在量不大，所以不考虑集群，只是单机，所以文章中只是在单机Clickhouse实现过，Clickhouse搭建文章我就不写了，网上一大堆，只是Clickhouse的RBAC用户权限国内的资料确实有点少，所以才会想要写出这一张文章</p><p><strong>Clickhouse还支持角色，可能我个人使用mysql多了，我更偏向个人账号个人权限的方式，所以这文章没有跟角色相关的，有兴趣的可以自行查询</strong></p><h2 id="开启Clickhouse的RBAC用户权限模式"><a href="#开启Clickhouse的RBAC用户权限模式" class="headerlink" title="开启Clickhouse的RBAC用户权限模式"></a>开启Clickhouse的RBAC用户权限模式</h2><p>想要开启有二步</p><h3 id="config-xml"><a href="#config-xml" class="headerlink" title="config.xml"></a>config.xml</h3><p>启动RBAC用户权限模式的存储路径</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access_control_path</span><span class="token punctuation">></span></span>路径<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>access_control_path</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access_control_path</span><span class="token punctuation">></span></span>/data/clickhouse/access/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>access_control_path</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="users-xml"><a href="#users-xml" class="headerlink" title="users.xml"></a>users.xml</h3><p>在你的管理员用户配置项中添加对RBAC模式的权限</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>access_management</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>access_management</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启Clickhouse后，就能使用类似mysql用户的机制</p><h2 id="创建普通用户"><a href="#创建普通用户" class="headerlink" title="创建普通用户"></a>创建普通用户</h2><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE USER 用户名 HOST IP 'IP段' IDENTIFIED WITH PLAINTEXT_PASSWORD BY '密码'CREATE USER u HOST IP '172.28.3.0/24' IDENTIFIED WITH PLAINTEXT_PASSWORD BY '123456'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>用户。。。  这个没啥好说的</li><li>IP段，这个就有意思了，之前查找资料的时候，这里写的是IP，为啥我要写成IP段，因为我要我们生产环境的IP段都能访问到数据库，那么我填了不少坑，才知道这里是用网段掩码来区分IP段，并不是用什么0或%之类的，也可能博主技术一般吧，简单来说，就是想要使用172.28.3.<em>这IP段，那么就要写172.28.3.0/24，才支持172.28.3.\</em>的所有IP访问到</li><li>密码。。。 这个也没啥好说的</li></ol><h2 id="修改用户名"><a href="#修改用户名" class="headerlink" title="修改用户名"></a>修改用户名</h2><pre class="line-numbers language-mysql"><code class="language-mysql">## 将用户名u修改成uuALTER USER u RENAME TO u2u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h2><pre class="line-numbers language-mysql"><code class="language-mysql">show create user # 查看当前用户show create user 用户名 # 查看指定用户show create user u;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><pre class="line-numbers language-mysql"><code class="language-mysql">DROP USER [IF EXISTS] name [,...] [ON CLUSTER cluster_name]DROP USER 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="授权以及取消授权"><a href="#授权以及取消授权" class="headerlink" title="授权以及取消授权"></a>授权以及取消授权</h2><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><pre class="line-numbers language-mysql"><code class="language-mysql">GRANT select ON text.* TO u WITH GRANT OPTION; #授权给u用户text数据库查询权限GRANT all ON text.* TO u WITH GRANT OPTION; #授权给u用户text数据库所有权限GRANT all ON *.* TO u WITH GRANT OPTION; #授权给u用户全部权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h3><pre class="line-numbers language-mysql"><code class="language-mysql">SHOW GRANTS # 查看当前用户权限SHOW GRANTS FOR 用户名; # 查看指定用户权限SHOW GRANTS FOR u;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="取消授权"><a href="#取消授权" class="headerlink" title="取消授权"></a>取消授权</h3><pre class="line-numbers language-mysql"><code class="language-mysql">REVOKE select ON text.* FROM u; #取消授权给u用户text数据库查询权限REVOKE all ON text.* FROM u; #取消授权给u用户text数据库所有权限REVOKE all ON *.* FROM u; #取消授权给u用户全部权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Clickhouse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Clickhouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恢复之.ibd文件恢复，没有教程步骤，只有心得</title>
      <link href="/2021/06/02/mysql/hui-fu-zhi.ibd-wen-jian-hui-fu-mei-you-jiao-cheng-bu-zou-zhi-you-xin-de/"/>
      <url>/2021/06/02/mysql/hui-fu-zhi.ibd-wen-jian-hui-fu-mei-you-jiao-cheng-bu-zou-zhi-you-xin-de/</url>
      
        <content type="html"><![CDATA[<h1 id="Mysql恢复之-ibd文件恢复，没有教程步骤，只有心得"><a href="#Mysql恢复之-ibd文件恢复，没有教程步骤，只有心得" class="headerlink" title="Mysql恢复之.ibd文件恢复，没有教程步骤，只有心得"></a>Mysql恢复之.ibd文件恢复，没有教程步骤，只有心得</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>博主最近遇到一件很鬼怪的事，我删当前的一个目录，他竟然把我要删的目录以外的几个目录给删了，顿时冷汗直下，因为那是数据库机器，而已还是资源目录，备份跟data目录全部没了，只来得及从进程中拉取.ibd文件出来，不就还好，.ibd文件还能救得回，不过当天肯定会丢失部分数据，还好我这个数据库是记录用户日志的，不是很核心，不然我就不会在写博文，而是打包走人，在找工作了</p><h2 id="恢复第一步"><a href="#恢复第一步" class="headerlink" title="恢复第一步"></a>恢复第一步</h2><p>有了.ibd文件是不是想，按百度的方式进行数据的恢复，这里暂停</p><p><strong>如果能拉得出.ibd文件，那么证明数据库还是可以访问的，那么请进行热备份出来，不要想着.ibd文件恢复，因为是个巨坑</strong></p><p>这里恢复，因为我是没想到上面那步，所以导致机器被重启，结果。。。。。。想到了想要备份都不行，真想搞死我自己</p><p>如果跟我碰到一样以及相同结果的兄弟，请联系我一下，我们一起哭惨。。。。。。。。。。。。。。。。。。。。。。。。</p><p>我按百度的方式进行恢复。。。。。。。常用的三剑客</p><pre><code>1. 先创建表，表结构跟删除的表结构要一样 2. 删除表空间，把.ibd复制过去 3. 恢复表空间。</code></pre><p>我按这个步骤恢复了数据量比较小的，恢复成功，让我无比开心，接下来让我心沉入大海</p><p>。。。。。。如果到这步可以恢复的大佬们，就不用接着看下去了</p><p>我恢复到了数据量大的表，就一直报错，数据库直接崩，重启，百度，必应，谷歌，都找了相关博文，一点收获都没有</p><p>想死的心都有。。。。。。</p><p>事到这步也不能死心，按网上的博文尝试各种的方法，结果就是：.ibd文件损坏，无法直接恢复</p><h2 id="最后一步"><a href="#最后一步" class="headerlink" title="最后一步"></a>最后一步</h2><p>我是怎么重新获得光明的呢</p><p>得到一位dba大佬的指点，使用.ibd分析工具来恢复，找了一下。。。。。不是恢复表结构，就是分析.ibd的占用情况等等</p><p>最后终于找到了，也是那位dba大佬的指点，给我介绍了一个工具，也是这博文最重要的东西：<code>undrop-for-innodb</code>，我的救星</p><p>标题也说了，没有教程，所以有需要的大佬们，自行百度</p><p><strong>工具一点心得</strong></p><ol><li>使用undrop-for-innodb工具恢复出来的数据文件，请按不同文件名恢复到不同.sql文件，请不要恢复到一个.sql文件</li><li>猜测啊：有一些.sql文件可能是索引之类的数据，所以会乱码，我就只恢复没有乱码的.sql文件，各位大佬有使用过的，可以证明的一下，联系一下本人</li></ol><p>恢复成功了，丢失了部分数据，还好找回大部分数据，让我的饭碗保留下来</p><p>过后有时间，会尝试还原一下当时的情况，也会新开博文记录下来</p><p>重点推荐一下，数据库社区：<a href="https://www.modb.pro/" target="_blank" rel="noopener">https://www.modb.pro/</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx最大文件打开数</title>
      <link href="/2021/04/02/nginx/nginx-zui-da-wen-jian-da-kai-shu/"/>
      <url>/2021/04/02/nginx/nginx-zui-da-wen-jian-da-kai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>由于星期天nginx的一次意外报警，让我心生警报，因为周末，暂时没处理，到星期一才来处理，检测了一下日志，报的是打开的文件过多</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token punctuation">[</span>crit<span class="token punctuation">]</span> <span class="token number">22809</span><span class="token comment" spellcheck="true">#0: accept4() failed (24: Too many open files)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="检测问题"><a href="#检测问题" class="headerlink" title="检测问题"></a>检测问题</h2><h3 id="检测系统文件最大打开数"><a href="#检测系统文件最大打开数" class="headerlink" title="检测系统文件最大打开数"></a>检测系统文件最大打开数</h3><pre class="line-numbers language-shell"><code class="language-shell">vim /etc/security/limits.confroot soft nofile 65535root hard nofile 65535* soft nofile 65535* hard nofile 65535<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是阿里云服务器，那么默认会给系统增加文件打开数，如果是虚拟机自装的，一般文件最大打开数为1024</p><h3 id="检测nginx程序最大打开数"><a href="#检测nginx程序最大打开数" class="headerlink" title="检测nginx程序最大打开数"></a>检测nginx程序最大打开数</h3><pre class="line-numbers language-shell"><code class="language-shell">cat /proc/16581/limits | grep "Max open files"Max open files            1024                 4096                 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>通过刚才检测出，问题是出在nginx程序本身，不关系统本身的</p><p>那就好办了，提高nginx最高打开文件数</p><pre class="line-numbers language-shell"><code class="language-shell">vim nginx.confworker_rlimit_nofile 65535;## 注意：worker_rlimit_nofile这选项要然http{}之前添加## 比如：user  nginx;worker_processes  2;worker_rlimit_nofile 65535;http {}## 热重启nginxnginx -tnginx -s reload## 再次查看nginx最大打开文件数cat /proc/6616/limits | grep "Max open files"Max open files            65535                65535                files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从架构或主主架构中的数据同步讨论</title>
      <link href="/2021/03/02/mysql/guan-yu-zi-jian-yong-hu-bu-neng-gei-bie-yong-hu-shou-quan-wen-ti/"/>
      <url>/2021/03/02/mysql/guan-yu-zi-jian-yong-hu-bu-neng-gei-bie-yong-hu-shou-quan-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql-关于自建用户不能给别用户授权问题"><a href="#mysql-关于自建用户不能给别用户授权问题" class="headerlink" title="mysql - 关于自建用户不能给别用户授权问题"></a>mysql - 关于自建用户不能给别用户授权问题</h1><p>背景：今天做mysql帐密可视化管理时，使用自建账号对别的账号进行授权，发现授权不了</p><p>问题：ERROR 1044 (42000): Access denied for user ‘ops’@’%’ to database ‘tx_domain’</p><pre class="line-numbers language-shell"><code class="language-shell">mysql> GRANT SELECT ON `tx_domain`.* TO 'msg'@'%';ERROR 1044 (42000): Access denied for user 'ops'@'%' to database 'tx_domain'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：</p><p>确定原因，使用root用户对ops用户进行ALL全部权限授权，但是ops用户还是没有GRANT权限，为什么呢，查询mysql权限表</p><pre class="line-numbers language-shell"><code class="language-shell">mysql> select * from mysql.user where user='ops' and Host='%'\G;*************************** 1. row ***************************                    Host: %                    User: ops              Grant_priv: N## 结果只截取问题所在行## 显示N权限，很明显了mysql> update mysql.user set Grant_priv='Y' where user='ops' and Host='%';mysql> flush privileges;## 退出界面重新进入mysql> GRANT SELECT ON `tx_domain`.* TO 'msg'@'%';Query OK, 0 rows affected (0.02 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：当前遇到的问题使用这方法能够处理，有可能遇到的问题不一样，如果有遇到不一样的问题欢迎来联系，也同时欢迎遇到不一样的问题并解决了的大佬分享解决思路</strong></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis的used_memory_dataset_perc过高</title>
      <link href="/2021/02/19/redis/redis-de-used-memory-dataset-perc-guo-gao/"/>
      <url>/2021/02/19/redis/redis-de-used-memory-dataset-perc-guo-gao/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>今天突然一堆业务连redis报错打过来，让我心惊胆战，检查服务器后才发现redis的一切很正常，放心中，结果还惊动我们老大，我跟老大说redis没问题，他反手一个used_memory_dataset_perc为啥那么高。。。  </p><h1 id="问题本质"><a href="#问题本质" class="headerlink" title="问题本质"></a>问题本质</h1><p><strong>used_memory_dataset_perc其实是总内存中数据内存占用百分比，并不是主机内存中数据内存占用百分比。这个是重点</strong></p><p>问题出现在used_memory_dataset_perc占比过高，那么就要来说一下used_memory_dataset_perc的规则</p><p>used_memory_dataset_perc：</p><ol><li>参数意思：数据占用的内存大小的百分比</li><li>计算规则：100 * (used_memory_dataset / (used_memory - used_memory_startup))</li><li>计算规则：100 * (数据占用内存大小 / (总内存大小 - redis本身服务占用内存大小))</li></ol><p>在来看看used_memory_dataset_perc计算规则需要的一些参数</p><ol><li>used_memory_dataset：数据占用的内存大小</li><li>used_memory：Redis分配的内存总量，包括服务本身等于全部</li><li>used_memory_startup：Redis服务器启动时消耗的内存</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>相信看到这里，每个人心里有点想法了吧，建议去按这个规则手动在算一遍</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘显示过高，实际使用不高</title>
      <link href="/2021/01/19/linux/ci-pan-xian-shi-guo-gao-shi-ji-shi-yong-bu-gao/"/>
      <url>/2021/01/19/linux/ci-pan-xian-shi-guo-gao-shi-ji-shi-yong-bu-gao/</url>
      
        <content type="html"><![CDATA[<p>在我公司的日志服务器，发现了一个问题，某个磁盘使用过高，但是实际使用并不高</p><p><img src="https://gitee.com/linux91/document-img/raw/master/img/image-20210202150946850.png" alt="image-20210202150946850"></p><p>可能是有进程占用已删除或不存在的文件，所以导致没有真正的从这磁盘删除掉，我的就是这个问题</p><p>使用lsof命令，查看进程占用的文件</p><pre class="line-numbers language-shell"><code class="language-shell">lsof |grep deleted## 这条命令是，查看进程占用不存在的文件跟进程<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样子就能查出有那些进程占用了我们删除或迁移的文件，对所属进程进行重启或其他操作就可以解除占用</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django2.0使用问题记录-持续更新</title>
      <link href="/2020/09/19/python/django2.0-shi-yong-wen-ti-ji-lu-chi-xu-geng-xin/"/>
      <url>/2020/09/19/python/django2.0-shi-yong-wen-ti-ji-lu-chi-xu-geng-xin/</url>
      
        <content type="html"><![CDATA[<br><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">raise</span> ImproperlyConfigured<span class="token punctuation">(</span><span class="token string">'mysqlclient 1.3.13 or newer is required; you have %s.'</span> <span class="token operator">%</span> Database<span class="token punctuation">.</span>__vers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方法：</strong><br>准备将 Django 连接到 MySQL，在命令行输入命令 python manage.py makemigrations 后报错： django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.<br>由于 mysqlclient 目前不支持高版本python，出现这个错误之后可以根据错误提示找到文件位置，打开 base.py 文件，找到以下代码：</p><pre class="line-numbers language-python"><code class="language-python">version <span class="token operator">=</span> Database<span class="token punctuation">.</span>version_info<span class="token keyword">if</span> version <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> ImproperlyConfigured<span class="token punctuation">(</span><span class="token string">'mysqlclient 1.3.13 or newer is required; you have %s.'</span> <span class="token operator">%</span> Database<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将 if 语句注释掉之后在执行命令就不会再报错</p><pre class="line-numbers language-python"><code class="language-python">version <span class="token operator">=</span> Database<span class="token punctuation">.</span>version_info<span class="token comment" spellcheck="true"># if version &lt; (1, 3, 13):</span><span class="token comment" spellcheck="true">#     raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br><br><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><pre class="line-numbers language-python"><code class="language-python">query <span class="token operator">=</span> query<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>errors<span class="token operator">=</span><span class="token string">'replace'</span><span class="token punctuation">)</span> AttributeError<span class="token punctuation">:</span> <span class="token string">'str'</span> object has no attribute <span class="token string">'decode'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方法：</strong></p><pre class="line-numbers language-python"><code class="language-python">File <span class="token string">"C:\python3\lib\site-packages\django\db\backends\mysql\operations.py"</span><span class="token punctuation">,</span> line <span class="token number">146</span><span class="token punctuation">,</span> <span class="token keyword">in</span> last_executed_query    query <span class="token operator">=</span> query<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>errors<span class="token operator">=</span><span class="token string">'replace'</span><span class="token punctuation">)</span>AttributeError<span class="token punctuation">:</span> <span class="token string">'str'</span> object has no attribute <span class="token string">'decode'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>打开operations.py文件，把文件146行的decode修改为encode</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> query <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>    query <span class="token operator">=</span> query<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>errors<span class="token operator">=</span><span class="token string">'replace'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br><br>## 问题3``` pythonos.getenv('PATH') nmap.nmap.PortScannerError: 'nmap program was not found in path. PATH is```<br>**linux上的解决方法**安装本地的nmap软件就可以解决官方下载地址：https://nmap.org/``` pythonyum -y install nmap```<br><p><strong>win上的解决方法</strong><br>安装本地的nmap软件就可以解决，并要在实例化nmap模块的同事带上本地的nmap路径<br>官方下载地址：<a href="https://nmap.org/" target="_blank" rel="noopener">https://nmap.org/</a></p><pre class="line-numbers language-python"><code class="language-python">nm <span class="token operator">=</span> nmap<span class="token punctuation">.</span>PortScanner<span class="token punctuation">(</span>nmap_search_path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'nmap'</span><span class="token punctuation">,</span>r<span class="token string">'C:\Program Files (x86)\Nmap\nmap.exe'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><br>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk的基本用法</title>
      <link href="/2020/07/01/linux/guan-yu-a-li-yun-dan-xing-wang-qia-bang-ding-hou-gai-wang-duan-wu-fa-fang-wen-yuan-ip/"/>
      <url>/2020/07/01/linux/guan-yu-a-li-yun-dan-xing-wang-qia-bang-ding-hou-gai-wang-duan-wu-fa-fang-wen-yuan-ip/</url>
      
        <content type="html"><![CDATA[<p>需要关于系统中的源地址校验<br>vim /etc/sysctl.conf</p><pre class="line-numbers language-shell"><code class="language-shell">net.ipv4.conf.eth1.rp_filter=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eth1对应的就是绑定弹性网卡的网卡名</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>awk的基本用法</title>
      <link href="/2020/05/01/linux-ming-ling/awk-de-ji-ben-yong-fa/"/>
      <url>/2020/05/01/linux-ming-ling/awk-de-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<p>awk是一种可以处理数据，产生格式化报表的语言，功能相当强大。<br>awk的工作方式是读取数据文件，将每一行数据视为一条记录（record），每笔记录以字段分隔符，分成若干字段，然后输出各个字段的值<br>awk擅长文本格式化。并将格式化以后的文本输出，而对于文本的处理<br>awk是逐行处理的，逐行处理的意思就是，当awk处理一个文本时，会一行一行进行处理，处理完当前行，再处理下一行<br>awk默认以”换行符”为标记，识别每一行，也就是说，awk每次遇到”回车换行”，就认为是当前行的结束，新的一行的开始<br>awk会按照用户指定的分割符去分割当前行，如果没有指定分割符，默认使用空格作为分隔符</p><br>----------<br>$0表示显示整行$NF表示当前行分割后的最后一列$0跟$NF都是内置变量，注意：$0跟$NF要表达的意思是不一样的对于awk来说，$NF表示最后一个字段$NF表示当前行被分隔符切开以后，一共有几个字段，也就是说，假如一行文本被空格分成了7段，那么$NF的值就是$7，而$7表示当前行的第7个字段，也就是最后一列那么每行的倒数第二列也可以写为($NF-1)<p>awk只能处理结构化的文本，因此对输入文件的要求是有规则和结构化的，awk将每个输入文本行定义为记录，行中的每个字符串定义为域，域之间用空格，Tab键或其他符号进行分割，分割域的符号就叫做分割符</p><br>----------<br><p>![示例][2]<br>这是文本中的一行内容<br>以空格符作为分隔符的话，那这行内容就会被切成9个域，最后一个域的值：madness        888888888，这样子大家也知道了吧<br>以Tab键作为分隔符的话，那这行内容就会被切成2个域，第一个域的值：There is a fine line between genius and madness，第二个域的值：888888888</p><br>----------<br><p>awk对每一条记录，都会套用一个”条件类型{操作动作}”，如果该文本行符合条件，就执行指定的操作<br>条件类型或操作动作之一，可以省略<br>    只有条件类型时：表示要显示符合条件的数据行<br>    只有操作动作时：表示对每一数据行都执行该动作操作</p><p>注意：awk是以”行”为一次处理的单位，而以域为最小的处理单位</p><br><br>--------------------<br><br><h2 id="awk处理流程"><a href="#awk处理流程" class="headerlink" title="awk处理流程"></a>awk处理流程</h2><ol><li>读入第一行，并将第一行的数据填入$0,$1,$2……等变量当中</li><li>依据”条件类型”的限制，判断是否需要进行后面的”动作”</li><li>做完所有的动作跟条件类型</li><li>若还有后续的”行”数据，则重复上面1-3的步骤，直到所有数据都读完为止</li></ol><br><br>--------------------<br><br><h2 id="awk常用格式"><a href="#awk常用格式" class="headerlink" title="awk常用格式"></a>awk常用格式</h2><ol><li>awk”条件类型”文件：把符合条件类型的数据行显示出来。</li><li>awk’{操作动作}’：对每一行都执行{}中的操作</li><li>awk’条件类型{操作动作}’文件：对符合条件类型的数据行，执行{}中的操作</li><li>awk’条件类型1{操作动作1}条件类型2{操作动作2}……’文件</li></ol><br>----------<br><p>awk [-F|-f|-v] ‘BEGIN{} //{command1; command2} END{}’ file</p><p>[-F|-f|-v]：  大参数，-F指定分隔符，-f调用脚本，-v定义变量 var=value</p><p>‘  ‘ ：       引用代码块</p><p>BEGIN：       初始化代码块，在对每一行进行处理之前，初始化代码，主要是引用全局变量，设置FS分隔符</p><p>//：          匹配代码块，可以是字符串或正则表达式</p><p>{}：          命令代码块，包含一条或多条命令</p><p>；：          多条命令使用分号分隔</p><p>END ：        结尾代码块，在对每一行进行处理之后再执行的代码块，主要是进行最终计算或输出结尾摘要信息</p><br>----------<br><p>$0：  表示整个当前行</p><p>$1：  每行第一个字段</p><p>NF：  字段数量变量</p><p>NR：  每行的记录号，多文件记录递增</p><p>FNR： 与NR类似，不过多文件记录不递增，每个文件都从1开始</p><p>\t：  制表符</p><p>\n：  换行符</p><p>FS：  BEGIN时定义分隔符</p><p>RS：  输入的记录分隔符， 默认为换行符(即文本是按一行一行输入)</p><p>~ ：  匹配，与==相比不是精确比较</p><p>!~：  不匹配，不精确比较</p><p>==：  等于，必须全部相等，精确比较</p><p>!=：  不等于，精确比较</p><p>&amp;&amp;：  辑与</p><p>||：  逻辑或</p><ul><li>：  匹配时表示1个或1个以上</li></ul><p>/[0-9][0-9]+/：  两个或两个以上数字</p><p>/[0-9][0-9]*/：  一个或一个以上数字</p><p>FILENAME：       文件名</p><p>OFS：            输出字段分隔符， 默认也是空格，可以改为制表符等</p><p>ORS：            输出的记录分隔符，默认为换行符,即处理结果也是一行一行输出到屏幕</p><p>-F’[:#/]’：      定义三个分隔符</p><br>----------<br><p><strong>//匹配代码块</strong></p><p><strong>//纯字符匹配   !//纯字符不匹配   <del>//字段值匹配    !</del>//字段值不匹配   ~/a1|a2/字段值匹配a1或a2</strong>   </p><p>awk ‘/mysql/‘ /etc/passwd</p><p>awk ‘/mysql/{print }’ /etc/passwd</p><p>awk ‘/mysql/{print $0}’ /etc/passwd      ##三条指令结果一样</p><p>awk ‘!/mysql/{print $0}’ /etc/passwd      ##输出不匹配mysql的行</p><p>awk ‘/mysql|mail/{print}’ /etc/passwd</p><p>awk ‘!/mysql|mail/{print}’ /etc/passwd</p><p>awk -F: ‘/mail/,/mysql/{print}’ /etc/passwd      ##区间匹配</p><p>awk ‘/[2][7][7]*/{print $0}’ /etc/passwd      ##匹配包含27为数字开头的行，如27，277，2777…</p><p>awk -F: ‘$1~/mail/{print $1}’ /etc/passwd      ##$1匹配指定内容才显示</p><p>awk -F: ‘{if($1~/mail/) print $1}’ /etc/passwd      ##与上面相同</p><p>awk -F: ‘$1!~/mail/{print $1}’ /etc/passwd      ##不匹配</p><p>awk -F: ‘$1!~/mail|mysql/{print $1}’ /etc/passwd</p><br>----------<br><p><strong>print 是awk打印指定内容的主要命令</strong><br>awk ‘{print}’  /etc/passwd   ==   awk ‘{print $0}’  /etc/passwd  </p><p>awk ‘{print “ “}’ /etc/passwd      ##不输出passwd的内容，而是输出相同个数的空行，进一步解释了awk是一行一行处理文本</p><p>awk ‘{print “a”}’   /etc/passwd    ##输出相同个数的a行，一行只有一个a字母</p><p>awk -F”:” ‘{print $1}’  /etc/passwd </p><p>awk -F: ‘{print $1; print $2}’   /etc/passwd      ##将每一行的前二个字段，分行输出，进一步理解一行一行处理文本</p><p>awk  -F: ‘{print $1,$3,$6}’ OFS=”\t” /etc/passwd      ##输出字段1,3,6，以制表符作为分隔符</p><br>----------<br><p><strong>-F指定分隔符</strong></p><p><strong>$1 指指定分隔符后，第一个字段，$3第三个字段， \t是制表符</strong></p><p><strong>一个或多个连续的空格或制表符看做一个定界符，即多个空格看做一个空格</strong></p><p>awk -F”:” ‘{print $1}’  /etc/passwd</p><p>awk -F”:” ‘{print $1 $3}’  /etc/passwd     ##$1与$3相连输出，不分隔</p><p>awk -F”:” ‘{print $1,$3}’  /etc/passwd     ##多了一个逗号，$1与$3使用空格分隔</p><p>awk -F”:” ‘{print $1 “ “ $3}’  /etc/passwd     ##$1与$3之间手动添加空格分隔</p><p>awk -F”:” ‘{print “Username:” $1 “\t\t Uid:” $3 }’ /etc/passwd      ##自定义输出  </p><p>awk -F: ‘{print NF}’ /etc/passwd     ##显示每行有多少字段</p><p>awk -F: ‘{print $NF}’ /etc/passwd     ##将每行第NF个字段的值打印出来</p><p> awk -F: ‘NF==4 {print }’ /etc/passwd     ##显示只有4个字段的行</p><p>awk -F: ‘NF&gt;2{print $0}’ /etc/passwd     ##显示每行字段数量大于2的行</p><p>awk ‘{print NR,$0}’ /etc/passwd     ##输出每行的行号</p><p>awk -F: ‘{print NR,NF,$NF,”\t”,$0}’ /etc/passwd     ##依次打印行号，字段数，最后字段值，制表符，每行内容</p><p>awk -F: ‘NR==5{print}’  /etc/passwd     ##显示第5行</p><p>awk -F: ‘NR==5 || NR==6{print}’  /etc/passwd     ##显示第5行和第6行</p><p>route -n|awk ‘NR!=1{print}’      ##不显示第一行</p><br><br>--------------------<br><br><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>查找passwd文件中包含nginx的数据行</strong></p><pre><code>awk &#39;/nginx/&#39; /etc/passwd</code></pre><p><strong>运行结果</strong></p><pre><code>nginx:x:996:994:Nginx web server:/var/lib/nginx:/sbin/nologin</code></pre><br>----------<br><p><strong>查看passwd文件中的每行的第一列跟第二列，不指定分割符，默认以空格为分割符</strong></p><pre><code>awk &#39;{ print $1,$2 }&#39; /etc/passwd</code></pre><p><strong>运行结果</strong></p><pre><code>root:x:0:0:root:/root:/bin/bashbin:x:1:1:bin:/bin:/sbin/nologindaemon:x:2:2:daemon:/sbin:/sbin/nologin......略</code></pre><br>----------<br><p><strong>查看passwd文件中的每行中的第一列跟第二列包含”nginx”的数据行，不指定分割符，默认以空格为分割符</strong></p><pre><code>awk &#39;/nginx/{ print $1,$2 }&#39; /etc/passwd</code></pre><p><strong>运行结果</strong></p><pre><code>nginx:x:996:994:Nginx web</code></pre><br>----------<br><p><strong>使用选项-F，指定”:”为分隔符，查看nginx账号的第三列跟第四列的信息</strong></p><pre><code>awk -F: &#39;/nginx/{print $3,$4}&#39; /etc/passwd</code></pre><p><strong>运行结果</strong></p><pre><code>996 994</code></pre><br>----------<br><p><strong>以”:”为分隔符，+_+为输出字段分隔符(把输出的字段用+_+拼接起来)，将nginx账号的第一至五列显示出来</strong></p><pre><code>awk -F: &#39;BEGIN{OFS=&quot;+_+&quot;}/nginx/{print $1,$2,$3,$4,$5}&#39; /etc/passwd</code></pre><p><strong>运行结果</strong></p><pre><code>nginx+_+x+_+996+_+994+_+Nginx web server</code></pre><p><strong>注意：BEGIN{}区域指示awk一开始先做初始化的操作，即设定OFS=”+_+“，变量OFS的作用是存储输出字符的分隔符，接着寻找nginx账号所在行，找到后，使用print打印出第一至五列的字段，彼此用”+_+”隔开</strong></p><br>----------<br><p><strong>组合命令：取网卡中的IP</strong></p><pre><code>ifconfig | grep &#39;inet&#39; | grep -v &#39;127.0.0.1&#39; | awk &#39;{print $2}&#39;</code></pre><p><strong>运行结果</strong></p><pre><code>192.168.1.60</code></pre><br>----------<br><p><strong>组合命令：取网络设备名称</strong></p><pre><code>cat /proc/net/dev | awk -F: &#39;/eth.:/{print $1}&#39;</code></pre><p>运行结果</p><pre><code>eth0</code></pre><p><strong>取内存文件中的物理内存数</strong></p><pre><code>cat /proc/meminfo | awk &#39;/MemTotal/{print $2}&#39;</code></pre><p><strong>运行结果</strong></p><pre><code>16267660</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于使用Bootstrap，页面上有二个模态框，其中一个只出现背景不显示框问题</title>
      <link href="/2020/04/02/qian-duan/guan-yu-shi-yong-bootstrap-ye-mian-shang-you-er-ge-mo-tai-kuang-qi-zhong-yi-ge-zhi-chu-xian-bei-jing-bu-xian-shi-kuang-wen-ti/"/>
      <url>/2020/04/02/qian-duan/guan-yu-shi-yong-bootstrap-ye-mian-shang-you-er-ge-mo-tai-kuang-qi-zhong-yi-ge-zhi-chu-xian-bei-jing-bu-xian-shi-kuang-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>在显示不出框的主体代码中，可以看到有 fade 这个类，这个类有个css样式，用于设置框的透明度， 只要把这个类给删了，或强制写<br>：opacity: 1 !important; ，把透明给重设成默认的，就可以显示出来<br>本人都是直接把 fade 类给去掉</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql主从架构或主主架构中的数据同步讨论</title>
      <link href="/2020/03/02/mysql/mysql-zhu-cong-jia-gou-huo-zhu-zhu-jia-gou-zhong-de-shu-ju-tong-bu-tao-lun/"/>
      <url>/2020/03/02/mysql/mysql-zhu-cong-jia-gou-huo-zhu-zhu-jia-gou-zhong-de-shu-ju-tong-bu-tao-lun/</url>
      
        <content type="html"><![CDATA[<br><h1 id="异步模式"><a href="#异步模式" class="headerlink" title="异步模式"></a>异步模式</h1><p>异步模式也是Mysql默认的数据同步机制</p><ol><li>优点：数据同步速度快，能及时响应客户端的请求。</li><li>缺点：假如主数据库接收到客户端的写入请求，主数据库就会向从数据库发送请求并把相关的日志数据传输给从数据库时，这时主数据库不会管从数据库是否更新完毕，就向客户端响应，从数据库可能会因为外部因素，如网络故障等，导致从数据库接收不到，或接收到一半就断了，可能会导致主从二个数据库的数据存在不一致性<br><br># 全同步模式全同步模式是官方为了解决异步模式的弊端，出的一种模式，也是基于异步模式基础以上的一种模式</li><li>优点：最大可能性保障数据的一致性，对客户端的请求响应比较慢</li><li>缺点：假如主数据库接收到客户端的写入请求，主数据库就会向从数据库发送请求并把相关的日志数据传输给从数据库，这时主数据库没有接收到下面所有的从数据库更新完毕的状态，是不会向客户端响应，会一直等所有从数据库响应完毕，才会向客户端响应，这样又有一个问题，如果从数据库过多，在数据同步的过程可能会导致比较慢，对客户端的响应速度会有点影响。<br><br># 半同步模式半同步模式，是由谷歌开源出来的一个数据库插件，也是基于异步模式以上的一种模式，是异步模式跟全同步模式的中和版</li><li>优点：尽量可能性保障数据的一致性，对客户端的请求响应速度一般</li><li>缺点：假如主数据库接收到客户端的写入请求，主数据库就会向从数据库发送请求并把相关的日志数据传输给从数据库，这时只要主数据库接收到所有从数据库其中任意一个数据库的返回状态，立刻会向客户端响应，不会等待所有从数据库响应再响应客户端。<br></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kibana服务</title>
      <link href="/2019/04/13/elk/kibana-fu-wu/"/>
      <url>/2019/04/13/elk/kibana-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="kibana"><a href="#kibana" class="headerlink" title="kibana"></a><strong>kibana</strong></h2><p>Kibana是一个开源的分析和可视化平台，设计用于和Elasticsearch一起工作。</p><p>你用Kibana来搜索，查看，并和存储在Elasticsearch索引中的数据进行交互。</p><p>你可以轻松地执行高级数据分析，并且以各种图标、表格和地图的形式可视化数据。 Kibana使得理解大量数据变得很容易。</p><p>它简单的、基于浏览器的界面使你能够快速创建和共享动态仪表板，实时显示Elasticsearch查询的变化</p><p>kibana使用JavaScript语言编写，安装部署十分简单，即下即用，读者可以从elastic官网<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a> 下载所需的版本。</p><p>这里需要注意的是Kibana与Elasticsearch的版本必须一致，另外，在安装Kibana时，要确保Elasticsearch、Logstash和kafka已经安装完毕</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿一台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.192</p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：kibana6.5.2</p><p>官方下载地址：<a href="https://www.elastic.co/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/downloads/kibana</a></p><p><strong>JDK8</strong></p><p>kibana是需要jdk8的</p><p>JDK8安装文章：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8安装">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装</p><p>解压：tar -zxf kibana-6.5.2-linux-x86_64.tar.gz</p><p>移动：mv kibana-6.5.2-linux-x86_64 /usr/local/kibana</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>配置kibana</p><p>vim /usr/local/kibana/config/kibana.yml</p><pre class="line-numbers language-shell"><code class="language-shell">server.port: 5601    ##kibana绑定的监听端口，默认是5601server.host: "192.168.0.192"    ##kibana绑定的IP地址，如果内网访问，设置为内网地址elasticsearch.url: "http://192.168.0.192:9200"    ##kibana访问es的地址，如果是es集群，添加任一集群节点的IP地址，官方推荐是设置为es集群中client node角色的节点IPkibana.index: ".kibana"    ##用于存储kibana数据信息的索引，这个可以在kibana的web界面中看到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>————————-暂更——————————————-</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Logstash服务</title>
      <link href="/2019/04/12/elk/logstash-fu-wu/"/>
      <url>/2019/04/12/elk/logstash-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Logstash的工作"><a href="#Logstash的工作" class="headerlink" title="Logstash的工作"></a><strong>Logstash的工作</strong></h2><p>Logstash是一个开源的、服务端的数据处理pipeline（管道），它可以接收多个源的数据、然后对它们进行转换、最终将它们发送到指定类型的目的地。</p><p>Logstash是通过插件机制实现各种功能的，读者可以在<a href="https://github.com/logstash-plugins" target="_blank" rel="noopener">https://github.com/logstash-plugins</a> 下载各种功能的插件，也可以自行编写插件。</p><p>Logstash实现的功能主要分为接收数据、解析过滤并转换数据、输出数据三个部分，对应的插件依次是input插件、filter插件、output插件，其中，filter插件是可选的，其它两个是必须插件。也就是说在一个完整的Logstash配置文件中，必须有input插件和output插件。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿一台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.154</p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：Logstash6.5.2</p><p>官方下载地址：<a href="https://www.elastic.co/cn/downloads/logstash" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/logstash</a></p><p><strong>JDK8</strong></p><p>Logstash是需要jdk8的，自行安装</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装 </p><p>解压：tar -zxf logstash-6.5.2.tar.gz</p><p>移动：mv logstash-6.5.2 /usr/local/logstash</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p><strong>配置文件</strong></p><p>这里我们将logstash安装到/usr/local目录下，因此，logstash的配置文件目录为/usr/local/logstash/config/。</p><p>其中，jvm.options是设置JVM内存资源的配置文件，</p><p>logstash.yml是logstash全局属性配置文件，一般无需修改。</p><p>另外还需要自己创建一个logstash事件配置文件，这里重点介绍下logstash事件配置文件的编写方法和使用方式。</p><p>在介绍Logstash配置之前，先来认识一下logstash是如何实现输入和输出的。</p><p>Logstash提供了一个shell脚本/usr/local/logstash/bin/logstash,可以方便快速的启动一个logstash进程，在Linux命令行下，运行如下命令启动Logstash进程：</p><pre class="line-numbers language-shell"><code class="language-shell">cd /usr/local/logstash/bin/logstash -e 'input{stdin{}} output{stdout{codec=>rubydebug}}'解释下这条命令的含义：-e代表执行的意思。input即输入的意思，input里面即是输入的方式，这里选择了stdin，就是标准输入（从终端输入）。output即输出的意思，output里面是输出的方式，这里选择了stdout，就是标准输出（输出到终端）。这里的codec是个插件，表明格式。这里放在stdout中，表示输出的格式，rubydebug是专门用来做测试的格式，一般用来在终端输出JSON格式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着，在终端输入信息。这里我们输入”Hello World”，按回车，马上就会有返回结果，内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">Hello World{      "@version" => "1",       "message" => "Hello World",          "host" => "localhost.localdomain",    "@timestamp" => 2019-01-15T09:52:43.336Z}这就是logstash的输出格式。Logstash在输出内容中会给事件添加一些额外信息。比如"@version"、"host"、"@timestamp"都是新增的字段，而最重要的是@timestamp，用来标记事件的发生时间。由于这个字段涉及到Logstash内部流转，如果给一个字符串字段重命名为@timestamp的话，Logstash就会直接报错。另外，也不能删除这个字段在logstash的输出中，常见的字段还有type，表示事件的唯一类型、tags，表示事件的某方面属性，我们可以随意给事件添加字段或者从事件里删除字段。在执行上面的命令后，可以看到，我们输入什么内容，logstash就会按照上面的格式输出什么内容。使用CTRL-C命令可以退出运行的Logstash事件。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>创建配置一个简单的过滤配置文件</strong></p><p>使用-e参数在命令行中指定配置是很常用的方式，但是如果logstash需要配置更多规则的话，就必须把配置固化到文件里，这就是logstash事件配置文件。</p><p>如果把上面在命令行执行的logstash命令，写到一个配置文件logstash-simple.conf中，就变成如下内容：</p><pre class="line-numbers language-shell"><code class="language-shell">input {        stdin {}}output {        stdout {             codec => rubydebug        }}这就是最简单的Logstash事件配置文件。此时，可以使用logstash的-f参数来读取配置文件，然后启动logstash进程，操作如下:bin/logstash -f config/logstash-simple.conf nohup bin/logstash -f config/logstash-simple.conf &第一种启动方法：通过这种方式也可以启动logstash进程，不过这种方式启动的进程是在前台运行的第二种启动方法：logstash进程就放到了后台运行了，在当前目录会生成一个nohup.out文件，可通过此文件查看logstash进程的启动状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a><strong>扩展</strong></h2><p>logstash过滤文件配置</p><h3 id="简单的logstash过滤配置文件"><a href="#简单的logstash过滤配置文件" class="headerlink" title="简单的logstash过滤配置文件"></a><strong>简单的logstash过滤配置文件</strong></h3><p><strong>下面是文件的内容</strong></p><pre class="line-numbers language-shell"><code class="language-shell">input {        file {                path => "/var/log/messages"        }}output {        stdout {                codec => rubydebug        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>input插件</strong></p><p>这里定义了input的输入源为file，然后指定了文件的路径为/var/log/messages，也就是将此文件的内容作为输入源，这里的path属性是必填配置，后面的路径必须是绝对路径，不能是相对路径。</p><p>如果需要监控多个文件，可以通过逗号分隔即可，例如：</p><pre class="line-numbers language-shell"><code class="language-shell">path => ["/var/log/messages","/log/*.log"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>output插件</strong></p><p>这里仍然采用rubydebug的JSON输出格式，这对于调试logstash输出信息是否正常非常有用。</p><p>这里我们来启动一下，以上面这个内容的配置文件启动，我测试的时候习惯在前台运行</p><pre class="line-numbers language-shell"><code class="language-shell">bin/logstash -f config/logstash-sooomple.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动后，等程序启动后， 如果没有输出什么日志，开一个新的终端，因为我们关联的日志文件是系统登录日志文件，以下就是输出的信息：</p><pre class="line-numbers language-shell"><code class="language-shell">{      "@version" => "1",          "host" => "localhost.localdomain",       "message" => "Jan 16 11:31:33 localhost chronyd[6337]: Selected source 119.28.206.193",    "@timestamp" => 2019-01-16T03:31:33.893Z,          "path" => "/var/log/messages"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是json格式的输出内容</p><h3 id="将输出到kafka集群上的logstash过滤配置文件"><a href="#将输出到kafka集群上的logstash过滤配置文件" class="headerlink" title="将输出到kafka集群上的logstash过滤配置文件"></a><strong>将输出到kafka集群上的logstash过滤配置文件</strong></h3><p><strong>下面是配置文件的内容</strong></p><pre class="line-numbers language-shell"><code class="language-shell">input {        file {                path => "/var/log/messages"        }}output {        kafka {                bootstrap_servers => "192.168.0.153:9092,192.168.0.154:9092"                topic_id => "osmessages"        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个配置文件中，输入input仍然是file，</p><p>重点看输出插件，这里定义了output的输出源为kafka，通过bootstrap_servers选项指定了kafka集群的IP地址和端口。</p><p>特别注意这里IP地址的写法，每个IP地址之间通过逗号分隔。另外，output输出中的topic_id选项，是指定输出到kafka中的哪个topic下，这里是osmessages，如果无此topic，会自动重建topic。</p><p>此配置文件所表达的含义是：将系统中/var/log/messages文件的内容实时的同步到kafka集群名为osmessages的topic下</p><p>请任选一下kafka的主机，执行以下的命令</p><pre class="line-numbers language-shell"><code class="language-shell">bin/kafka-console-consumer.sh --bootstrap-server 192.168.0.153:2181 --topic osmessages<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令就是在kafka端消费信息，可以看出，输入的信息在kafka消费端输出了，只不过在消息最前面增加了一个时间字段和一个主机字段</p><p>启动Logstash</p><pre class="line-numbers language-shell"><code class="language-shell">bin/logstash -f config/logstash-sooo.conf <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="配置logstash作为转发点"><a href="#配置logstash作为转发点" class="headerlink" title="配置logstash作为转发点"></a><strong>配置logstash作为转发点</strong></h3><p>上面对logstash的使用做了一个基础的介绍，现在回到本节介绍的这个案例中，在这个部署架构中，logstash是作为一个二级转发节点使用的，</p><p>也就是它将kafka作为数据接收源，然后将数据发送到elasticsearch集群中，按照这个需求，新建logstash事件配置文件kafka_os.conf，内容如下：</p><pre class="line-numbers language-shell"><code class="language-shell">input {        kafka {                bootstrap_servers => "192.168.0.153:9092,192.168.0.154:9092"                topics => ["osmessages"]                codec => "json"        }       }       output {        elasticsearch{                hosts => ["192.168.0.191:9200","192.168.0.192:9200"]                index => "osmessageslog-%{+YYYY-MM-dd}"        }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从配置文件可以看到，input接收源变成了kafka，通过bootstrap_servers和topics两个选项指定了接收源kafka的属性信息，</p><p>因为logstash从kafka获取到的数据内容为json格式，所以还需要在input字段加入codec=&gt;json来进行解析，</p><p>接着，output输出类型配置为elasticsearch，并通过hosts选项指定了elasticsearch集群的地址，最后通过index指定了索引的名称，</p><p>也就是下面要用到的Index pattern</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filebeat轻量级收集日志服务</title>
      <link href="/2019/04/11/elk/filebeat-qing-liang-ji-shou-ji-ri-zhi-fu-wu/"/>
      <url>/2019/04/11/elk/filebeat-qing-liang-ji-shou-ji-ri-zhi-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 id="Filebeat简单原理"><a href="#Filebeat简单原理" class="headerlink" title="Filebeat简单原理"></a><strong>Filebeat简单原理</strong></h2><p>Filebeat由两个主要组成部分组成：prospector和 harvesters。这些组件一起工作来读取文件并将事件数据发送到您指定的output。</p><p><strong>harvesters</strong></p><p>harvesters负责读取单个文件的内容。harvesters逐行读取每个文件，并将内容发送到output中。每个文件都将启动一个harvesters。harvesters负责文件的打开和关闭，这意味着harvesters运行时，文件会保持打开状态。如果在收集过程中，即使删除了这个文件或者是对文件进行重命名，Filebeat依然会继续对这个文件进行读取，这时候将会一直占用着文件所对应的磁盘空间，直到Harvester关闭。默认情况下，Filebeat会一直保持文件的开启状态，直到超过配置的close_inactive参数，Filebeat才会把Harvester关闭</p><p>关闭Harvesters会带来的影响：</p><ol><li>file Handler将会被关闭，如果在Harvester关闭之前，读取的文件已经被删除或者重命名，这时候会释放之前被占用的磁盘资源。</li><li>当时间到达配置的scan<em>frequency参数，将会重新启动为文件内容的收集。</em></li><li><em>如果在Havester关闭以后，移动或者删除了文件，Havester再次启动时，将会无法收集文件数据。</em></li><li><em>当需要关闭Harvester的时候，可以通过close\</em>配置项来控制。*</li></ol><p><strong>Prospector</strong></p><p>Prospector负责管理Harvsters，并且找到所有需要进行读取的数据源。如果input type配置的是log类型，Prospector将会去配置度路径下查找所有能匹配上的文件，然后为每一个文件创建一个Harvster。每个Prospector都运行在自己的Go routine里。</p><p>Filebeat目前支持两种Prospector类型：log和stdin。每个Prospector类型可以在配置文件定义多个。log Prospector将会检查每一个文件是否需要启动Harvster，启动的Harvster是否还在运行，或者是该文件是否被忽略（可以通过配置 ignore_order，进行文件忽略）。如果是在Filebeat运行过程中新创建的文件，只要在Harvster关闭后，文件大小发生了变化，新文件才会被Prospector选择到</p><h2 id="Filebeat的工作原理"><a href="#Filebeat的工作原理" class="headerlink" title="Filebeat的工作原理"></a><strong>Filebeat的工作原理</strong></h2><p>Filebeat可以保持每个文件的状态，并且频繁地把文件状态从注册表里更新到磁盘。这里所说的文件状态是用来记录上一次Harvster读取文件时读取到的位置，以保证能把全部的日志数据都读取出来，然后发送给output。如果在某一时刻，作为output的ElasticSearch或者Logstash变成了不可用，Filebeat将会把最后的文件读取位置保存下来，直到output重新可用的时候，快速地恢复文件数据的读取。在Filebaet运行过程中，每个Prospector的状态信息都会保存在内存里。如果Filebeat出行了重启，完成重启之后，会从注册表文件里恢复重启之前的状态信息，让FIlebeat继续从之前已知的位置开始进行数据读取。</p><p>Prospector会为每一个找到的文件保持状态信息。因为文件可以进行重命名或者是更改路径，所以文件名和路径不足以用来识别文件。对于Filebeat来说，都是通过实现存储的唯一标识符来判断文件是否之前已经被采集过。</p><p>如果在你的使用场景中，每天会产生大量的新文件，你将会发现Filebeat的注册表文件会变得非常大。这个时候，你可以参考（the section called “Registry file is too large?edit），来解决这个问题。<br>安装filebeat服务</p><h2 id="Logstash跟Filebeat"><a href="#Logstash跟Filebeat" class="headerlink" title="Logstash跟Filebeat"></a><strong>Logstash跟Filebeat</strong></h2><p>Logstash功能虽然强大，但是他太依赖java，在数据量大的时候，Logstash进程会消耗过多的系统资源，这将严重影响业务系统的性能。</p><p>而Filebeat就是一个完美的替代者，Filebeat是Beat成员之一，基于GO语言，没有任何的依赖，配置文件简单，格式明了。</p><p>同时Filebeat比Logstash更加轻量级，所以占用系统资源很少，很适合安装在生产机器上。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿一台虚拟机，centos7的</p><p>P地址：192.168.0.193</p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：Filebeat6.5.2</p><p>官方下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>安装</strong></p><p>解压：tar -zxf filebeat-6.5.2-linux-x86_64.tar.gz</p><p>移动：mv filebeat-6.5.2-linux-x86_64 /usr/local/filebeat</p><p><strong>配置</strong></p><p>vim /usr/local/filebeat/filebeat.yml</p><pre class="line-numbers language-shell"><code class="language-shell">filebeat.inputs:   ##用于定义数据原型- type: log        ##指定数据的输入类型  enabled: true    ##启动手工配置filebeat，默认为模块方式配置  paths:           ##指定需要监控的日志路径    - /var/log/messages   ##监控messages文件    - /log/*.log          ##监控*.log的所有文件  fields:    log_topic: osmessagesfilebeat.config.modules:  path: ${path.config}/modules.d/*.yml  reload.enabled: falsesetup.template.settings:  index.number_of_shards: 3name: "192.168.0.193"     ##设置filebeat收集日志中对应主机的名字，如果为空，则默认使用主机的主机名output.kafka:  ##filebeat支持多种输出，支持向kafka,logstash,elasticsearch输出数据，这里设置是交数据输入到kafka中  hosts: ["192.168.0.153:9092","192.168.0.154:9092"]  ##指定输出数据到kafka集群中  version: "0.10"  topic: '%{[fields][log_topic]}'  ##指定要发送数据到kafka集群的那个topic，如果指定的topic不存在，则会默认创建   partition.round_robin:    reachable_only: true  worker: 2  required_acks: 1  compression: gzip  max_message_bytes: 10000000processors:  - add_host_metadata: ~  - add_cloud_metadata: ~logging.level: info   ##定义filebeat的日志输入级别，有critical,error,warning,info,debug五种可以选择，在调试的时候，建议使用info级别<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p>cd /usr/local/filebeat/</p><p>nohup ./filebeat -e -c filebeat.yml &amp;</p>]]></content>
      
      
      <categories>
          
          <category> ELK </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ELK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置jenkins跟sonarqube实现部署前先分析代码</title>
      <link href="/2019/04/04/sonarqube/pei-zhi-jenkins-gen-sonarqube-shi-xian-bu-shu-qian-xian-fen-xi-dai-ma/"/>
      <url>/2019/04/04/sonarqube/pei-zhi-jenkins-gen-sonarqube-shi-xian-bu-shu-qian-xian-fen-xi-dai-ma/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>在jenkins里面安装插件，配置</p><p><strong>进入系统管理，插件管理，选择可选插件</strong>。</p><p><a href="http://92.linux91.cn/attachment/20181115/d2cfeecb502b4989bc1e9bc5954dbba6.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/d2cfeecb502b4989bc1e9bc5954dbba6.jpg" alt="img"></a></p><p><strong>按着上面的标志，安装二个插件，要保证以安装后，操作以下的操作</strong></p><p><strong>进入系统管理，系统设置</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/a069577a4ccd4faa9ac5e6ae5c1b8742.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/a069577a4ccd4faa9ac5e6ae5c1b8742.png" alt="img"></a></p><p><strong>按图上的说明配置，token在下面说明</strong></p><p><strong>token的获取，进入sonarqube中，登录，我的帐号(在右上角)，安全，生成令牌</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/1ff24538dda44d2aa791f9cca16d5ac7.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/1ff24538dda44d2aa791f9cca16d5ac7.jpg" alt="img"></a></p><p><strong>按上面的指示，就会生成token。</strong></p><p><strong>注意：生成后，如果页面刷新，token就会消失隐藏，记得保存</strong></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>配置项目</p><p><strong>新建一个项目</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/1acd311a9a014ff4a9e5095825b5eb6c.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/1acd311a9a014ff4a9e5095825b5eb6c.jpg" alt="img"></a></p><p><strong>跳过其它配置，只配置sonarqube</strong></p><p><strong>配置构建环境</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/a1449341a9f747f791dd95b7fe84a785.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/a1449341a9f747f791dd95b7fe84a785.png" alt="img"></a></p><p><strong>增加构建步骤</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/9ee44ceafe144d8a8091f419a237e4ce.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/9ee44ceafe144d8a8091f419a237e4ce.jpg" alt="img"></a></p><p><strong>主要配置</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/4cc7178b3e874d29a770b81cf7b0c58d.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/4cc7178b3e874d29a770b81cf7b0c58d.png" alt="img"></a></p><p><strong>下面是Analysis properties框中的详细说明</strong></p><pre class="line-numbers language-shell"><code class="language-shell">//项目的keysonar.projectKey=//项目的名字sonar.projectName=//项目的版本sonar.projectVersion=//需要分析的源码的目录，多个目录用英文逗号隔开sonar.sources=//指定了要分析的开发语言（特定的开发语言对应了特定的规则）sonar.language=java//定义了需要分析代码的编译后 class 文件位置sonar.java.binaries=$WORKSPACE  //代表jenkins的工作 空间目录sonar.projectKey=sitbgsonar.projectName=sitbgsonar.projectVersion=1.0sonar.language=javasonar.java.binaries=$WORKSPACEsonar.sources=$WORKSPACE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>到这里，配置就配置好了</strong></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>构建</p><p><a href="http://92.linux91.cn/attachment/20181115/4b4606e2decc41619619355cc4492678.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/4b4606e2decc41619619355cc4492678.jpg" alt="img"></a></p><p><strong>这样表示就构建成功</strong></p><p><a href="http://92.linux91.cn/attachment/20181115/6e15e94452ce45f49ccf14ea184af493.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/6e15e94452ce45f49ccf14ea184af493.jpg" alt="img"></a></p><p><strong>这样表示，代码分析正常</strong></p><p><strong>这章就到这里就结束了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> sonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装sonarqube-scanner</title>
      <link href="/2019/04/03/sonarqube/an-zhuang-sonarqube-scanner/"/>
      <url>/2019/04/03/sonarqube/an-zhuang-sonarqube-scanner/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载sonarqube-scanner</p><p>在这里我提供二个下载方式</p><p><strong>第一种，Linux系统中下载</strong></p><p>wget <a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-3.2.0.1227-linux.zip</a></p><p><strong>第二种，在官方网页下载</strong></p><p><a href="https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner" target="_blank" rel="noopener">https://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>解压，移动，配置</p><p><strong>解压</strong></p><p>unzip sonar-scanner-cli-3.2.0.1227-linux.zip</p><p><strong>移动</strong></p><p>mv sonar-scanner-3.2.0.1227-linux/ /usr/local/sonar-scanner</p><p><strong>配置</strong></p><p>cd /usr/local/sonar-scanner/conf/</p><p>vim sonar-scanner.properties</p><pre class="line-numbers language-java"><code class="language-java">sonar<span class="token punctuation">.</span>host<span class="token punctuation">.</span>url<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.251</span><span class="token operator">:</span><span class="token number">9000</span>    ##取消注释，修改成IP地址跟端口sonar<span class="token punctuation">.</span>sourceEncoding<span class="token operator">=</span>UTF<span class="token operator">-</span><span class="token number">8</span>    ##取消注释<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>添加系统变量</p><p><strong>添加</strong></p><p>vim /etc/profile</p><pre class="line-numbers language-java"><code class="language-java">SONAR_RUNNER_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sonar<span class="token operator">-</span>scannerPATH<span class="token operator">=</span>$SONAR_RUNNER_HOME<span class="token operator">/</span>bin<span class="token operator">:</span>$PATHexport SONAR_RUNNER_HOME export PATH    ##添加以上四行配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>刷新系统变量</strong></p><p>source /etc/profile</p><p><strong>测试</strong></p><p>sonar-scanner -h</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>想要在系统中分析代码，需要在代码根目录中添加sonar-project.properties文件</p><p>vim sonar-project.properties</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//项目的key</span>sonar<span class="token punctuation">.</span>projectKey<span class="token operator">=</span><span class="token comment" spellcheck="true">//项目的名字</span>sonar<span class="token punctuation">.</span>projectName<span class="token operator">=</span><span class="token comment" spellcheck="true">//项目的版本</span>sonar<span class="token punctuation">.</span>projectVersion<span class="token operator">=</span><span class="token comment" spellcheck="true">//需要分析的源码的目录，多个目录用英文逗号隔开</span>sonar<span class="token punctuation">.</span>sources<span class="token operator">=</span><span class="token comment" spellcheck="true">//指定了要分析的开发语言（特定的开发语言对应了特定的规则）</span>sonar<span class="token punctuation">.</span>language<span class="token operator">=</span>java<span class="token comment" spellcheck="true">//定义了需要分析代码的编译后 class 文件位置</span>sonar<span class="token punctuation">.</span>java<span class="token punctuation">.</span>binaries<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分析后的结果就在sonaqube里面。直接进去<a href="http://IP地址:端口" target="_blank" rel="noopener">http://IP地址:端口</a></p>]]></content>
      
      
      <categories>
          
          <category> sonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sonarQube代码质量平台 配置</title>
      <link href="/2019/04/02/sonarqube/sonarqube-dai-ma-zhi-liang-ping-tai-pei-zhi/"/>
      <url>/2019/04/02/sonarqube/sonarqube-dai-ma-zhi-liang-ping-tai-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="连接配置MySQL"><a href="#连接配置MySQL" class="headerlink" title="连接配置MySQL"></a><strong>连接配置MySQL</strong></h1><p><strong>进入mysql</strong></p><p>mysql -u root -p</p><p><strong>创建数据库</strong></p><p>mysql&gt; CREATE DATABASE sonar CHARACTER SET utf8 COLLATE utf8_general_ci;</p><p><strong>创建用户</strong></p><p>mysql&gt; CREATE USER ‘sonar’ IDENTIFIED BY ‘sonar’;</p><p><strong>赋予用户远程连接的权限</strong></p><p>mysql&gt; GRANT ALL ON sonar.* TO ‘sonar’@’%’ IDENTIFIED BY ‘sonar’;</p><p><strong>赋予用户本地连接的权限</strong></p><p>mysql&gt; GRANT ALL ON sonar.* TO ‘sonar’@’localhost’ IDENTIFIED BY ‘sonar’;</p><p><strong>刷新权限</strong></p><p>mysql&gt; FLUSH PRIVILEGES;</p><p><strong>退出数据库</strong></p><p>mysql&gt; exit</p><p><strong>修改配置文件</strong></p><p>vim /usr/local/sonarqube/conf/sonar.properties </p><pre class="line-numbers language-java"><code class="language-java">sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>username<span class="token operator">=</span>sonar    ##数据库用户名sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>password<span class="token operator">=</span>sonar    ##数据库用户密码sonar<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>url<span class="token operator">=</span>jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>sonar<span class="token operator">?</span>useUnicode<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>characterEncoding<span class="token operator">=</span>utf8<span class="token operator">&amp;</span>rewriteBatchedStatements<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>useConfigs<span class="token operator">=</span>maxPerformance<span class="token operator">&amp;</span>useSSL<span class="token operator">=</span><span class="token boolean">false</span>    ##数据库IP地址，直接复制，修改一个IP地址就OKsonar<span class="token punctuation">.</span>web<span class="token punctuation">.</span>host<span class="token operator">=</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.251</span>    ##本地IP地址，不能填<span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>sonar<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token operator">=</span>    ##不填，默认访问：<span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.251</span><span class="token operator">:</span><span class="token number">9000</span>，要是填写了，就要在端口后加上填写的sonar<span class="token punctuation">.</span>web<span class="token punctuation">.</span>port<span class="token operator">=</span><span class="token number">9000</span>    ##端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重启服务</strong></p><p>/usr/local/sonarqube/bin/linux-x86-64/sonar.sh restart</p><p><strong>查看日志</strong></p><p>tail -1000f /usr/local/sonarqube/logs/sonar.log</p><h1 id="SonarQube汉化"><a href="#SonarQube汉化" class="headerlink" title="SonarQube汉化"></a><strong>SonarQube汉化</strong></h1><p><a href="http://92.linux91.cn/attachment/20181112/1b73dfb4b8074a8d88e6c7ee8b537d8f.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/1b73dfb4b8074a8d88e6c7ee8b537d8f.jpg" alt="img"></a></p><p><strong>登录</strong></p><p><strong>默认的用户跟密码</strong></p><p><strong>用户名：admin</strong></p><p><strong>密码：admin</strong></p><p><a href="http://92.linux91.cn/attachment/20181112/0d5d0c2c2f474f5f86caedc669541417.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/0d5d0c2c2f474f5f86caedc669541417.png" alt="img"></a></p><p><strong>按上面的标志操作</strong></p><p><a href="http://92.linux91.cn/attachment/20181112/6c0a61f4e6914c91ae83e0ecdc1a7a53.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/6c0a61f4e6914c91ae83e0ecdc1a7a53.png" alt="img"></a></p><p><a href="http://92.linux91.cn/attachment/20181112/414833d13bd74aa5855c400f1de9fee8.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/414833d13bd74aa5855c400f1de9fee8.png" alt="img"></a></p><p><strong>点击安装，安装后，会自动重启服务</strong></p><p><strong>等待5秒后，刷新网页</strong></p><p><a href="http://92.linux91.cn/attachment/20181112/76867b8c2e154d31b9a7b895455857d1.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/76867b8c2e154d31b9a7b895455857d1.png" alt="img"></a></p><p><strong>sonarQube界面就变成中文界面了</strong></p>]]></content>
      
      
      <categories>
          
          <category> sonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装sonarQube代码质量平台6.7.5</title>
      <link href="/2019/04/01/sonarqube/an-zhuang-sonarqube-dai-ma-zhi-liang-ping-tai-6.7.5/"/>
      <url>/2019/04/01/sonarqube/an-zhuang-sonarqube-dai-ma-zhi-liang-ping-tai-6.7.5/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Sonar 是一个用于代码质量管理的开放平台。通过插件机制，Sonar 可以集成不同的测试工具，代码分析工具，以及持续集成工具。与持续集成工具（例如 Hudson/Jenkins 等）不同，Sonar 并不是简单地把不同的代码检查工具结果（例如 FindBugs，PMD 等）直接显示在 Web 页面上，而是通过不同的插件对这些结果进行再加工处理，通过量化的方式度量代码质量的变化，从而可以方便地对不同规模和种类的工程进行代码质量管理。</p><p>在对其他工具的支持方面，Sonar 不仅提供了对 IDE 的支持，可以在 Eclipse和 IntelliJ IDEA 这些工具里联机查看结果；同时 Sonar 还对大量的持续集成工具提供了接口支持，可以很方便地在持续集成中使用 Sonar。</p><p>此外，Sonar 的插件还可以对 Java 以外的其他编程语言提供支持，对国际化以及报告文档化也有良好的支持。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>本章只安装，所以只需要jdk1.8版本，请自行安装</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>下载sonarQube</p><p>wget <a href="https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.5.zip" target="_blank" rel="noopener">https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-6.7.5.zip</a></p><p>使用这方式下载有点慢，可以在本地先下载好，在上传到服务中</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装sonarQube</p><p><strong>解压</strong></p><p>unzip sonarqube-6.7.5.zip</p><p><strong>移动</strong></p><p>mv sonarqube-6.7.5 /usr/local/sonarqube</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>新建sonarqube用户</p><p><strong>新建用户</strong></p><p>adduser sonarqube</p><p><strong>创建密码</strong></p><p>passwd sonarqube</p><p><strong>修改密码</strong></p><p>chown -R sonarqube:sonarqube /usr/local/sonarqube</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>启动sonarQube</p><p>注意：sonarQube是不允许root启动的，如果使用root启动会报错</p><p>切换用户</p><p>su - sonarqube</p><p>启动</p><p>cd /usr/local/sonarqube</p><p>./bin/linux-x86-64/sonar.sh start</p>]]></content>
      
      
      <categories>
          
          <category> sonarQube </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【find】文件搜索神器的那些事</title>
      <link href="/2019/03/28/linux-ming-ling/find-wen-jian-sou-suo-shen-qi-de-na-xie-shi/"/>
      <url>/2019/03/28/linux-ming-ling/find-wen-jian-sou-suo-shen-qi-de-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="find的事"><a href="#find的事" class="headerlink" title="find的事"></a><strong>find的事</strong></h4><p>find命令用于在指定的路径中查找指定的文件，可以使用通配符等，再则，find是个使用频率比较高的命令，无论是在日常维护还是写相关脚本，使用可是find的频率是相当高的。</p><h4 id="find使用格式"><a href="#find使用格式" class="headerlink" title="find使用格式"></a><strong>find使用格式</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">find 路径 选项<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="find常用的选项"><a href="#find常用的选项" class="headerlink" title="find常用的选项"></a><strong>find常用的选项</strong></h4><p><strong>-name</strong>：查找文件名匹配所指定文件名的所有文件，可以使用通配符</p><p><strong>-lname</strong>：查找文件名匹配所指定文件名的所有符号链接文件，可以使用通配符</p><p><strong>-gid</strong>：查找指定用户组的所有文件</p><p><strong>-uid</strong>：查找指定用户的所有文件</p><p><strong>-empty</strong>：查找大小为0的目录或文件</p><p><strong>-group</strong>：查找指定用户组的所有文件</p><p><strong>-user</strong>：查找指定用户的所有文件</p><p><strong>-depth</strong>：查找文件时，先查找当前目录下的文件，然后再查找其子目录下的文件</p><p><strong>-prune</strong>：指定查找时不查找的目录，如果同时使用-depth选项，那么-prune选项就会被忽略，不生效</p><p><strong>-size</strong>：查找指定文件大小的所有文件。带有c时表示文件大小以字节计算</p><p><strong>-mtime</strong>：按时间查找，+n表示n天之前的，-n表示今天到n天前之间的</p><p><strong>-atime</strong>：按文件访问时间查找</p><p><strong>-ctime</strong>：按文件创建时间查找，+n表示n天之前的，-n表示今天到n天前之间的</p><p><strong>-perm</strong>：按权限查找</p><p><strong>-nogroup</strong>：查无有效属组的文件，即文件的属组在/etc/groups中不存在</p><p><strong>-nouser</strong>：查无有效属主的文件，即文件的属主在/etc/passwd中不存</p><p><strong>-type</strong>：文件类型，指定文件类型查找，文件类型包括：</p><ol><li>b：块设备文件</li><li>c：字符设备文件</li><li>f：普通文件</li><li>l：符号连接</li><li>d：目录</li><li>p：管道</li><li>s：sockel文件</li></ol><p><strong>-print</strong>：将查找结果输出到标准输出</p><p><strong>-ok</strong>：对查找出符合条件的文件的执行所给出的Linux命令，与-exec不同的是，-ok这个选项会先用户询问是否需要执行该命令</p><p><strong>-exec</strong>：对查找出符合条件的文件执行所给出的Linux命令，而不询问用户是否需要执行该命令，{}表示shell命令的选项即为所查找到的文件。命令的未必必须是”\;”结束。(-exec参数后面跟的是 command 命令，它的终止是以“；”为结束标志的，所以这句命令后面的分号是不可缺少的，考虑到各个系统中分号会有不同的意义，所以前面加反斜杠，{} 花括号代表前面find查找出来的文件名，使用find时，只要把想要的操作写在一个文件里，就可以用exec来配合find 查找，很方便的。在有些操作系统中，只允许 -exec 选项执行诸如 ls 或 ls -l 这样的命令。大多数用户使用着一些选项是为了查找旧文件并删除它们。建议再真正执行 rm 命令删除文件之前，最好先用 ls 命令看一下，确认他们是所要删除的文件。 exec 选项后面跟随着所要执行的命令或脚本，然后是一对儿{}，一个空格和一个\，最后是一个分号。为了使用 exec 选项，必须要同时使用 print 选项。如果验证一下 find 命令，会发现该命令只输出从当前路径起的相对路径及文件名。)</p><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a><strong>应用实例</strong></h4><p><strong>查找除了/usr/bin/外的rm文件，rm文件为普通文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find / -path "/usr/bin" -prune -o -name "rm" -type f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查找指定路径下属于root用户的文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find /usr/local -user root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在当前目录查找前2天前的文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find . -mtime +2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>在当前目录查找前2天前的文件并删除，删除时要增加文件类型</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find . -mtime -2 -type f -exec rm {} \;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查找系统中大于10M的文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find / -type f -size 10M<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查找系统中.txt的所有文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find / -name *.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>查找系统当前10M以上的文件和当天访问时间的文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">find / -size +10M -mtime 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux测试机，个人预装优化</title>
      <link href="/2019/03/22/linux/linux-ce-shi-ji-ge-ren-yu-zhuang-you-hua/"/>
      <url>/2019/03/22/linux/linux-ce-shi-ji-ge-ren-yu-zhuang-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a><strong>关闭防火墙</strong></h2><p><strong>centos6</strong></p><p>永久性生效：chkconfig iptables off </p><p>即时生效：service iptables stop</p><p>查看防火墙状态：service iptables status 或者 iptables -L</p><p>检查防火墙是否开机自启：chkconfig iptables –list </p><p><strong>centos7</strong></p><p>临时关闭：systemctl stop firewalld</p><p>防火墙开机关闭：systemctl disable firewalld</p><p>开机启动：systemctl enable firewalld</p><p>查看状态：systemctl status firewalld</p><p>获取 firewalld 状态：firewall-cmd –state</p><h2 id="关闭SELinux"><a href="#关闭SELinux" class="headerlink" title="关闭SELinux"></a><strong>关闭SELinux</strong></h2><p>centos6跟centos7通用</p><p>永久有效：修改/etc/sysconfig/selinux</p><pre class="line-numbers language-shell"><code class="language-shell">vi /etc/sysconfig/selinux# This file controls the state of SELinux on the system.# SELINUX= can take one of these three values:#     enforcing - SELinux security policy is enforced.#     permissive - SELinux prints warnings instead of enforcing.#     disabled - No SELinux policy is loaded.SELINUX=disabled# SELINUXTYPE= can take one of three values:#     targeted - Targeted processes are protected,#     minimum - Modification of targeted policy. Only selected processes are protected.#     mls - Multi Level Security protection.SELINUXTYPE=targeted##将文本中的SELINUX=enforcing，改为SELINUX=disabled。然后重启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即时有效：setenforce 0   </p><p>查看状态：getenforce</p><h2 id="链接网卡文件"><a href="#链接网卡文件" class="headerlink" title="链接网卡文件"></a><strong>链接网卡文件</strong></h2><p><strong>centos6</strong></p><pre class="line-numbers language-shell"><code class="language-shell">ln -s /etc/sysconfig/network-scripts/ifcfg-eth0 /root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>centos7</strong></p><pre class="line-numbers language-shell"><code class="language-shell">ln -s /etc/sysconfig/network-scripts/ifcfg-ens33 /root/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装常用服务"><a href="#安装常用服务" class="headerlink" title="安装常用服务"></a><strong>安装常用服务</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">yum -y install epel-release vim wget unzip gzip lrzsz git net-tools && yum -y install htop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改yum源"><a href="#修改yum源" class="headerlink" title="修改yum源"></a><strong>修改yum源</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">cd /etc/yum.repos.d/##进入系统中存储yum源的目录mv CentOS-Base.repo CentOS-Base.repo.J##备份系统自带的yum源wget http://mirrors.163.com/.help/CentOS7-Base-163.repo##下载网易yum源mv CentOS7-Base-163.repo CentOS-Base.repo##将下载的yum源文件改成系统自带yum源文件的名字yum makecache##创建元数据缓存yum -y update##更新系统yum源安装包 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis简单优化</title>
      <link href="/2019/03/19/redis/redis-jian-dan-you-hua/"/>
      <url>/2019/03/19/redis/redis-jian-dan-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="redis简单的优化"><a href="#redis简单的优化" class="headerlink" title="redis简单的优化"></a><strong>redis简单的优化</strong></h2><p>这里提供三种优化方案</p><ol><li>redis持久化</li><li>内存管理与数据淘汰机制</li><li>redis性能调优</li></ol><h2 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a><strong>redis持久化</strong></h2><p>redis持久化目前有二种模式，RDB，AOF</p><h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a><strong>RDB持久化</strong></h4><p>采用RDB持久方式，Redis会定期保存数据快照至一个rbd文件中，并在启动时自动加载rdb文件，恢复之前保存的数据。可以在配置文件中配置Redis进行快照保存的时机</p><p>在Redis中RDB持久化的触发分为两种：自己手动触发与Redis定时触发</p><p>针对RDB方式的持久化，手动触发可以使用<strong>：</strong></p><ol><li>save：会阻塞当前Redis服务器，直到持久化完成，线上应该禁止使用。</li><li>bgsave：该触发方式会fork一个子进程，由子进程负责持久化过程，因此阻塞只会发生在fork子进程的时候。</li></ol><p>而自动触发的场景主要是有以下几点：</p><ol><li>根据我们的 save m n 配置规则自动触发；</li><li>从节点全量复制时，主节点发送rdb文件给从节点完成复制操作，主节点会触发 bgsave；</li><li>执行 debug reload 时；</li><li>执行 shutdown时，如果没有开启aof，也会触发。</li></ol><p>RDB的优点：</p><ol><li>对性能影响最小。如前文所述，Redis在保存RDB快照时会fork出子进程进行，几乎不影响Redis处理客户端请求的效率。</li><li>每次快照会生成一个完整的数据快照文件，所以可以辅以其他手段保存多个时间点的快照（例如把每天0点的快照备份至其他存储媒介中），作为非常可靠的灾难恢复手段。</li><li>使用RDB文件进行数据恢复比使用AOF要快很多。</li></ol><p>RDB的缺点：</p><ol><li>快照是定期生成的，所以在Redis crash时或多或少会丢失一部分数据。</li><li>如果数据集非常大且CPU不够强（比如单核CPU），Redis在fork子进程时可能会消耗相对较长的时间（长至1秒），影响这期间的客户端请求</li></ol><p><strong>RDB的配置</strong></p><pre class="line-numbers language-shell"><code class="language-shell">save [seconds] [changes]##采用RDB持久方式，Redis会定期保存数据快照至一个rbd文件中，并在启动时自动加载rdb文件，恢复之前保存的数据。可以在配置文件中配置Redis进行快照保存的时机---------------------------------------------------------------------save 60 100##意为在[seconds]秒内如果发生了[changes]次数据修改，则进行一次RDB快照保存---------------------------------------------------------------------save 900 1save 300 10save 60 10000#####会让Redis每60秒检查一次数据变更情况，如果发生了100次或以上的数据变更，则进行RDB快照保存。可以配置多条save指令，让Redis执行多级的快照保存策略。Redis默认开启RDB快照，默认的RDB策略如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a><strong>AOF持久化</strong></h4><p>采用AOF持久方式时，Redis会把每一个写请求都记录在一个日志文件里。在Redis重启时，会把AOF文件中记录的所有写操作顺序执行一遍，确保数据恢复到最新</p><p>AOF的整个流程大体来看可以分为两步，</p><ol><li>命令的实时写入（如果是 appendfsync everysec 配置，会有1s损耗），</li><li>对aof文件的重写。</li></ol><p>对于增量追加到文件这一步主要的流程是：命令写入=》追加到aof_buf =》同步到aof磁盘。那么这里为什么要先写入buf在同步到磁盘呢？如果实时写入磁盘会带来非常高的磁盘IO，影响整体性能。</p><p>aof重写是为了减少aof文件的大小，可以手动或者自动触发，关于自动触发的规则请看上面配置部分。fork的操作也是发生在重写这一步，也是这里会对主进程产生阻塞。</p><p>手动触发： bgrewriteaof，自动触发 就是根据配置规则来触发，当然自动触发的整体时间还跟Redis的定时任务频率有关系。</p><p>在重写期间，由于主进程依然在响应命令，为了保证最终备份的完整性；因此它依然会写入旧的AOF file中，如果重写失败，能够保证数据不丢失。</p><p>为了把重写期间响应的写入信息也写入到新的文件中，因此也会为子进程保留一个buf，防止新写的file丢失数据。</p><p>重写是直接把当前内存的数据生成对应命令，并不需要读取老的AOF文件进行分析、命令合并。</p><p>AOF文件直接采用的文本协议，主要是兼容性好、追加方便、可读性高可认为修改修复</p><p>AOF的优点：</p><ol><li>最安全，在启用appendfsync always时，任何已写入的数据都不会丢失，使用在启用appendfsync everysec也至多只会丢失1秒的数据。</li><li>AOF文件在发生断电等问题时也不会损坏，即使出现了某条日志只写入了一半的情况，也可以使用redis-check-aof工具轻松修复。</li><li>AOF文件易读，可修改，在进行了某些错误的数据清除操作后，只要AOF文件没有rewrite，就可以把AOF文件备份出来，把错误的命令删除，然后恢复数据。</li></ol><p>AOF的缺点：</p><ol><li>AOF文件通常比RDB文件更大</li><li>性能消耗比RDB高</li><li>数据恢复速度比RDB慢</li></ol><p><strong>AOF的配置</strong></p><p>AOF默认是关闭的，如要开启，进行如下配置：</p><pre class="line-numbers language-shell"><code class="language-shell">appendonly yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>AOF提供了三种fsync配置，</p><ol><li>appendfsync no：不进行fsync，将flush文件的时机交给OS决定，速度最快</li><li>appendfsync always：每写入一条日志就进行一次fsync操作，数据安全性最高，但速度最慢</li><li>appendfsync everysec：折中的做法，交由后台线程每秒fsync一次</li></ol><pre class="line-numbers language-shell"><code class="language-shell">appendfsync everysec##通常使用折中的配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重写AOF文件</p><p>Redis提供了AOF rewrite功能，可以重写AOF文件，只保留能够把数据恢复到最新状态的最小写操作集</p><pre class="line-numbers language-shell"><code class="language-shell">auto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mb##上面两行配置的含义是，Redis在每次AOF rewrite时，会记录完成rewrite后的AOF日志大小，当AOF日志大小在该基础上增长了100%后，自动进行AOF rewrite。同时如果增长的大小没有达到64mb，则不会进行rewrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="内存管理与数据淘汰机制"><a href="#内存管理与数据淘汰机制" class="headerlink" title="内存管理与数据淘汰机制"></a><strong>内存管理与数据淘汰机制</strong></h2><h4 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a><strong>内存管理</strong></h4><p>最大内存设置,默认情况下，在32位OS中，Redis最大使用3GB的内存，在64位OS中则没有限制。</p><p>在使用Redis时，应该对数据占用的最大空间有一个基本准确的预估，并为Redis设定最大使用的内存。否则在64位OS中Redis会无限制地占用内存（当物理内存被占满后会使用swap空间）,容易引发各种各样的问题。</p><p>在内存占用达到了maxmemory后，再向Redis写入数据时，Redis会：</p><ol><li>根据配置的数据淘汰策略尝试淘汰数据，释放空间</li><li>如果没有数据可以淘汰，或者没有配置数据淘汰策略，那么Redis会对所有写请求返回错误，但读请求仍然可以正常执行</li></ol><p>在为Redis设置maxmemory时，需要注意：如果采用了Redis的主从同步，主节点向从节点同步数据时，会占用掉一部分内存空间，如果maxmemory过于接近主机的可用内存，导致数据同步时内存不足。所以设置的maxmemory不要过于接近主机可用的内存，留出一部分预留用作主从同步。</p><p>通过如下配置控制Redis使用的最大内存：</p><pre class="line-numbers language-shell"><code class="language-shell">maxmemory 751619276##本机自带内存只有1G，一般推荐Redis设置内存为最大物理内存的四分之三，所以设置0.75G，换成byte是751619276。也有mb格式的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="数据淘汰机制"><a href="#数据淘汰机制" class="headerlink" title="数据淘汰机制"></a><strong>数据淘汰机制</strong></h4><p>Redis提供了5种数据淘汰策略：</p><ol><li>volatile-lru：使用LRU算法进行数据淘汰（淘汰上次使用时间最早的，且使用次数最少的key），只淘汰设定了有效期的</li><li>key allkeys-lru：使用LRU算法进行数据淘汰，所有的key都可以被淘汰</li><li>volatile-random：随机淘汰数据，只淘汰设定了有效期的</li><li>key allkeys-random：随机淘汰数据，所有的key都可以被淘汰</li><li>volatile-ttl：淘汰剩余有效期最短的key</li></ol><p>最好为Redis指定一种有效的数据淘汰策略以配合maxmemory设置，避免在内存使用满后发生写入失败的情况。</p><p>一般来说，推荐使用的策略是volatile-lru，并辨识Redis中保存的数据的重要性。对于那些重要的，绝对不能丢弃的数据（如配置类数据等），应不设置有效期，这样Redis就永远不会淘汰这些数据。对于那些相对不是那么重要的，并且能够热加载的数据（比如缓存最近登录的用户信息，当在Redis中找不到时，程序会去DB中读取），可以设置上有效期，这样在内存不够时Redis就会淘汰这部分数据。</p><p><strong>配置方法：</strong></p><pre class="line-numbers language-shell"><code class="language-shell">maxmemory-policy volatile-lru #默认是noeviction，即不进行数据淘汰，常用的就是volatile-lru模式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Redis性能调优"><a href="#Redis性能调优" class="headerlink" title="Redis性能调优"></a><strong>Redis性能调优</strong></h2><p>尽管Redis是一个非常快速的内存数据存储媒介，也并不代表Redis不会产生性能问题。</p><p>针对Redis的性能优化，主要从下面几个层面入手：</p><ol><li>最初的也是最重要的，确保没有让Redis执行耗时长的命令</li><li>使用pipelining将连续执行的命令组合执行 操作系统的Transparent huge pages功能必须关闭：</li><li>如果在虚拟机中运行Redis，可能天然就有虚拟机环境带来的固有延迟。可以通过./redis-cli –intrinsic-latency 100命令查看固有延迟。同时如果对Redis的性能有较高要求的话，应尽可能在物理机上直接部署Redis。</li><li>检查数据持久化策略</li><li>考虑引入读写分离机制</li></ol><p><strong>关闭操作系统的Transparent huge pages功能</strong></p><pre class="line-numbers language-shell"><code class="language-shell">echo never >> /sys/kernel/mm/transparent_hugepage/enabledecho never >> /sys/kernel/mm/transparent_hugepage/defrag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis-主从模式加哨兵模式</title>
      <link href="/2019/03/18/redis/redis-zhu-cong-mo-shi-jia-shao-bing-mo-shi/"/>
      <url>/2019/03/18/redis/redis-zhu-cong-mo-shi-jia-shao-bing-mo-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>这章节只介绍redis主从配置跟哨兵配置，不会说明redis的安装</strong> </p><h2 id="redis主从模式"><a href="#redis主从模式" class="headerlink" title="redis主从模式"></a><strong>redis主从模式</strong></h2><p><strong>概要流程</strong>：</p><ol><li>slave服务器配置master的连接信息（slaveof属性）；</li><li>slave连接上master，发送psync指令</li><li>master判断是否为全量复制：如果是全量复制，则进入下一步；否则可以看增量复制的子流程。</li><li>master启动一个后台线程，生成一份RDB快照文件，同时将从客户端收到的所有写命令缓存在内存中。</li><li>RDB文件生成完毕之后，master会将RDB发送给slave。</li><li>slave收到RDB文件之后，清空自己的旧数据，然后持久化到本地磁盘，再从本地磁盘加载到内存中。 7</li><li>最后salve node保存了RDB文件之后，master会将内存中缓存的写命令发送给slave，slave也会同步这些数据。</li><li>如果slave node开启了AOF，那么会立即执行BGREWRITEAOF，重写AOF </li></ol><p><strong>增量复制子流程</strong>：如果全量复制过程中，master-slave网络连接断掉，salve重新连接master时，会触发增量复制；master直接从自己的backlog中获取部分丢失的数据，发送给slave node，默认backlog就是1MB；msater就是根据slave发送的psync中的offset来从backlog中获取数据的</p><p><strong>断点续传</strong>：从redis 2.8开始，就支持主从复制的断点续传，如果主从复制过程中，网络连接断掉了，那么可以接着上次复制的地方，继续复制下去，而不是从头开始复制一份 master node会在内存中常见一个backlog，master和slave都会保存一个replica offset还有一个master id，offset就是保存在backlog中的。如果master和slave网络连接断掉了，slave会让master从上次的replica offset开始继续复制；如果没有找到对应的offset，那么就会执行一次full resynchronization。</p><p><strong>无磁盘化复制</strong>：master在内存中直接创建rdb，然后发送给slave，不会在自己本地落地磁盘了 repl-diskless-sync repl-diskless-sync-delay，等待一定时长再开始复制，因为要等更多slave重新连接过来</p><p><strong>过期key处理</strong>：slave不会过期key，只会等待master过期key。如果master过期了一个key，或者通过LRU淘汰了一个key，那么会模拟一条del命令发送给slave。</p><p><strong>主从模式主要配置在于redis.conf配置文件</strong></p><pre class="line-numbers language-java"><code class="language-java">bind <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.20</span>   ##本机IP<span class="token keyword">protected</span><span class="token operator">-</span>mode yestcp<span class="token operator">-</span>backlog <span class="token number">1024</span>    ##连接数daemonize yes       ##后台运行slaveof <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.21</span> <span class="token number">6379</span>   ##这行配置，只需从配置，配置主的IP跟端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动的时候，主先启动，在启动从</strong></p><h2 id="redis哨兵模式"><a href="#redis哨兵模式" class="headerlink" title="redis哨兵模式"></a><strong>redis哨兵模式</strong></h2><p>任务：</p><p>有了主从复制的实现以后，如果想对主服务器进行监控，那么在redis2.6以后提供了一个”哨兵”的机制。顾名思义，哨兵的含义就是监控redis系统的运行状态。可以启动多个哨兵，去监控redis数据库的运行状态。其主要功能有两点: 　　</p><ol><li>监控所有节点数据库是否在正常运行。</li><li>master数据库出现故障时，可以自动通过投票机制，从slave节点中选举新的master，实现将从数据库转换为主数据库的自动切换。  　一个一主多从的Redis系统中，可以使用多个哨兵进行监控任务以保证系统足够稳健。此时，不仅哨兵会同时监控主数据库和从数据库，哨兵之间也会相互监控。在这里，建议大家哨兵至少部署3个，并且使用奇数个哨兵。  　Redis的哨兵(sentinel) 系统用于管理多个 Redis 服务器,该系统执行以下三个任务:<ol><li>监控(Monitoring): 哨兵(sentinel) 会不断地检查你的Master和Slave是否运作正常。</li><li>提醒(Notification):当被监控的某个 Redis出现问题时, 哨兵(sentinel) 可以通过 API 向管理员或者其他应用程序发送通知。</li><li>自动故障迁移(Automatic failover):当一个Master不能正常工作时，哨兵(sentinel) 会开始一次自动故障迁移操作,它会将失效Master的其中一个Slave升级为新的Master, 并让失效Master的其他Slave改为复制新的Master; 当客户端试图连接失效的Master时,集群也会向客户端返回新Master的地址,使得集群可以使用Master代替失效Master。 </li></ol></li></ol><p>工作原理：</p><p>哨兵(sentinel) 是一个分布式系统,你可以在一个架构中运行多个哨兵(sentinel) 进程,这些进程使用流言协议(gossipprotocols)来接收关于Master是否下线的信息,并使用投票协议(agreement protocols)来决定是否执行自动故障迁移,以及选择哪个Slave作为新的Master.</p><p>每个哨兵(sentinel) 会向其它哨兵(sentinel)、master、slave定时发送消息,以确认对方是否”活”着,如果发现对方在指定时间(可配置)内未回应,则暂时认为对方已挂(所谓的”主观认为宕机” Subjective Down,简称sdown). 若“哨兵群”中的多数sentinel,都报告某一master没响应,系统才认为该master”彻底死亡”(即:客观上的真正down机,Objective Down,简称odown),通过一定的vote算法,从剩下的slave节点中,选一台提升为master,然后自动修改相关配置.</p><p>虽然哨兵(sentinel) 释出为一个单独的可执行文件 redis-sentinel ,但实际上它只是一个运行在特殊模式下的 Redis 服务器，你可以在启动一个普通 Redis 服务器时通过给定 –sentinel 选项来启动哨兵(sentinel).</p><p>哨兵(sentinel) 的一些设计思路和zookeeper非常类似  </p><ol><li>监控 <ol><li>sentinel会每秒一次的频率与之前创建了命令连接的实例发送PING，包括主服务器、从服务器和sentinel实例，以此来判断当前实例的状态。down-after-milliseconds时间内PING连接无效，则将该实例视为主观下线。之后该sentinel会向其他监控同一主服务器的sentinel实例询问是否也将该服务器视为主观下线状态，当超过某quorum后将其视为客观下线状态。    </li><li>当一个主服务器被某sentinel视为客观下线状态后，该sentinel会与其他sentinel协商选出零头sentinel进行故障转移工作。每个发现主服务器进入客观下线的sentinel都可以要求其他sentinel选自己为领头sentinel，选举是先到先得。同时每个sentinel每次选举都会自增配置纪元，每个纪元中只会选择一个领头sentinel。如果所有超过一半的sentinel选举某sentinel领头sentinel。之后该sentinel进行故障转移操作。    </li><li>如果一个Sentinel为了指定的主服务器故障转移而投票给另一个Sentinel，将会等待一段时间后试图再次故障转移这台主服务器。如果该次失败另一个将尝试，Redis Sentinel保证第一个活性(liveness)属性，如果大多数Sentinel能够对话，如果主服务器下线，最后只会有一个被授权来故障转移。 同时Redis Sentinel也保证安全(safety)属性，每个Sentinel将会使用不同的配置纪元来故障转移同一台主服务器。   </li></ol></li><li>故障转移    <ol><li>首先是从主服务器的从服务器中选出一个从服务器作为新的主服务器。选点的依据依次是：网络连接正常-&gt;5秒内回复过INFO命令-&gt;10*down-after-milliseconds内与主连接过的-&gt;从服务器优先级-&gt;复制偏移量-&gt;运行id较小的。选出之后通过slaveif no ont将该从服务器升为新主服务器。    </li><li>通过slaveof ip port命令让其他从服务器复制该信主服务器。    </li><li>最后当旧主重新连接后将其变为新主的从服务器。注意如果客户端与就主服务器分隔在一起，写入的数据在恢复后由于旧主会复制新主的数据会造成数据丢失。    </li><li>故障转移成功后会通过发布订阅连接广播新的配置信息，其他sentinel收到后依据配置纪元更大来更新主服务器信息。Sentinel保证第二个活性属性：一个可以相互通信的Sentinel集合会统一到一个拥有更高版本号的相同配置上</li></ol></li></ol><p>哨兵机制是有缺点的</p><ol><li>主从服务器的数据要经常进行主从复制，这样造成性能下降。</li><li>当主服务器宕机后，从服务器切换成主服务器的那段时间，服务是不能用的。</li></ol><h4 id="哨兵配置"><a href="#哨兵配置" class="headerlink" title="哨兵配置"></a><strong>哨兵配置</strong></h4><p><strong>配置 sentinel.conf 哨兵配置文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">bind 192.168.0.20 ##IPdaemonize yes  ##后台运行sentinel monitor mymaster 192.168.0.21 6379 1  ##哨兵监控的mastersentinel down-after-milliseconds mymaster 5000  ##master或者slave多少时间（默认30秒）不能使用标记为down状态sentinel failover-timeout mymaster 9000   ##若哨兵在配置值内未能完成故障转移操作，则任务本次故障转移失败。sentinel auth-pass mymaster redispass  ##如果redis配置了密码，那这里必须配置认证，否则不能自动切换<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动哨兵</strong></p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/redis/src/redis-sentinel /usr/local/redis/sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TIME_WAIT状态跟CLOSE_WAIT状态的问题</title>
      <link href="/2019/03/11/tcp/time-wait-zhuang-tai-gen-close-wait-zhuang-tai-de-wen-ti/"/>
      <url>/2019/03/11/tcp/time-wait-zhuang-tai-gen-close-wait-zhuang-tai-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<h3 id="关于TCP协议的连接状态，分为以下几种"><a href="#关于TCP协议的连接状态，分为以下几种" class="headerlink" title="关于TCP协议的连接状态，分为以下几种"></a><strong>关于TCP协议的连接状态，分为以下几种</strong></h3><p><strong>LISTENING状态</strong></p><p>​    提供某一种服务，用于侦听远方TCP端口，当提供的服务没有被连接时，就会处于LISTENING状态，等待连接</p><p><strong>SYN_SENT状态</strong></p><p>​    SYN_SENT是客户端状态，客户端调用connect发送一个SYN请求建立连接，在发送连接请求后等待匹配的连接请求。</p><p><strong>SYN_RECEIVED状态</strong></p><p>​    SYN_RECEIVED是服务端状态，在收到和发送一个连接请求后，等待对方对连接请求的确认，当服务器收到客户端发送的同步信号时，将标志位ACK和SYN置1发送给客户端，此时服务     器端处于SYN_RCVD状态，如果连接成功了就变为ESTABLISHED，正常情况下SYN_RCVD状态非常短暂。</p><p><strong>ESTABLISHED状态</strong></p><p>​    ESTABLISHED状态是表示两台机器正在传输数据</p><p><strong>FIN-WAIT-1状态</strong></p><p>​    等待远程TCP连接中断请求，或先前的连接中断请求的确认，主动关闭端应用程序调用close，TCP发出FIN请求主动关闭连接，之后进入FIN_WAIT1状态</p><p><strong>FIN-WAIT-2状态</strong></p><p>​    从远程TCP等待连接中断请求，主动关闭端接到ACK后，就进入了FIN-WAIT-2 .这是在关闭连接时，客户端和服务器两次握手之后的状态，是著名的半关闭的状态了，在这个状态下，应     用程序还有接受数据的能力，但是已经无法发送数据，但是也有一种可能是，客户端一直处于FIN_WAIT_2状态，而服务器则一直处于WAIT_CLOSE状态，而直到应用层来决定关闭状态</p><p><strong>CLOSE-WAIT状态</strong></p><p>​    等待从本地用户发来的连接中断请求 ，被动关闭端TCP接到FIN后，就发出ACK以回应FIN请求(它的接收也作为文件结束符传递给上层应用程序),并进入CLOSE_WAIT</p><p><strong>CLOSING状态</strong></p><p>​    等待远程TCP对连接中断的确认,处于此种状态比较少见</p><p><strong>LAST-ACK状态</strong></p><p>​    等待原来的发向远程TCP的连接中断请求的确认,被动关闭端一段时间后，接收到文件结束符的应用程序将调用CLOSE关闭连接,TCP也发送一个 FIN,等待对方的ACK.进入LAST-ACK</p><p><strong>TIME-WAIT状态</strong></p><p>​    在主动关闭端接收到FIN后，TCP就发送ACK包，并进入TIME-WAIT状态,等待足够的时间以确保远程TCP接收到连接中断请求的确认,很大程度上保证了双方都可以正常结束,但是也存在     问题，须等待2MSL时间的过去才能进行下一次连接</p><p><strong>CLOSED状态</strong></p><p>​    被动关闭端在接受到ACK包后，就进入了closed的状态，连接结束，没有任何连接状态。</p><p><strong>最常用的状态有三个</strong></p><p>ESTABLISHED：表示正在通信</p><p>TIME_WAIT：表示主动关闭</p><p>CLOSE_WAIT：表示被动关闭</p><p><strong>以下附上二张图</strong></p><p><a href="http://92.linux91.cn/attachment/20190311/4961b8fb294944918beadc3fd8270f69.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/4961b8fb294944918beadc3fd8270f69.png" alt="img"></a></p><p><a href="http://92.linux91.cn/attachment/20190311/3f97e24a274e4c6d93af519d489e4d37.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/3f97e24a274e4c6d93af519d489e4d37.png" alt="img"></a></p><h3 id="处理TIME-WAIT状态"><a href="#处理TIME-WAIT状态" class="headerlink" title="处理TIME_WAIT状态"></a><strong>处理TIME_WAIT状态</strong></h3><p>TIME_WAIT是主动关闭连接的一方保持的状态。对于服务器来说，本身就是客户端，在完成一次连接传输任务后，就主动发起关闭连接，从而进入TIME_WAIT状态，状态保持2分钟，过了这时间之后，彻底回收资源</p><p>这设计思想是来由TCP/IP的设计者设计的，主要有以下二方面的考虑</p><ol><li>防止上一次连接中的包，迷路后重新出现，影响新连接，只有经过2分钟后，上一次连接中所有的数据才会完全消失</li><li>可靠的关闭TCP连，在主动关闭方发送的最后一个akc(fin)，有可能丢失，这时被动方会重新发送akc(fin)，如果这时主动方处于CLOSED状态，就会响应rst而不是akc(fin)，所以主动方要处于TIME_WAIT状态，而不能是CLOSED状态，另外这么设计TIME_WAIT会定时的回收资源，并不会占用很大的资源，除非短时间内接受了大量请求或攻击</li></ol><p>如果服务器因TIME_WAIT连接状态过多，影响到服务器的本身速度跟业务</p><p>解决方法，就是让服务缩短回收的时间，让快速回收和重用资源</p><p><strong>修改/etc/sysctl.conf文件</strong></p><pre class="line-numbers language-shell"><code class="language-shell">net.ipv4.tcp_syn_retries=2#对于一个新建连接，内核要发送多少个 SYN 连接请求才决定放弃,不应该大于255，默认值是5，对应于180秒左右时间#net.ipv4.tcp_synack_retries=2##注释这行配置行net.ipv4.tcp_keepalive_time=1200net.ipv4.tcp_orphan_retries=3#表示当keepalive起用的时候，TCP发送keepalive消息的频度。缺省是2小时，改为300秒net.ipv4.tcp_fin_timeout=30#表示如果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2状态的时间net.ipv4.tcp_max_syn_backlog = 4096#表示SYN队列的长度，默认为1024，加大队列长度为8192，可以容纳更多等待连接的网络连接数。net.ipv4.tcp_syncookies = 1#表示开启SYN Cookies。当出现SYN等待队列溢出时，启用cookies来处理，可防范少量SYN攻击，默认为0，表示关闭net.ipv4.tcp_tw_reuse = 1#表示开启重用。允许将TIME-WAIT sockets重新用于新的TCP连接，默认为0，表示关闭net.ipv4.tcp_tw_recycle = 1#表示开启TCP连接中TIME-WAIT sockets的快速回收，默认为0，表示关闭net.ipv4.tcp_keepalive_probes=5 ##减少超时前的探测次数 net.core.netdev_max_backlog=3000##优化网络设备接收队列 重要说明net.ipv4.tcp_tw_reuse和net.ipv4.tcp_tw_recycle##开启都是为了回收处于TIME_WAIT状态的资源。net.ipv4.tcp_fin_timeout##这个时间可以减少在异常情况下服务器从FIN-WAIT-2转到TIME_WAIT的时间。net.ipv4.tcp_keepalive_*##一系列参数，是用来设置服务器检测连接存活的相关配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以上的配置，来源于网上</strong></p><p><strong>修改完成后，执行以下的命令，让配置生效</strong></p><p>/sbin/sysctl -p</p><h3 id="处理CLOSE-WAIT状态"><a href="#处理CLOSE-WAIT状态" class="headerlink" title="处理CLOSE_WAIT状态"></a><strong>处理CLOSE_WAIT状态</strong></h3><p>如果连接一直保持在CLOSE_WAIT状态，那么只有一种情况，就是对方关闭连接之后，服务器程度自己没有发出ack信号。</p><p>也就是说，在对方关闭连接后，程序没有检测到，或者程序就不知道在这时候需要关闭连接，于是这个资源就一直被程度占着。</p><p>如果遇到CLOSE_WAIT状态过多的情况，可以考虑一下修改一下内核参数，如果内核参数解决不了，就只会是程序的问题，查代码</p><p>本人对CLOSE_WAIT状态处理理解不够深度，如果网友有更好的处理解决方案，麻烦请联系我，让我学习一下。</p>]]></content>
      
      
      <categories>
          
          <category> TCP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sort,wc,uniq,join</title>
      <link href="/2019/03/08/linux-ming-ling/sort-wc-uniq-join/"/>
      <url>/2019/03/08/linux-ming-ling/sort-wc-uniq-join/</url>
      
        <content type="html"><![CDATA[<h2 id="sort命令-排序命令"><a href="#sort命令-排序命令" class="headerlink" title="sort命令-排序命令"></a><strong>sort命令-排序命令</strong></h2><p>sort这命令主要用于排序</p><h3 id="使用格式："><a href="#使用格式：" class="headerlink" title="使用格式："></a><strong>使用格式：</strong></h3><p>建议配合选项来看</p><pre class="line-numbers language-java"><code class="language-java">sort <span class="token punctuation">[</span><span class="token operator">-</span>t分隔符<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>kn1<span class="token punctuation">,</span>n2<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token operator">-</span>nru<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a><strong>常用选项：</strong></h3><p>-n：使用“纯数字”进行排序(默认是以字母顺序来排序)，依照数值的大小排序</p><p>-r：反向排序，以相反的顺序来排序</p><p>-u：就是uniq，相同的数据中，仅出现一行代表</p><p>-t：分隔符，默认是用[tab]键来分隔</p><p>   &lt;分隔字符&gt;：指定排序时所用的栏位分隔字符； + &lt;起始栏位&gt; - &lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位</p><p>-k：以那个区间(field)来进行排序的意思</p><h3 id="剩下的选项："><a href="#剩下的选项：" class="headerlink" title="剩下的选项："></a><strong>剩下的选项：</strong></h3><p>-b：忽略每行前面开始出的空格字符；</p><p>-c：检查文件是否已经按照顺序排序；</p><p>-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；</p><p>-f：排序时，将小写字母视为大写字母；</p><p>-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；</p><p>-m：将几个排序号的文件进行合并；</p><p>-M：将前面3个字母依照月份的缩写进行排序；</p><p>-o &lt;输出文件&gt;：将排序后的结果存入制定的文件；</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><h4 id="使用sort对passwd文件进行排序，最简单的方式"><a href="#使用sort对passwd文件进行排序，最简单的方式" class="headerlink" title="使用sort对passwd文件进行排序，最简单的方式"></a><strong>使用sort对passwd文件进行排序，最简单的方式</strong></h4><p>没有指任何的参数，所以默认以英文字母顺序排序</p><pre class="line-numbers language-java"><code class="language-java">cat <span class="token operator">/</span>etc<span class="token operator">/</span>passwd <span class="token operator">|</span> sort<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="使用sort对passwd文件进行排序，以第三列数字顺序进行排序"><a href="#使用sort对passwd文件进行排序，以第三列数字顺序进行排序" class="headerlink" title="使用sort对passwd文件进行排序，以第三列数字顺序进行排序"></a><strong>使用sort对passwd文件进行排序，以第三列数字顺序进行排序</strong></h4><p>通过指定分隔符“:”，指定对应的列进行排序，</p><p>k3是表示以“:”作为分隔符的第三列进行排序</p><p>由于第三列都是数字组成，需要添加“-n”参数</p><pre class="line-numbers language-java"><code class="language-java">cat <span class="token operator">/</span>etc<span class="token operator">/</span>passwd <span class="token operator">|</span> sort <span class="token operator">-</span>t<span class="token string">':'</span> <span class="token operator">-</span>k3 <span class="token operator">-</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="uniq命令-重复检测命令"><a href="#uniq命令-重复检测命令" class="headerlink" title="uniq命令-重复检测命令"></a><strong>uniq命令-重复检测命令</strong></h2><p>unziq命令主要用于检查及删除文本文件中重复出现的行，一般是与sort结合使用</p><h3 id="常用选项：-1"><a href="#常用选项：-1" class="headerlink" title="常用选项："></a><strong>常用选项：</strong></h3><p>-c / –count：在每列旁边显示该行重复出现的次数，显示输出中，在每行行首加上本行在文件中出现的次数</p><p>-d / –repeated：仅显示重复出现的列，即出现次数&gt;=2的行，且只打印一次</p><p>-u / –unique：仅显示不重复的行，只显示唯一的行，即出现次数等于1的行</p><h3 id="剩下的选项：-1"><a href="#剩下的选项：-1" class="headerlink" title="剩下的选项："></a><strong>剩下的选项：</strong></h3><p>-D/–all-repeated[=delimit-method]：仅显示重复的行，即出现次数&gt;=2的行，且打印重复行的所有行。其中delimit-method表示对重复行集合的分隔方式，有三种取值，分别为none、prepend和separate。其中none表示不进行分隔，为默认选项，uniq -D等同于uniq –all-repeated=none；prepend表示在每一个重复行集合前面插入一个空行；separate表示在每个重复行集合间插入一个空行。</p><p>-f / –skip-fields=N：忽略前N个字段。字段由空白字符（空格符、Tab）分隔。如果您的文档的行被编号，并且您希望比较行中除行号之外的所有内容。如果指定了选项-f 1，</p><p>​    那么下面相邻的两行：</p><p>​       1 这是一条线。</p><p>​       2 这是一条线。</p><p>​         将被认为是相同的。如果没有指定-f选项，它们将被认为是唯一的。</p><p>-i / –ignore-case：忽略大小写字符的不同</p><p>-s / –skip-chars=N:跳过前面N个字符不比较</p><p>-w / –check-chars=N：指定每行要比较的前N个字符数</p><p>–help：显示帮助信息</p><p>–version：显示版本信息</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a><strong>实例：</strong></h3><h4 id="uniq的单独使用"><a href="#uniq的单独使用" class="headerlink" title="uniq的单独使用"></a><strong>uniq的单独使用</strong></h4><p>uniq只能删除相邻的重复行，如果不是相邻的重复行，就无法单独使用uniq使用</p><p><strong>使用uniq删除unip文件中的重复行</strong></p><pre class="line-numbers language-java"><code class="language-java">uniq unip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>也可以使用-c参数来统计重复行出现的次数</strong></p><pre class="line-numbers language-java"><code class="language-java">uniq unip <span class="token operator">-</span>c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="uniq加sort使用"><a href="#uniq加sort使用" class="headerlink" title="uniq加sort使用"></a><strong>uniq加sort使用</strong></h4><p>如果想要删除不相邻的重复行，就要使用sort先进行排序，让不相邻的行，变成相邻的</p><p><strong>删除unip文件中所有的重复行后输出</strong></p><pre class="line-numbers language-java"><code class="language-java">sort unip <span class="token operator">|</span> uniq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>可以加上-d参数，只显示重复的行</strong></p><pre class="line-numbers language-java"><code class="language-java">sort unip <span class="token operator">|</span> uniq <span class="token operator">-</span>d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="join命令"><a href="#join命令" class="headerlink" title="join命令"></a><strong>join命令</strong></h2><p>join命令用于将两个文件中，指定列中内容相同的行连接起来，</p><p>找出两个文件中，指定列内容相同的行，加以合并，在输出</p><h3 id="常用选项：-2"><a href="#常用选项：-2" class="headerlink" title="常用选项："></a><strong>常用选项：</strong></h3><p>-t：join默认以空格符分隔数据，并且对比第一个字段的数据，如果两个文件相同，则将两笔数据联成一行，并第一个字段放在行首</p><p>-i：忽略大小写的差异</p><p>-1：这个是数据的1，代表第一个文件要用那个字段来分析的意思</p><p>-2：这个是数据的2，代表第二个文件要用那个字段来分析的意思</p><h3 id="其它选项："><a href="#其它选项：" class="headerlink" title="其它选项："></a><strong>其它选项：</strong></h3><p>-a&lt;1或2&gt;：除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。</p><p>-e&lt;字符串&gt;：若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</p><p>-i / –igore-case：比较栏位内容时，忽略大小写的差异。</p><p>-o&lt;格式&gt;：按照指定的格式来显示结果。</p><p>-v&lt;1或2&gt;：跟-a相同，但是只显示文件中没有相同栏位的行。</p><p>–help：显示帮助。</p><p>–version：显示版本信息。</p>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打包压缩命令，tar,gzip,bzip2</title>
      <link href="/2019/03/01/linux-ming-ling/da-bao-ya-suo-ming-ling-tar-gzip-bzip2/"/>
      <url>/2019/03/01/linux-ming-ling/da-bao-ya-suo-ming-ling-tar-gzip-bzip2/</url>
      
        <content type="html"><![CDATA[<h2 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a><strong>tar命令</strong></h2><p>tar是linux下经常使用的归档工具，是对文件或者目录进行打包归档，归成一个文件</p><h3 id="格式："><a href="#格式：" class="headerlink" title="格式："></a><strong>格式：</strong></h3><p>tar [主选项+辅助选项] 文件或目录</p><h3 id="主选项："><a href="#主选项：" class="headerlink" title="主选项："></a><strong>主选项：</strong></h3><p>-c：创建新的文件</p><p>-r：把要归档的文件追加到档案文件的末尾</p><p>-t：列出档案文件中已经归档的文件列表</p><p>-x：从打包的档案文件中还原出文件</p><p>-u：更新档案文件，用新的文件替换档案中的原始文件</p><h3 id="辅助选项："><a href="#辅助选项：" class="headerlink" title="辅助选项："></a><strong>辅助选项：</strong></h3><p>-z：调用gzip命令在文件打包的过程中进行压缩或解压文件</p><p>-w：在还原文件时，把所有文件的修改时间设定为现在时间</p><p>-j：调用bzip2命令在文件打包的过程中进行压缩或解压文件</p><p>-Z：调用compress命令过滤档案</p><p>-f：”-f”选项后面紧跟档案文件的存储设备，默认是磁盘，需要指定档案文件名，如果是磁带，只需指定磁带设备名即可。</p><p>   注意：在”-f”选项之后不能跟其它任何选项，也就是说”-f”必须是tar命令的最后一个选项</p><p>-v：指定在创建归档文件过程中，显示各个归档文件的名称</p><p>-p：在文件归档的过程中，保持文件的属性不发生变化</p><p>-N：”yyy/mm/dd”在指定日期之后的文件才会被打包到档案文件中</p><p>–exclude： file 在打包的过程中，不将指定file文件打包</p><h2 id="tar实例跟实战"><a href="#tar实例跟实战" class="headerlink" title="tar实例跟实战"></a><strong>tar实例跟实战</strong></h2><h4 id="打包指定目录下的所有文件到指定的目录中"><a href="#打包指定目录下的所有文件到指定的目录中" class="headerlink" title="打包指定目录下的所有文件到指定的目录中"></a><strong>打包指定目录下的所有文件到指定的目录中</strong></h4><p>将当前目录中的date目录打包到date目录中，打包的路径和名字是由自己设置</p><p>一般会在名字后面加上.tar标识，方便识别</p><pre class="line-numbers language-shell"><code class="language-shell">打包：tar -cvf /root/date.tar date/解包：tar -xf date.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打包压缩指定目录下的所有文件到指定的目录中（-gz）"><a href="#打包压缩指定目录下的所有文件到指定的目录中（-gz）" class="headerlink" title="打包压缩指定目录下的所有文件到指定的目录中（.gz）"></a><strong>打包压缩指定目录下的所有文件到指定的目录中（.gz）</strong></h4><p>将当前目录中的date目录打包压缩到date目录中，打包压缩的路径和名字是由自己设置</p><p>一般会在名字后面加上.tar.gz标识，方便识别</p><p>-zcvf选项是代表打包完成后调用gzip命令进行压缩</p><pre class="line-numbers language-shell"><code class="language-shell">压缩：tar -zcvf /root/date.tar.gz /data/解压：tar -zxvf date.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打包压缩指定目录下的所有文件到指定的目录中（-bz2）"><a href="#打包压缩指定目录下的所有文件到指定的目录中（-bz2）" class="headerlink" title="打包压缩指定目录下的所有文件到指定的目录中（.bz2）"></a><strong>打包压缩指定目录下的所有文件到指定的目录中（.bz2）</strong></h4><p>将当前目录中的date目录打包压缩到date目录中，打包压缩的路径和名字是由自己设置</p><p>一般会在名字后面加上.tar.bz2标识，方便识别</p><p>-jcvf选项是代表打包完成后调用bzip2命令进行压缩</p><p>注意，如果压缩报错，正常是bzip2没有安装</p><pre class="line-numbers language-shell"><code class="language-shell">压缩：tar -jcvf /root/date.tar.bz2 /data/解压：tar -jxvf date.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查阅压缩包中的内容"><a href="#查阅压缩包中的内容" class="headerlink" title="查阅压缩包中的内容"></a><strong>查阅压缩包中的内容</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">查看.gz压缩包中的内容tar -ztvf data.tar.gz查看.bz2压缩包中的内容tar -jtvf data.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打包的时候，保留文件的原权限"><a href="#打包的时候，保留文件的原权限" class="headerlink" title="打包的时候，保留文件的原权限"></a><strong>打包的时候，保留文件的原权限</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">tar -zcvpf data.tar.gz /data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压指定压缩包中的文件"><a href="#解压指定压缩包中的文件" class="headerlink" title="解压指定压缩包中的文件"></a><strong>解压指定压缩包中的文件</strong></h4><p>解压前要先查阅一下压缩包的内容。找到需要的文件，记录好所需要的文件的路径，在通过以下的命令就可以解压出所需的文件</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf data.tar.gz data/1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="压缩指定日期的文件"><a href="#压缩指定日期的文件" class="headerlink" title="压缩指定日期的文件"></a><strong>压缩指定日期的文件</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">tar -N "2019/3/7" -zcvf d.tar.gz /data/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="打包压缩目录下除了eso目录中的1文件，其它都打包压缩"><a href="#打包压缩目录下除了eso目录中的1文件，其它都打包压缩" class="headerlink" title="打包压缩目录下除了eso目录中的1文件，其它都打包压缩"></a><strong>打包压缩目录下除了eso目录中的1文件，其它都打包压缩</strong></h4><p>–exclude选项只能去除文件，不能去除目录</p><pre class="line-numbers language-shell"><code class="language-shell">tar --exclude /data/eso/1 -zcvf s.tar.gz /data/*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="将data目录打包压缩后直接解压到当前目录中"><a href="#将data目录打包压缩后直接解压到当前目录中" class="headerlink" title="将data目录打包压缩后直接解压到当前目录中"></a><strong>将data目录打包压缩后直接解压到当前目录中</strong></h4><p>不生成档案文件，就是不生成压缩文件</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zcvf - /data/ | tar -zxvf-<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压到指定的路径下"><a href="#解压到指定的路径下" class="headerlink" title="解压到指定的路径下"></a><strong>解压到指定的路径下</strong></h4><p>使用-C选项</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zxvf data.tar.gz -C /tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="gzip-gunzip命令"><a href="#gzip-gunzip命令" class="headerlink" title="gzip/gunzip命令"></a><strong>gzip/gunzip命令</strong></h2><p>gzip/gunzip命令用于将一般文件进行压缩或解压的，压缩文件预设的扩展名为“.gz”</p><p>gunzip是gzip的硬链接，因此无论是压缩或者解压都可以通过gzip来实现</p><p>注意：gzip只能对文件压缩，不能压缩目录，即使指定压缩目录，也只会压缩目录内的所有文件</p><h3 id="格式：-1"><a href="#格式：-1" class="headerlink" title="格式："></a><strong>格式：</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">gzip  [选项]   [压缩/解压]   [文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="选项："><a href="#选项：" class="headerlink" title="选项："></a><strong>选项：</strong></h3><p>-d：对压缩的文件进行解压</p><p>-r：递归式压缩指定目录以及子目录下的所有文件</p><p>-t：检查压缩文件的完整性</p><p>-v：对于每个压缩和解压的文件，显示相应的文件名和压缩比</p><p>-l：显示压缩文件的压缩信息，显示字段为压缩文件大小，未压缩文件大小，压缩比和未压缩文件名称</p><p>-num：用指定的数字num配置压缩比，“-1”或“-fast” 表示最低压缩比，“-9”或“-best”表示最高压缩比，系统默认压缩比为6</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a><strong>实例</strong></h3><h4 id="使用gzip压缩级别为9"><a href="#使用gzip压缩级别为9" class="headerlink" title="使用gzip压缩级别为9"></a><strong>使用gzip压缩级别为9</strong></h4><p>先将jpress目录下的所有文件以及子目录进行压缩</p><p>然后在对压缩好的文件进行gzip压缩，设置gzip压缩级别为9</p><pre class="line-numbers language-shell"><code class="language-shell">压缩zip jpress.zip jpress/再度压缩gzip -9v jpress.zip <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看压缩文件的压缩信息"><a href="#查看压缩文件的压缩信息" class="headerlink" title="查看压缩文件的压缩信息"></a><strong>查看压缩文件的压缩信息</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost ~]# gzip -l jpress.zip.gz          compressed        uncompressed  ratio uncompressed_name                115                 164  47.6% jpress.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="解压文件到当前目录"><a href="#解压文件到当前目录" class="headerlink" title="解压文件到当前目录"></a><strong>解压文件到当前目录</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">使用gzip/gunzip解压gzip -d jpress.zip.gz / gunzip jpress.zip.gz解压后，还有一层，因为我们上面使用了zip压缩unzip jpress.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bzip2-bunzip2命令"><a href="#bzip2-bunzip2命令" class="headerlink" title="bzip2/bunzip2命令"></a><strong>bzip2/bunzip2命令</strong></h2><p>bzip2/bunzip2命令用于对文件进行压缩或解压，这命令类似于“gzip”命令</p><p>只能对文件进行压缩，对于目录只能压缩目录下的所有文件，压缩完成后，在目录下生成以“.bz2”的后缀压缩包</p><p>bunzip是bzip2的符号链接，即软链接，因此压缩解压都可以通过bzip2来实现</p><h3 id="格式：-2"><a href="#格式：-2" class="headerlink" title="格式："></a><strong>格式：</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">bzip2  [选项]   [压缩/解压的文件]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="选项：-1"><a href="#选项：-1" class="headerlink" title="选项："></a><strong>选项</strong>：</h3><p>-d：执行解压，此时选项后面要跟着解压的文件</p><p>-v：压缩或解压文件时，显示详细信息</p><p>-k：bzip2在压缩或解压后，会删除原始文件，若要保留原始文件，可使用这选项</p><p>-f：bzip2的压缩或解压时，若输出文件与现有的文件同名，默认不会覆盖现有文件，若要覆盖，可使用这选项</p><p>-t：测试“.bz2”压缩文件的完整性</p><p>压缩级别：压缩级别可以从1-9中选取，数字越大，压缩率越高</p><h4 id="将jpress-zip压缩包进行压缩，设置压缩率为最高，同时在压缩完后不删除原始文件，显示压缩过程的详细信息"><a href="#将jpress-zip压缩包进行压缩，设置压缩率为最高，同时在压缩完后不删除原始文件，显示压缩过程的详细信息" class="headerlink" title="将jpress.zip压缩包进行压缩，设置压缩率为最高，同时在压缩完后不删除原始文件，显示压缩过程的详细信息"></a><strong>将jpress.zip压缩包进行压缩，设置压缩率为最高，同时在压缩完后不删除原始文件，显示压缩过程的详细信息</strong></h4><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost data]# bzip2 -9vk jpress.zip   jpress.zip:  1.086:1,  7.366 bits/byte,  7.93% saved, 164 in, 151 out.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找并清除僵死的进程</title>
      <link href="/2019/03/01/linux/cha-zhao-bing-qing-chu-jiang-si-de-jin-cheng/"/>
      <url>/2019/03/01/linux/cha-zhao-bing-qing-chu-jiang-si-de-jin-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="僵尸进程的产生"><a href="#僵尸进程的产生" class="headerlink" title="僵尸进程的产生"></a><strong>僵尸进程的产生</strong></h2><p>停止进程的方法有很多，但进程停止后有些信息对父进程和内核还是有用的，</p><p>例如进程的退出状态，进程运行的CPU时间，进程的ID号等，</p><p>因此进程在终止时，会回收所有内核给予分配的内存，关闭进程打开的所有文件等，</p><p>但是还是会保留极少的信息，来供父进程使用，父进程可以使用wait/waitpid等系统调用来为子进程做点收尾工作。</p><p>因此，一个僵尸进程产生的过程是，父进程调用fork创建子进程后，子进程运行直终止，它立即从内存中移除，</p><p>但进程描述符仍然保留在内存中(进程描述符占用极少的内存空间)，子进程的状态变成EXIT_ZOMBIE，</p><p>并且向父进程发送SIGCHLD信号，父进程此时应该调用wait()系统来获取子进程的退出状态以及其它相关的信息，</p><p>在wait调用过后，僵尸进程就会完全从内存中移除，因此一个僵尸进程存在到终止到父进程调用wait函数的时间之间，一般很快就会消失，</p><p>但如果编程不合理，父进程从不调用wait等系统来收集僵尸进程，那么这些进程会一直存在内存中，最后形成僵尸进程</p><h2 id="检测系统中的僵尸进程"><a href="#检测系统中的僵尸进程" class="headerlink" title="检测系统中的僵尸进程"></a><strong>检测系统中的僵尸进程</strong></h2><p>这里提供一个方法</p><pre class="line-numbers language-shell"><code class="language-shell">ps -e -o stat,ppid,pid,cmd | egrep '^[Zz]'stat:状态信息ppid：父进程pidpid：当前进程的pidcmd：即进程的可执行文件ps：用于查询系统进程    -e：用于列出所有的进程    -o：用于设定输出的格式egrep：正则表达式查询工具    '^[Zz]'：正则表达式，僵尸进程的状态信息是以z或Z字母开头<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过查询出来的pid来进行kill杀死僵尸进程</p><p>kill其实是将僵尸进程的父进程杀掉，进而关闭僵尸进程</p><p>因为僵尸进程已经是死掉的进程，不可能在接收任何信号</p><p>所以就需要通过kill了僵尸进程的父进程，这样父进程杀掉后，僵尸进程就成为孤儿进程</p><p>而所有的孤儿进程都会交给系统的1号进程(init或systemd)收养，1号进程会周期性的去调用wait系统来清除僵尸进程，</p><p>因为将僵尸的父进程杀掉之后，僵尸进程也会跟着消失，这也是1号进程的作用</p><h2 id="避免产生僵尸进程"><a href="#避免产生僵尸进程" class="headerlink" title="避免产生僵尸进程"></a><strong>避免产生僵尸进程</strong></h2><p>kill僵尸进程，是治标不治本，最好的方法，就是不让其产生僵尸进程</p><p><strong>第一个办法</strong></p><p>在父进程创建子进程之前，就向系统申明自己并不会对这个子进程的exit动作进行任何关注行为，</p><p>这样，子进程一旦退出了，系统也不会去等待父进程的操作，而是真的将子进程的资源回收，这样就不会产生僵尸进程了</p><p><strong>第二个办法</strong></p><p>在父进程创建子进程的时候，连续调用再次fork()，而且使紧跟的子进程直接退出，使子进程变成孤儿进程，</p><p>从而让1号进程接替父进程，来清除孤儿进程，这样父进程就无需任何的清理行为，系统会自动处理</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存状态监测工具-smem命令</title>
      <link href="/2019/02/28/linux-ming-ling/nei-cun-zhuang-tai-jian-ce-gong-ju-smem-ming-ling/"/>
      <url>/2019/02/28/linux-ming-ling/nei-cun-zhuang-tai-jian-ce-gong-ju-smem-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="smem"><a href="#smem" class="headerlink" title="smem"></a><strong>smem</strong></h2><p>smem是一款打印内存使用情况的工具，它可以给用户提供内存使用的多种报告，它跟传统的内存工具不同的是，它有一个独特的功能，就是可以提供PSS报告</p><p>smem在centos中是没有预装的，可以直接yum安装</p><h2 id="smem界面"><a href="#smem界面" class="headerlink" title="smem界面"></a>smem界面</h2><p>在我们执行命令就会几列，最重要就有四列：Swap USS PSS RSS</p><p><strong>swap</strong></p><p>虚拟耗用内存（包含共享库占用的内存）</p><p>如果系统使用到了虚拟内存（virtual memory），因此要准确的计算出一个进程的实际占用的物理内存就不是那么简单，只知道进程的虚拟内存大小也并没有太大用处，因为还是无法获取到实际分配的物理内存大小</p><p><strong>USS</strong></p><p>进程独自占用的内存，只计算了进程独自占用的内存大小（不包含共享库占用的内存）</p><p><strong>PSS</strong></p><p>实际使用的物理内存（比例分配共享库占用的内存）</p><p>所有使用某共享库的程序均分该共享库占用的内存时，显然所有进程的PSS之和就是系统的内存使用量，它会更准确一点，它将共享内存的大小进行平均后，再分摊到各个进程上去</p><p><strong>RSS</strong></p><p>实际使用物理内存（包含共享库占用的内存）</p><p>使用top命令可以查询得到RSS内存值，是最常用常见的内存指标，表示进程占用的物理内存大小。</p><p>但是，将各进程的RSS相加起来，通常都会超过整个系统的内存消耗，因为RSS中包含了各个进程间共享的内存</p><h2 id="smem命令选项"><a href="#smem命令选项" class="headerlink" title="smem命令选项"></a><strong>smem命令选项</strong></h2><p>-H：不显示标题</p><p>-c：显示指定的那行列</p><p>  例：smem -c uss</p><p>-t：在最后，增加一行用于显示总数</p><p>-R：显示物理RAM数量</p><p>-K：显示核映象路径</p><p>-m：PSS显示映射</p><p>-u：表示显示用户占用内存信息</p><p>-w：显示整个系统内存信息</p><p>-P：显示指定关键字的相关信息</p><p>  例：smem -P mysql</p><p>-M： 用指定关键字在command列中查询、</p><p>  例：smem -M httpd</p><p>-U：用指定关键字在user列中查询</p><p>  例：smem -U apache</p><p>-n：让user列以数字的方式显示</p><p>-s：让指定的列进行排序</p><p>  例：smem -s user</p><p>-r：让显示的内容进行反向排序</p><p>  例：smem -r</p><p>-p：以百分比的方式来显示内存信息</p><p>-k：用于显示内存单元</p><h2 id="查找当前占用cpu或内存最多的几个进程"><a href="#查找当前占用cpu或内存最多的几个进程" class="headerlink" title="查找当前占用cpu或内存最多的几个进程"></a><strong>查找当前占用cpu或内存最多的几个进程</strong></h2><p>用一些命令组合起来，就可以实现</p><p><strong>获取当前cpu使用率最高的前十个进程</strong></p><pre class="line-numbers language-java"><code class="language-java">ps aux <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ps aux <span class="token operator">|</span> sort <span class="token operator">-</span>rn <span class="token operator">-</span>k3 <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这命令主要分成二部分，拆出来就行容易理解</p><pre class="line-numbers language-java"><code class="language-java">ps aux <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">1</span>    ##主要用于获取标题ps aux <span class="token operator">|</span> sort <span class="token operator">-</span>rn <span class="token operator">-</span>k3 <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">10</span>    ##主要获取cpu使用最高前十名进程    ##sort命令稍后有记录    ##head <span class="token operator">-</span><span class="token number">10</span> 是获取前<span class="token number">10</span>行的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>获取当前内存使用率最高的前十个进程</strong></p><pre class="line-numbers language-java"><code class="language-java">ps aux <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>ps aux <span class="token operator">|</span> sort <span class="token operator">-</span>rn <span class="token operator">-</span>k4 <span class="token operator">|</span> head <span class="token operator">-</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上使用的命令跟获取cpu的命令一样，只是-k的值有点变化，因为在ps命令中%MEM列，排在第四列</p><h2 id="sort命令"><a href="#sort命令" class="headerlink" title="sort命令"></a><strong>sort命令</strong></h2><p>sort通常被用于排序来使用</p><p>语法：sort(选项)(参数)</p><p><strong>选项</strong></p><ol><li>-b：忽略每行前面开始出的空格字符；</li><li>-c：检查文件是否已经按照顺序排序；</li><li>-d：排序时，处理英文字母、数字及空格字符外，忽略其他的字符；</li><li>-f：排序时，将小写字母视为大写字母；</li><li>-i：排序时，除了040至176之间的ASCII字符外，忽略其他的字符；</li><li>-m：将几个排序号的文件进行合并；</li><li>-M：将前面3个字母依照月份的缩写进行排序；</li><li>-n：依照数值的大小排序；</li><li>-o &lt;输出文件&gt;：将排序后的结果存入制定的文件；</li><li>-r：以相反的顺序来排序；</li><li>-t &lt;分隔字符&gt;：指定排序时所用的栏位分隔字符；</li><li>+ &lt;起始栏位&gt; - &lt;结束栏位&gt;：以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>top系列</title>
      <link href="/2019/02/22/linux-ming-ling/top-xi-lie/"/>
      <url>/2019/02/22/linux-ming-ling/top-xi-lie/</url>
      
        <content type="html"><![CDATA[<h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a><strong>htop</strong></h2><p>htop是top的升级版，htop跟top相比，htop更加人性化，支持用户界面互动操作，支持颜色主题，支持鼠标操作等</p><p>htop在centos中是没有预装的，可以直接yum安装</p><h3 id="htop的使用"><a href="#htop的使用" class="headerlink" title="htop的使用"></a><strong>htop的使用</strong></h3><p>打开htop的界面，htop的界面一共分为五大展示区，分别是cpu展示区，内存展示区，整体状态区，进程状态区，和管理控制台</p><p><strong>cpu展示区</strong></p><p>在cpu展示区中，是通过进度条来显示每个cpu的逻辑核使用的百分比，还以颜色来进行区分</p><ol><li>蓝色：表示low-prority使用</li><li>绿色：表示normal使用情况</li><li>红色：表示kernel使用情况</li><li>青色：表示vistualiz使用情况</li></ol><p><strong>内存展示区</strong></p><p>主要分为物理内存跟swap虚拟内存的状态，也是用颜色来区分的</p><p><strong>物理内存</strong></p><ol><li>绿色：表示已经使用内存情况</li><li>蓝色：缓冲的内存使用情况</li><li>黄色：表示用于缓存的内存使用情况</li></ol><p><strong>swap虚拟内存</strong>，主要是显示交换分区的使用情况</p><p><strong>整体状态区</strong></p><p>整体状态区，不同上面二个展示区，他是以字母跟数字来显示的</p><ol><li>Tasks项：显示的是进程总数跟当前运行的进程数</li><li>Load average项：展示的是系统1分钟，5分钟，10分钟的平均负载情况</li><li>Uptime项：显示系统运行了多长时间</li></ol><p><strong>进程状态区</strong></p><p>进程状态区是展示当前系统中所有的进程，默认有12列</p><ol><li>PID：进程标志号</li><li>USER：进程所有者的用户名</li><li>PRI：进程的优先级别</li><li>NI：进程的优先级别数值</li><li>VIRT：进程占用的虚拟内存值</li><li>RES：进程占用的物理内存值</li><li>SHR：进程使用的共享内存值</li><li>S：进程的状态(其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数)</li><li>%CPU：该进程占用的CPU使用率</li><li>%MEM：该进程占用的物理内存和总内存的百分比</li><li>TIME+：该进程启动后占用的总的CPU时间</li><li>COMMAND：进程启动的启动命令名称</li></ol><p><strong>管理控制台</strong></p><p>管理控制台控制着进程的展示方式，在进程控制台有F1-F10的功能键，也有跟F1-F10对应的快捷键</p><ol><li>F1： 查看htop使用说明，快捷键(h, ?)</li><li>F2： htop 设定，快捷键(S)</li><li>F3： 搜索进程，快捷键(/)</li><li>F4： 进程过滤器，快捷键()</li><li>F5： 显示树形结构，快捷键(t)</li><li>F6： 折叠或展开（新版本），或选择排序方式(老版本)，快捷键(&lt;,&gt;)</li><li>F7： 可减少nice值，这样就可以提高对应进程的优先级，快捷键([)</li><li>F8： 可增加nice值，这样就可以降低对应进程的优先级 ，快捷键(])</li><li>F9： 可对进程传递信号，快捷键(k)</li><li>F10： 结束htop,退出，快捷键(q)</li></ol><p>要对htop的输出和展示进行设置，可鼠标点击管理控制台下的Setup或者按下F2键， 之后即可进入htop 设定的页面，Meters页面设定了顶端的一些信息显示，</p><p>顶端的显示又分为左右两侧，到底能显示些什么可以在最右侧那栏新增，要新增到上方左侧（按键F5即可）或是右侧（按键F6即可）都可以，这就是个人设定的范围了</p><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a><strong>iotop</strong></h2><p>iotop是一个用来监视磁盘I/O使用状况的top类工具，能监测到哪个进程所占的磁盘I/O值的实时信息，磁盘写入的速率，I/O的占比，磁盘的读写状态</p><p>iotop在centos中是没有预装的，可以直接yum安装</p><p>iotop的界面比较简单易懂，我就不多解释</p><h3 id="iotop的选项"><a href="#iotop的选项" class="headerlink" title="iotop的选项"></a><strong>iotop的选项</strong></h3><ol><li>-p：指定进程ID，显示该进程的IO情况</li><li>-u：指定用户名，显示该用户所有的进程IO情况</li><li>-P：–processes，只显示进程，默认为显示所有的线程</li><li>-k：–kilobytes，以千字节显示</li><li>-t：–time，在每一行前添加一个当前的时间另外，iotop还支持交互模式，在交互模式下，可以通过键盘按键进行排序、切换等操作。<ol><li>例如：<ol><li>o键：是只显示当前有IO输出的进程</li><li>左右箭头：改变排序方式，默认是按IO排序</li><li>p键：可进行线程、进程切换</li></ol></li></ol></li></ol><p>这iotop的工具十分强大，以后要是感觉到I/O值被大量的占用，就可以通过iotop来查找相关的进程</p><h3 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a><strong>iftop</strong></h3><p>iftop是一个实时流量监控工具，可以用来监控网卡的实时流量(允许指定网段)，反向解析IP，显示端口信息等</p><p>iftop在centos中是没有预装的，可以直接yum安装</p><p><strong>iftop的使用</strong></p><p>界面上面显示的是标尺的刻度范围，为显示流量图形使用</p><p>中间的&lt;= =&gt;这两个左右箭头，表示的是流量的方向</p><p>下面的参数</p><ol><li>TX：发送流量</li><li>RX：接收流量</li><li>TOTAL：总流量</li><li>Cumm：运行iftop到目前时间的总流量</li><li>peak：流量峰值</li><li>rates：分别表示过去 2s 10s 40s 的平均流量</li></ol><p><strong>iftop的操作命令</strong></p><ol><li>按h：切换是否显示帮助;</li><li>按n：切换显示本机的IP或主机名;</li><li>按s：切换是否显示本机的host信息;</li><li>按d：切换是否显示远端目标主机的host信息;</li><li>按t：切换显示格式为2行/1行/只显示发送流量/只显示接收流量;</li><li>按N：切换显示端口号或端口服务名称;</li><li>按S：切换是否显示本机的端口信息;</li><li>按D：切换是否显示远端目标主机的端口信息;</li><li>按p：切换是否显示端口信息;</li><li>按P：切换暂停/继续显示;</li><li>按b：切换是否显示平均流量图形条;</li><li>按B：切换计算2秒或10秒或40秒内的平均流量;</li><li>按T：切换是否显示每个连接的总流量;</li><li>按l：打开屏幕过滤功能，输入要过滤的字符，比如ip,按回车后，屏幕就只显示这个IP相关的流量信息;</li><li>按L：切换显示画面上边的刻度;刻度不同，流量图形条会有变化;</li><li>按j：或按k可以向上或向下滚动屏幕显示的连接记录;</li><li>按1或2或3：可以根据右侧显示的三列流量数据进行排序;</li><li>按&lt;：根据左边的本机名或IP排序;</li><li>按&gt;：根据远端目标主机的主机名或IP排序;</li><li>按o：切换是否固定只显示当前的连接;</li><li>按f：可以编辑过滤代码</li><li>按!：可以使用shell命令</li><li>按q：退出监控</li></ol><p>以上的操作命令，大多我也没试过。</p><p><strong>iftop的选项</strong></p><ol><li>-i：设定监测的网卡，例如： iftop -i eth1</li><li>-B：以bytes为单位显示流量(默认是bits)，例如： iftop -B</li><li>-n：使host信息默认直接都显示IP，例如：iftop -n</li><li>-N：使端口信息默认直接都显示端口号，例如: iftop -N</li><li>-F：显示特定网段的进出流量，例如：iftop -F 10.10.1.0/24 或 iftop -F 10.10.1.0/255.255.255.0</li><li>-h：（display this message），帮助，显示参数信息</li><li>-p：使用这个参数后，中间的列表显示的本地主机信息，出现了本机以外的IP信息;</li><li>-b：使流量图形条默认就显示;</li><li>-f：这个暂时还不太会用，过滤计算包用的;</li><li>-P：使host信息及端口信息默认就都显示;</li><li>-m：设置界面最上边的刻度的最大值，刻度分五个大段显示，例如：iftop -m 100M</li></ol><p><strong>———————————暂时更新这么多——————————————————</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动部署发布脚本</title>
      <link href="/2019/01/30/shell-jiao-ben/zi-dong-bu-shu-fa-bu-jiao-ben/"/>
      <url>/2019/01/30/shell-jiao-ben/zi-dong-bu-shu-fa-bu-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>这脚本被我写到多少文件中，分成几个脚本文件，相互关联，目前该脚本在生产环境中以开始使用，可以用于多个项目，是基于多节点的基础编写的。</p><p>还有一个密码文件，我就不发出来了，这个密码文件是sshpass命令使用的，也可以用密钥，但是我这边选择用了密码文件</p><ol><li>主脚本</li><li>变量赋值脚本</li><li>启动脚本</li><li>项目配置文件</li><li>远端启动脚本</li><li>远端监控启动脚本</li></ol><p>新版本新加了：多项目部署功能，zabbix监控的检测，一个项目中有多个独立项目发布功能。 </p><h2 id="主脚本-deploy-sh"><a href="#主脚本-deploy-sh" class="headerlink" title="主脚本(deploy.sh)"></a><strong>主脚本(deploy.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashif [ ! -n "$1" ];then    echo -e "\033[34m ./deploy.sh 项目(user|coupon) 分支(master|dev) mvn(compile|install) \033[0m"    echo -e "\033[34m 多项目部署方式：\"user coupon\" \033[0m"    exitfiuser=$(whoami)if [ $user != "root" ];then    echo -e "\033[34m 请以“root”身份运行 \033[0m"    exitfifor pro in $1do    source /deploy/conf/deploy.conf    su qqkj -c "cat /dev/null > /deploy/.oa"    source /deploy/oa.sh    sleep 1    newq=$(cat /deploy/.oa)    if [[ $newq == y ]];then        echo -e "\033[32m 已获取到项目名称：$project_item \033[0m"    elif [[ $newq == n ]];then        echo -e "\033[31m 项目名不对 \033[0m"        exit    else        echo -e "\033[31m 脚本出错 \033[0m"            exit    fi    echo "当前的分支名：$2"    cd /deploy/git/    echo "跳转到"$PWD"目录"    backups=$(cat /deploy/git/.$pro)    if [[ "$backups" == "yes" ]];then            if [[ $project_compile == "y" ]];then                    for i in $project_ip                    do                for o in $project_jar                do                                sshpass -f $password scp -r $o $i:"$patp"/"$project_item"."$tama".jar                                if [ $? == 0 ];then                                        echo -e "\033[32m $project_item项目备份成功 \033[0m"                                else                                        echo -e "\033[31m $project_item项目备份失败 \033[0m"                                        exit                                fi                done                    done            fi    fi    cat /dev/null > /deploy/git/.$pro    #if [ ! -d $project_item/ ];then    rm -rf $project_src    su qqkj -c "git clone -b $2 $project_git"    #else    #    cd $project_src    #    git fetch $project_git $2    #fi    if [ $? == 0 ];then            echo -e "\033[32m $project_item项目拉取成功 \033[0m"            cd $project_src            echo "跳转到"$PWD"目录"            su qqkj -c "mvn clean $3 -Dmaven.test.skip=true"            if [ $? == 0 ];then                    echo -e "\033[32m $project_item项目mvn成功 \033[0m"            else                    echo -e "\033[31m $project_item项目mvn失败 \033[0m"            exit            fi    else            echo -e "\033[31m $project_item项目拉取失败 \033[0m"            exit    fi    if [ $project_compile == y ];then        for i in $project_ip        do            for o in $project_jar            do                sshpass -f $password scp -r $o $i:$path                    if [ $? == 0 ];then                    echo -e "\033[32m jar架包传输成功 \033[0m"                    echo "yes" > /deploy/git/.$pro                    else                            echo -e "\033[31m jar架包传输失败 \033[0m"                    exit                    fi            done        done    fi    if [ $project_compile == y ];then        s=0        we=1        for y in $project_ip        do            en=${y#*@}            echo -e "\033[35m ============================================================================================================ \033[0m"            echo -e "\033[35m ======================================= 当前节点IP：$en ========================================== \033[0m"            echo -e "\033[35m ============================================================================================================ \033[0m"                    f=0                    t=0            avatar_nginx_ipd=($pro"_nginx_ipd"$we)            project_nginx_ipd=$(eval echo '$'"${avatar_nginx_ipd}")            if [[ $project_nginx_node == "y" ]];then                s=0            fi            we=$(($we+1))            for n in $project_nodelist            do                array2=(${project_item//,/ })                                for e in ${array2[$f]}                                do                    echo -e "\033[35m ======================================= 当前项目名：$e ======================================== \033[0m"                                done                if [ $n == 1 ];then                    nginxd=0                    if [[ $project_nginx_node == y ]];then                        array1=(${project_nginx_ipd//,/ })                    else                        array1=(${project_ipd//,/ })                    fi                    for u in ${array1[$s]}                    do                        echo -e "\033[34m 当前节点IP：$u \033[0m"                        echo -e "\033[34m 修改nginx配置...... \033[0m"                        sshpass -f $password ssh -t $project_nginx_ip "sed -i 's/server $u\;/\#server $u\;/' $project_nginx_path"                        if [ $? == 0 ];then                                                echo -e "\033[32m 注释nginx配置成功 \033[0m"                            sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -t"                                                sleep 1                                                sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -s reload"                                                if [ $? == 0 ];then                                                        echo -e "\033[32m 重启nginx配置成功 \033[0m"                                nginxd=nginx                            else                                echo -e "\033[31m 重启nginx配置失败 \033[0m"                                exit                            fi                        else                            echo -e "\033[31m 注释nginx配置失败 \033[0m"                            exit                        fi                    done                fi                cat /dev/null > /deploy/.news                cat /dev/null > /deploy/.newe                 cat /dev/null > /deploy/.zabbix                cat /dev/null > /deploy/.zabbix_ip                sshpass -f $password ssh $y "echo '$e' > $pate"                f=$(($f+1))                 array3=(${project_change_nginx//,/ })                                for o in ${array3[$t]}                                do                                        sshpass -f $password ssh $y "echo '$o' > $patw"                                done                                t=$(($t+1))                sshpass -f $password ssh $y "/sh/.startue.sh"                sleep 1                source /deploy/start.sh                sleep 3                newe=$(cat /deploy/.start)                if [ "$newe" == "yes" ];then                    echo -e "\033[32m 部署启动成功 \033[0m"                    if [ $n == 1 ];then                        echo -e "\033[34m 恢复nginx配置...... \033[0m"                        echo -e "\033[32m nginx取消注释中..... \033[0m"                                                sshpass -f $password ssh -t $project_nginx_ip "sed -i 's/\#server $u\;/server $u\;/' $project_nginx_path"                                                if [ $? == 0 ];then                                                        echo -e "\033[32m nginx取消注释成功\033[0m"                            echo -e "\033[32m nginx重启中..... \033[0m"                                                        sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -t"                                                        sleep 1                                                        sshpass -f $password ssh -t $project_nginx_ip "sudo nginx -s reload"                                                        if [ $? == 0 ];then                                                                echo -e "\033[32m 重启nginx配置成功 \033[0m"                                                        else                                                                echo -e "\033[31m 重启nginx配置失败 \033[0m"                                                                exit                                                        fi                                                else                                                        echo -e "\033[31m 注释nginx配置失败 \033[0m"                                                        exit                                                fi                    fi                elif [ "$newe" == "no" ];then                    echo -e "\033[31m 部署启动失败 \033[0m"                    exit                else                    echo -e "\033[31m start.sh脚本文件出错，检测不到正确的返回值 \033[0m"                    exit                fi            done            s=$(($s+1))        done    fidonechown qqkj:qqkj -R /deploy/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="变量赋值脚本-oa-sh"><a href="#变量赋值脚本-oa-sh" class="headerlink" title="变量赋值脚本(oa.sh)"></a><strong>变量赋值脚本(oa.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash#source /deploy/conf/"$pro".confproject=$(ls /deploy/conf/ | grep .conf | sed -n "$pa"p | cut -d '.' -f 1,1)for i in $projectdo        if [ $i == $pro ];then        source /deploy/conf/"$pro".conf        echo "y" > /deploy/.oa        break    else        echo "n" > /deploy/.oa        fidoneavatar_ip=($pro"_ip")avatar_git=($pro"_git")avatar_port=($pro"_port")avatar_jar=($pro"_jar")avatar_src=($pro"_src")avatar_node=($pro"_node")avatar_item=($pro"_item")avatar_nginx=($pro"_nginx")avatar_nginx_path=($pro"_nginx_path")avatar_nginx_conf=($pro"_nginx_conf")avatar_nginx_ip=($pro"_nginx_ip")avatar_compile=($pro"_compile")avatar_change_nginx=($pro"_change_nginx")avatar_ipd=($pro"_ipd")avatar_node=($pro"_node")avatar_nodelist=($pro"_nodelist")avatar_nginx_ipd1=($pro"_nginx_ipd1")avatar_nginx_ipd2=($pro"_nginx_ipd2")avatar_nginx_node=($pro"_nginx_node")project_ip=$(eval echo '$'"${avatar_ip}")project_git=$(eval echo '$'"${avatar_git}")project_port=$(eval echo '$'"${avatar_port}")project_jar=$(eval echo '$'"${avatar_jar}")project_src=$(eval echo '$'"${avatar_src}")project_node=$(eval echo '$'"${avatar_node}")project_item=$(eval echo '$'"${avatar_item}")project_nginx=$(eval echo '$'"${avatar_nginx}")project_nginx_path=$(eval echo '$'"${avatar_nginx_path}")project_nginx_conf=$(eval echo '$'"${avatar_nginx_conf}")project_nginx_ip=$(eval echo '$'"${avatar_nginx_ip}")project_compile=$(eval echo '$'"${avatar_compile}")project_change_nginx=$(eval echo '$'"${avatar_change_nginx}")project_ipd=$(eval echo '$'"${avatar_ipd}")project_node=$(eval echo '$'"${avatar_node}")project_nodelist=$(eval echo '$'"${avatar_nodelist}")project_nginx_ipd1=$(eval echo '$'"${avatar_nginx_ipd1}")project_nginx_ipd2=$(eval echo '$'"${avatar_nginx_ipd2}")project_nginx_node=$(eval echo '$'"${avatar_nginx_node}")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动脚本-start-sh"><a href="#启动脚本-start-sh" class="headerlink" title="启动脚本(start.sh)"></a><strong>启动脚本(start.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashstate=$(cat /deploy/.news)w=0while [ $w -le 230 ]do    state=$(cat /deploy/.news)    zabbix=$(cat /deploy/.zabbix)    ip=$(cat /deploy/.zabbix_ip)    if [ $state == $teme ]        then            echo -e "\033[32m 项目启动成功 \033[0m"                su qqkj -c "echo 'yes' > /deploy/.start"                break        elif [ $state == $teme-1 ]        then                echo -e "\033[31m 运行脚本，没有发现项目存活,尝试启动项目 \033[0m"                echo -e "\033[31m 项目启动失败 \033[0m"        su qqkj -c "echo 'no' > /deploy/.start"                exit        elif [ $state == $teme-2 ]        then                echo -e "\033[31m 在规定的时间内,项目端口依然存在 \033[0m"                echo -e "\033[35m 进入关闭项目序列 \033[0m"                sleep 5                continue        elif [ $state == $teme-3 ]        then                echo -e "\033[31m 在规定的时间内,项目没有成功关闭 \033[31m"                echo -e "\033[35m 进入强制关闭项目序列 \033[0m"                sleep 5                continue        elif [ $state == $teme-4 ]        then                echo -e "\033[31m 项目启动出错，没有检测到日志端口 \033[0m"        su qqkj -c "echo 'no' > /deploy/.start"                exit        elif [ $state == $teme-5 ]        then                echo -e "\033[31m 在规定的时间内,项目强制关闭失败 \033[0m"        su qqkj -c "echo 'no' > /deploy/.start"            exit    elif [ $state == $teme-6 ]        then                echo -e "\033[31m 项目PID多个，请检查 \033[0m"                su qqkj -c "echo 'no' > /deploy/.start"                exit    elif [ $zabbix == 1 ]    then        ssh root@192.168.1.66 "ansible $ip -m shell -a 'bash /sh/.zabbix.sh'"        sleep 5        su qqkj -c "echo ' ' > /deploy/.zabbix"        continue    elif [ $w == 229 ]        then                echo -e "\033[31m 超过四分钟，接收不到返回值，脚本出错 \033[0m"        su qqkj -c "echo 'no' > /deploy/.start"                exit        fi        sleep 1        w=$(($w+1))done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目配置文件"><a href="#项目配置文件" class="headerlink" title="项目配置文件"></a><strong>项目配置文件</strong></h2><p>项目配置文件分为全局配置文件跟项目配置文件二种</p><p>全局配置文件只有一个文件</p><p>项目配置文件按不同项目拥有不同的项目配置文件</p><p>下面就只发全局跟项目各一个</p><h3 id="全局配置文件-deploy-conf"><a href="#全局配置文件-deploy-conf" class="headerlink" title="全局配置文件(deploy.conf)"></a><strong>全局配置文件(deploy.conf)</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bash############################### 全局变量 ##############################################path=/qinqukeji/microservice/stg_app/PWD=$(pwd)password=/deploy/.passwordpatp=/qinqukeji/microservice/stg_app/backupsteme=$(date +%Y%m%d)tama=$(date "+%Y-%m-%d.%H:%M:%S")pate=/sh/.newspats=/sh/.portpatw=/sh/.porwstep=10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="项目配置文件-xxljob-conf"><a href="#项目配置文件-xxljob-conf" class="headerlink" title="项目配置文件(xxljob.conf)"></a><strong>项目配置文件(xxljob.conf)</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashxxljob_git="https://gitee.com/piano_interest_91/xxl-job.git"xxljob_ip="qqkj@172.30.30.3 qqkj@172.30.30.5"xxljob_port="8080"xxljob_compile=yxxljob_node=2xxljob_src="/deploy/git/xxl-job/"xxljob_jar="/deploy/git/xxl-job/xxl-job-admin/target/*.jar /deploy/git/xxl-job/xxl-job-executor-samples/xxl-job-executor-sample-springboot/target/*.jar"xxljob_item="xxl-job-admin,xxl-job-executor-sample-springboot"xxljob_change_nginx="y,n"xxljob_nginx_ip=qqkj@172.30.30.1xxljob_ipd="172.30.30.3:8080,172.30.30.5:8080"xxljob_nginx_path=/etc/nginx/conf.d/stg-erp.91qinqu.com.confxxljob_nginx_conf=stg-erp.91qinqu.com.confxxljob_nodelist="1 0"xxljob_nginx_ipd1="172.30.30.3:8080"xxljob_nginx_ipd2="172.30.30.5:8080"xxljob_nginx_node=y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远端启动脚本-startue-sh"><a href="#远端启动脚本-startue-sh" class="headerlink" title="远端启动脚本(.startue.sh)"></a><strong>远端启动脚本(.startue.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashitem=$(cat /sh/.news)itwm="JVM running for"itam=$(cat /sh/.port)project=$(ps -ef | grep "$item".jar | grep -v grep | awk '{print $2}')projectss=$(ps -ef | grep "$item".jar | grep -v grep | awk '{print $2}')gain_ip=$( ip addr | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | tr -d "addr:" )ipd=$(echo ${gain_ip: 10})ip=$(echo ${ipd%/*})ssh=qqkj@192.168.0.2password=/sh/.passwordteme=$(date +%Y%m%d)pate=/deploy/.newszabbix=/deploy/.zabbixzabbix_ip=/deploy/.zabbix_ipnginx_ip=192.168.0.8path=backups/project_nginx=$(cat /sh/.porw)echo '' > /sh/.zabbixcd /qinqukeji/microservice/stg_app/quantity=$(ls "$path" | wc -l)while [ $quantity -gt 10 ]do        que=$(ls "$path" | sed -n 1p)        rm -rf "$path""$que"        quantity=$(ls "$path" | wc -l)doneif [ -n "$project" ];then    echo -e "\033[32m 重启 \033[0m"    if [ $project_nginx == y ];then        i=0        while [ $i -le 30 ]        do            netstat -anlp | grep $project | grep "$nginx_ip"            if [ ! $? = 0 ]            then                break            elif [ $i == 29 ]            then                break                sshpass -f $password ssh $ssh "echo '$teme-2' > $pate"            fi            sleep 1            i=$(($i+1))        done    fi    project=$(ps -ef | grep "$item".jar | grep -v grep | awk '{print $2}')    echo -e "\033[32m PID:$project \033[0m"    kill $project    o=0    while [ $o -le 30 ]    do        project1=$(ps -ef | grep "$item".jar | grep -v grep | awk '{print $2}')        if [ -z $project1 ]        then            cd /qinqukeji/microservice/stg_app/            /qinqukeji/microservice/stg_app/springBoot.sh start $item*            sleep 10            w=0            while [ $w -le 6 ]            do                tail -100 /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                if [ $? == 0 ]                then                    netstat -anlp | grep 10050 > /dev/null                    if [ $? == 0 ];then                        echo -e "\033[32m 监控正在运行中 \033[0m"                    else                        echo -e "\033[32m 正在启动监控服务，请等待... \033[0m"                        sshpass -f $password ssh $ssh "echo '1' > $zabbix"                        sshpass -f $password ssh $ssh "echo $ip > $zabbix_ip"                        sleep 3                        g=0                        while [ $g -le 31 ]                        do                            netstat -anlp | grep 10050 > /dev/null                            zb=$(cat /sh/.zabbix)                            if [ $? == 0 ];then                                echo -e "\033[32m 监控服务启动成功 \033[0m"                                break                            elif [ $zb == yes ];then                                echo -e "\033[32m 监控服务启动成功，监测不到端口。 \033[0m"                                break                            elif [ $zb == no ];then                                echo -e "\033[31m 监控服务启动失败 \033[0m"                                break                            elif [ $g == 30 ];then                                echo -e "\033[31m 监控服务启动失败 \033[0m"                                break                            fi                            sleep 1                            g=$(($g+1))                        done                    fi                    echo -e "\033[32m 项目以启动成功 \033[0m"                    sshpass -f $password ssh $ssh "echo '$teme' > $pate"                    exit                elif [ $w == 5 ]                then                    sshpass -f $password ssh $ssh "echo '$teme-4' > $pate"                    tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                    echo -e "\033[31m 启动超时 \033[0m"                    exit                fi            sleep 10            w=$(($w+1))            done        elif [ $o == 29 ]        then            break            sshpass -f $password ssh $ssh "echo '$teme-3' > $pate"        fi        sleep 1        o=$(($o+1))    done    project=$(ps -ef | grep "$item" | grep -v grep | awk '{print $2}')        echo -e "\033[32m PID:$project \033[0m "    kill -9 $project    p=0    while [ $p -le 30 ]        do                project1=$(ps -ef | grep "$item".jar | grep -v grep | awk '{print $2}')                if [ -z $project1 ]                then            cd /qinqukeji/microservice/stg_app/                        /qinqukeji/microservice/stg_app/springBoot.sh start $item*                        sleep 10                        k=0                        while [ $k -le 6 ]                        do                                tail -100 /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                                if [ $? == 0 ]                                then                    netstat -anlp | grep 10050 > /dev/null                                        if [ $? == 0 ];then                                                echo -e "\033[32m 监控正在运行中 \033[0m"                                        else                                                echo -e "\033[32m 正在启动监控服务，请等待... \033[0m"                                                sshpass -f $password ssh $ssh "echo '1' > $zabbix"                                                sshpass -f $password ssh $ssh "echo $ip > $zabbix_ip"                                                sleep 3                                                g=0                                                while [ $g -le 31 ]                                                do                                                        netstat -anlp | grep 10050 > /dev/null                                                        zb=$(cat /sh/.zabbix)                                                        if [ $? == 0 ];then                                                                echo -e "\033[32m 监控服务启动成功 \033[0m"                                                                break                                                        elif [ $zb == yes ];then                                                                echo -e "\033[32m 监控服务启动成功，监测不到端口。 \033[0m"                                                                break                                                        elif [ $zb == no ];then                                                                echo -e "\033[31m 监控服务启动失败 \033[0m"                                                                break                                                        elif [ $g == 30 ];then                                                                echo -e "\033[31m 监控服务启动失败 \033[0m"                                                                break                                                        fi                                                        sleep 1                                                        g=$(($g+1))                                                done                                        fi                                        echo -e "\033[32m 项目以启动成功 \033[0m"                                        sshpass -f $password ssh $ssh "echo '$teme' > $pate"                    exit                                elif [ $k == 5 ]                                then                                        sshpass -f $password ssh $ssh "echo '$teme-4' > $pate"                    tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                                        echo -e "\033[31m 启动超时 \033[0m"                                        exit                                fi                        sleep 10                        k=$(($k+1))                        done                elif [ $p == 29 ]                then                        exit                        sshpass -f $password ssh $ssh "echo '$teme-5' > $pate"                fi                sleep 1                p=$(($p+1))        doneelse    echo -e "\033[32m 启动 \033[0m"    cd /qinqukeji/microservice/stg_app/    /qinqukeji/microservice/stg_app/springBoot.sh start $item*.jar        sleep 10        q=0        while [ $q -le 6 ]        do            tail -100 /qinqukeji/microservice/stg_app/log/$item*.log | grep "$itwm"                if [ $? == 0 ]                then            netstat -anlp | grep 10050 > /dev/null                        if [ $? == 0 ];then                            echo -e "\033[32m 监控正在运行中 \033[0m"                        else                                sshpass -f $password ssh $ssh "echo '1' > $zabbix"                                sshpass -f $password ssh $ssh "echo $ip > $zabbix_ip"                echo -e "\033[32m 正在启动监控服务，请等待... \033[0m"                                sleep 3                                g=0                                while [ $g -le 31 ]                                do                                    netstat -anlp | grep 10050 > /dev/null                                        zb=$(cat /sh/.zabbix)                                        if [ $? == 0 ];then                                            echo -e "\033[32m 监控服务启动成功 \033[0m"                                               break                                        elif [ $zb == yes ];then                                               echo -e "\033[32m 监控服务启动成功，监测不到端口。 \033[0m"                                               break                                        elif [ $zb == no ];then                                               echo -e "\033[31m 监控服务启动失败 \033[0m"                                               break                                        elif [ $g == 30 ];then                                               echo -e "\033[31m 监控服务启动失败 \033[0m"                                               break                                        fi                                        sleep 1                                        g=$(($g+1))                                done                        fi                        echo -e "\033[32m 项目以启动成功 \033[0m"                    sshpass -f $password ssh $ssh "echo '$teme' > $pate"                          exit                elif [ $q == 5 ]                then                    sshpass -f $password ssh $ssh "echo '$teme-1' > $pate"            tail -40 /qinqukeji/microservice/stg_app/log/$item*.log                          echo -e "\033[31m 启动超时 \033[0m"                          exit                fi                sleep 10                q=$(($q+1))        donefi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="远端监控启动脚本-startue-sh"><a href="#远端监控启动脚本-startue-sh" class="headerlink" title="远端监控启动脚本(.startue.sh)"></a><strong>远端监控启动脚本(.startue.sh)</strong></h2><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashnetstat -anlp | grep 10050 > /dev/nullif [ $? == 0 ];then    echo "监控以启动"    echo 'yes' > /sh/.zabbixelse        if [ ! -d "/var/run/zabbix" ];then            mkdir /var/run/zabbix > /dev/null        fi        chmod zabbix:zabbix -R /var/run/zabbix/ > /dev/null        sleep 1        /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf > /dev/null        sleep 1        netstat -anlp | grep 10050 > /dev/null        if [ $? == 0 ];then            echo "监控以启动"        echo 'yes' > /sh/.zabbix        else                echo "监控未启动"        echo 'no' > /sh/.zabbix        fifi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么新版本要这么转圈子，因为我们的项目都是有一个专门的用户控制的，zabbix是root控制的，也因为现在机器多，也懒得改监控服务，就把脚本写了多点</p>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apollo配置中心-简单安装</title>
      <link href="/2019/01/23/linux-fu-wu/apollo-pei-zhi-zhong-xin-jian-dan-an-zhuang/"/>
      <url>/2019/01/23/linux-fu-wu/apollo-pei-zhi-zhong-xin-jian-dan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="Apollo配置中心介绍"><a href="#Apollo配置中心介绍" class="headerlink" title="Apollo配置中心介绍"></a><strong>Apollo配置中心介绍</strong></h2><p>随着程序功能的日益复杂，程序的配置日益增多：各种功能的开关、参数的配置、服务器的地址……</p><p>对程序配置的期望值也越来越高：配置修改后实时生效，灰度发布，分环境、分集群管理配置，完善的权限、审核机制……</p><p>在这样的大环境下，传统的通过配置文件、数据库等方式已经越来越无法满足开发人员对配置管理的需求、Apollo配置中心应运而生。</p><h2 id="Apollo配置中心特性"><a href="#Apollo配置中心特性" class="headerlink" title="Apollo配置中心特性"></a><strong>Apollo配置中心特性</strong></h2><p>正是基于配置的特殊性，所以Apollo从设计之初就立志于成为一个有治理能力的配置管理平台，目前提供了以下的特性：</p><ol><li><strong>统一管理不同环境、不同集群的配置</strong><ol><li>Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。</li><li>同一份代码部署在不同的集群，可以有不同的配置，比如zk的地址等</li><li>通过命名空间（namespace）可以很方便的支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖</li></ol></li><li><strong>配置修改实时生效（热发布）</strong><ol><li>用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序</li></ol></li><li><strong>版本发布管理</strong><ol><li>所有的配置发布都有版本概念，从而可以方便地支持配置的回滚</li></ol></li><li><strong>灰度发布</strong><ol><li>支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例</li></ol></li><li><strong>权限管理、发布审核、操作审计</strong><ol><li>应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。</li><li>所有的操作都有审计日志，可以方便的追踪问题</li></ol></li><li><strong>客户端配置信息监控</strong><ol><li>可以在界面上方便地看到配置在被哪些实例使用</li></ol></li><li><strong>提供Java和.Net原生客户端</strong><ol><li>提供了Java和.Net的原生客户端，方便应用集成</li><li>支持Spring Placeholder, Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）</li><li>同时提供了Http接口，非Java和.Net应用也可以方便的使用</li></ol></li><li><strong>提供开放平台API</strong><ol><li>Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。</li><li>不过Apollo出于通用性考虑，对配置的修改不会做过多限制，只要符合基本的格式就能够保存。</li><li>在我们的调研中发现，对于有些使用方，它们的配置可能会有比较复杂的格式，而且对输入的值也需要进行校验后方可保存，如检查数据库、用户名和密码是否匹配。</li><li>对于这类应用，Apollo支持应用方通过开放接口在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制</li></ol></li><li><strong>部署简单</strong><ol><li>配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少</li><li>目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来</li><li>Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数</li></ol></li></ol><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>Apollo是需要JDK的</p><ol><li>Apollo服务端的JDK至少是：JDK1.8</li><li>Apollo客户端的JDK至少是：JDK1.7</li></ol><p>Apollo支持的mysql，最低版本5.6</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>下载（我这边是用git下载的，所以需要安装git）</p><p>yum -y install git</p><p>git clone <a href="https://github.com/nobodyiam/apollo-build-scripts.git" target="_blank" rel="noopener">https://github.com/nobodyiam/apollo-build-scripts.git</a></p><p>Mysql配置</p><p>Apollo项目包中有提供给我们sql脚本，我们真的导入数据库就可以了</p><p>进入数据库</p><p>mysql -u root -p</p><p>创建二个数据库(数据库名要一致，如果不一致就要去配置文件修改数据库名)</p><p>create database ApolloPortalDB;</p><p>create database ApolloConfigDB;</p><p>导入数据库(数据库文件，在项目中的sql目录下)</p><p>cd apollo-build-scripts-master/sql/</p><p>mysql -u root -p ApolloPortalDB &lt; apolloportaldb.sql</p><p>mysql -u root -p ApolloConfigDB &lt; apolloconfigdb.sql</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>修改demo.sh配置文件</p><p>vim apollo-build-scripts-master/demo.sh</p><pre class="line-numbers language-shell"><code class="language-shell"># apollo config db infoapollo_config_db_url=jdbc:mysql://172.30.30.1:3306/ApolloConfigDB?characterEncoding=utf8apollo_config_db_username=rootapollo_config_db_password=123456# apollo portal db infoapollo_portal_db_url=jdbc:mysql://172.30.30.1:3306/ApolloPortalDB?characterEncoding=utf8apollo_portal_db_username=rootapollo_portal_db_password=123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动文件，就是我们刚刚修改的demo.sh配置文件</p><p>./demo.sh start</p><p>启动的时候有比较慢</p><p>启动后，web界面的端口就是8070</p><p>推荐文档：<a href="https://github.com/ctripcorp/apollo/wiki/Quick-Start?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/wiki/Quick-Start?tdsourcetag=s_pcqq_aiomsg</a></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos6.5下安装 mysql5.7</title>
      <link href="/2019/01/23/mysql/centos6.5-xia-an-zhuang-mysql5.7/"/>
      <url>/2019/01/23/mysql/centos6.5-xia-an-zhuang-mysql5.7/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>官方下载地址：</strong><a href="https://dev.mysql.com/downloads/mysql/5.7.html#downloads" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/5.7.html#downloads</a></p><p><strong>版本：</strong>mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</p><p><strong>下载：</strong>wget <a href="https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz" target="_blank" rel="noopener">https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz</a></p><p><strong>安装依赖包：</strong></p><p>yum -y install libaio numactl</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>解压：</strong>tar -zxf mysql-5.7.25-linux-glibc2.12-x86_64.tar.gz </p><p><strong>移动：</strong>mv mysql-5.7.25-linux-glibc2.12-x86_64 /usr/local/mysql</p><p><strong>创建数据目录：</strong>mkdir /usr/local/mysql/data</p><p><strong>创建用户：</strong></p><p>groupadd mysql</p><p>useradd -r -s /sbin/nologin -g mysql mysql -d /usr/local/mysql</p><p><strong>赋予权限</strong></p><p>chown mysql:mysql -R /usr/local/mysql/</p><p><strong>创建链接：</strong></p><p>cd /usr/local/mysql</p><p>ln support-files/mysql.server /etc/init.d/mysqld</p><p>ln bin/mysql /bin/mysql</p><p><strong>初始化数据库：</strong></p><p>bin/mysqld –initialize –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><p><strong>注意：</strong></p><p>初始化数据库，会随机创建密码</p><p>一般密码在，初始化输出的日志中，最后一行，最后一个值</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p><strong>修改my.cnf配置文件</strong></p><p>vim /etc/my.cnf</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysql]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysqld]</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql</span><span class="token constant">basedir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql</span><span class="token constant">datadir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/data</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">pid-file</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysqld.pid</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token constant">server-id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token constant">sql_mode</span><span class="token attr-value"><span class="token punctuation">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,PIPES_AS_CONCAT,ANSI_QUOTES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p><strong>修改mysqld文件</strong></p><p>vim /etc/init.d/mysqld</p><pre class="line-numbers language-shell"><code class="language-shell">basedir=/usr/local/mysqldatadir=/usr/local/mysql/datamysqld_pid_file_path=/usr/local/mysql/mysqld.pid##修改以上这三行的配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h2><p><strong>启动：</strong>service mysqld start</p><p><strong>进入mysql：</strong>mysql -u root -p#F,bkgSk/4hg （密码是随机生成的）</p><p>想要对数据库进行操作，需要修改密码，不然会一提示你</p><pre class="line-numbers language-shell"><code class="language-shell">ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>修改密码</strong></p><p>SET PASSWORD FOR ‘root’@localhost=PASSWORD(‘#F,bkgSk/4hg’);</p><p><strong>创建外部连接用户跟密码</strong></p><p>create user ‘root’@’%’ identified by ‘密码’;</p><p><strong>赋予二个用户权限（最大）</strong></p><p>grant all on <em>.</em> to root@’%’ identified by ‘密码’;</p><p>grant all on <em>.</em> to root@’localhost’ identified by ‘密码’;</p><p><strong>刷新Mysql权限</strong></p><p>flush privileges;</p><p><strong>查看数据库版本</strong></p><p>SHOW VARIABLES WHERE Variable_name = ‘version’;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nfs网络文件服务安装</title>
      <link href="/2019/01/17/linux-fu-wu/nfs-wang-luo-wen-jian-fu-wu-an-zhuang/"/>
      <url>/2019/01/17/linux-fu-wu/nfs-wang-luo-wen-jian-fu-wu-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>nfs的工作流程</p><p>NFS是Network File System的缩写，即网络文件系统。客户端通过挂载的方式将NFS服务器端共享的数据目录挂载到本地目录下</p><pre class="line-numbers language-bash"><code class="language-bash">1、由程序在NFS客户端发起存取文件的请求，客户端本地的RPC<span class="token punctuation">(</span>rpcbind<span class="token punctuation">)</span>服务会通过网络向NFS服务端的RPC的111端口发出文件存取功能的请求。2、NFS服务端的RPC找到对应已注册的NFS端口，通知客户端RPC服务。3、客户端获取正确的端口，并与NFS daemon联机存取数据。4、存取数据成功后，返回前端访问程序，完成一次存取操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a><strong>服务器端</strong></h2><p><strong>安装</strong></p><p>yum -y install nfs-utils rpcbind</p><p><strong>配置文件</strong></p><p>vim /etc/sysconfig/nfs</p><pre class="line-numbers language-shell"><code class="language-shell">MOUNTD_PORT=4001　　STATD_PORT=4002LOCKD_TCPPORT=4003LOCKD_UDPPORT=4003RQUOTAD_PORT=4004<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>权限声明</strong></p><pre class="line-numbers language-shell"><code class="language-shell">1、普通用户当设置all_squash时：访客时一律被映射为匿名用户(nfsnobody)当设置no_all_squash时：访客被映射为服务器上相同uid的用户，因此在客户端应建立与服务端uid一致的用户，否则也映射为nfsnobody。root除外，因为root_suqash为默认选项，除非指定了no_root_squash2、root用户当设置root_squash时：访客以root用户访问NFS服务端时，被映射为nfsnobody用户当设置no_root_squash时：访客以root用户访问NFS服务端时，被映射为root用户。以其他用户访问时同样映射为对应uid的用户，因为no_all_squash是默认选项选项说明ro：共享目录只读rw：共享目录可读可写all_squash：所有访问用户都映射为匿名用户或用户组no_all_squash（默认）：访问用户先与本机用户匹配，匹配失败后再映射为匿名用户或用户组root_squash（默认）：将来访的root用户映射为匿名用户或用户组no_root_squash：来访的root用户保持root帐号权限anonuid=<UID>：指定匿名访问用户的本地用户UID，默认为nfsnobody（65534）anongid=<GID>：指定匿名访问用户的本地用户组GID，默认为nfsnobody（65534）secure（默认）：限制客户端只能从小于1024的tcp/ip端口连接服务器insecure：允许客户端从大于1024的tcp/ip端口连接服务器sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性async：将数据先保存在内存缓冲区中，必要时才写入磁盘wdelay（默认）：检查是否有相关的写操作，如果有则将这些写操作一起执行，这样可以提高效率no_wdelay：若有写操作则立即执行，应与sync配合使用subtree_check（默认） ：若输出目录是一个子目录，则nfs服务器将检查其父目录的权限no_subtree_check ：即使输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>配置挂载目录</strong></p><p>vim /etc/exports</p><pre class="line-numbers language-shell"><code class="language-shell">/qqkj *(rw,sync,no_wdelay)   ## *代表全部<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>创建挂载目录并给予权限</strong></p><p>mkdir /qqkj</p><p>chown nfsnobody:nfsnobody -R /qqkj/</p><p><strong>exportfs操作</strong></p><pre class="line-numbers language-shell"><code class="language-shell">-a 全部挂载或卸载 /etc/exports中的内容-r 重新读取/etc/exports 中的信息 ，并同步更新/etc/exports、/var/lib/nfs/xtab-u 卸载单一目录（和-a一起使用为卸载所有/etc/exports文件中的目录）-v 输出详细的共享参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>重载exportfs配置并查看</p><p>exportfs -r</p><p>exportfs -v</p><p><strong>启动服务</strong></p><p>需要按顺序启动，先启动rpcbind 在启动nfs-utils</p><pre class="line-numbers language-shell"><code class="language-shell">systemctl start rpcbind.servicesystemctl enable rpcbind.servicesystemctl start nfs.servicesystemctl enable nfs.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a><strong>客户端</strong></h2><p><strong>安装</strong></p><p>yum -y install nfs-utils rpcbind</p><p><strong>创建挂载目录</strong></p><p>mkdir /qqkj</p><p><strong>挂载</strong></p><p>mount -t nfs 192.168.1.66:/qqkj /qqkj</p><p><strong>永久挂载</strong></p><p>vim /etc/fstab</p><pre class="line-numbers language-shell"><code class="language-shell">192.168.1.66:/qqkj     /qqkj     nfs    defaults     0  0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka集群的搭建</title>
      <link href="/2019/01/10/kafka/kafka-ji-qun-de-da-jian/"/>
      <url>/2019/01/10/kafka/kafka-ji-qun-de-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="kafka定义"><a href="#kafka定义" class="headerlink" title="kafka定义"></a><strong>kafka定义</strong></h2><ol><li><p>Java 和 scala都是运行在JVM上的语言。</p></li><li><p>erlang和最近比较火的和go语言一样是从代码级别就支持高并发的一种语言，所以RabbitMQ天生就有很高的并发性能，但是 有RabbitMQ严格按照AMQP进行实现，受到了很多限制。kafka的设计目标是高吞吐量，所以kafka自己设计了一套高性能但是不通用的协议，他也是仿照AMQP（ Advanced Message Queuing Protocol  高级消息队列协议）设计的</p></li><li><p>事物的概念：在数据库中，多个操作一起提交，要么操作全部成功，要么全部失败。举个例子， 在转账的时候付款和收款，就是一个事物的例子，你给一个人转账，你转成功，并且对方正常行收到款项后，这个操作才算成功，有一方失败，那么这个操作就是失败的。 </p><p>对应消在息队列中，就是多条消息一起发送，要么全部成功，要么全部失败。3个中只有ActiveMQ支持，这个是因为，RabbitMQ和Kafka为了更高的性能，而放弃了对事物的支持</p></li><li><p>集群：多台服务器组成的整体叫做集群，这个整体对生产者和消费者来说，是透明的。其实对消费系统组成的集群添加一台服务器减少一台服务器对生产者和消费者都是无感之的</p></li><li><p>负载均衡，对消息系统来说负载均衡是大量的生产者和消费者向消息系统发出请求消息，系统必须均衡这些请求使得每一台服务器的请求达到平衡，而不是大量的请求，落到某一台或几台，使得这几台服务器高负荷或超负荷工作，严重情况下会停止服务或宕机</p></li><li><p>动态扩容是很多公司要求的技术之一，不支持动态扩容就意味着停止服务，这对很多公司来说是不可以接受的</p></li><li><p>kafka支持的客户端语言：Kafka客户端支持当前大部分主流语言，包括：C、C++、Erlang、Java、.net、perl、PHP、Python、Ruby、Go、Javascript，可以使用以上任何一种语言和kafka服务器进行通信（即辨析自己的consumer从kafka集群订阅消息也可以自己写producer程序）</p></li></ol><h2 id="kafka的基础概念"><a href="#kafka的基础概念" class="headerlink" title="kafka的基础概念"></a><strong>kafka的基础概念</strong></h2><ol><li>消费者：（Consumer）：从消息队列中请求消息的客户端应用程序</li><li>生产者：（Producer）  ：向broker发布消息的应用程序</li><li>AMQP服务端（broker）：用来接收生产者发送的消息并将这些消息路由给服务器中的队列，便于fafka将生产者发送的消息，动态的添加到磁盘并给每一条消息一个偏移量，所以对于kafka一个broker就是一个应用程序的实例</li></ol><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿二台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.153</p><p>副节点IP地址：192.168.0.154</p><p><strong>JDK8</strong></p><p>zookeeper是需要jdk8的</p><p>JDK8安装文章：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8安装">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：zookeeper-3.4.12</p><p>官方下载地址：<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz</a></p><p>kafka下载，建议下载 <a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka_2.11-2.1.0.tgz" target="_blank" rel="noopener">kafka_2.11-2.1.0.tgz</a>不要下载<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/2.1.0/kafka-2.1.0-src.tgz" target="_blank" rel="noopener">kafka-2.1.0-src.tgz</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>以下操作二台主机都要操作</p><p>解压：tar -zxvf kafka_2.11-2.1.0.tgz</p><p>移动：mv kafka_2.11-2.1.0 /usr/local/kafka</p><p><strong>修改配置文件</strong></p><p>cd /usr/local/kafka/config/</p><p>vim server.properties</p><pre class="line-numbers language-shell"><code class="language-shell">broker.id=1   ##集群的唯一标识，注意这里要改不一样，节点分别1,2 来标识listeners=PLAINTEXT://192.168.0.153:9092  ##设置kafka的监控地址和端口log.dirs=/usr/local/kafka/logs  ##设置日志文件地址num.partitions=6   ##设置新创建的topic有多少分区,按照情况设置log.retention.hours=60   ##配置kafka中消息保存的时间zookeeper.connect=192.168.0.153:2181,192.168.0.154:2181  ##指定zookeeper的地址，可以设置多个auto.create.topics.enable=true  ##设置是否自动创建topicdelete.topic.enable=true   ##设置提供删除topicr的功能 ###以上的配置是要求修改的以下是收集来的全配置信息，可以按自身情况修改broker.id=0  #当前机器在集群中的唯一标识，和zookeeper的myid性质一样port=19092 #当前kafka对外提供服务的端口默认是9092host.name=192.168.7.100 #这个参数默认是关闭的，在0.8.1有个bug，DNS解析问题，失败率的问题。num.network.threads=3 #这个是borker进行网络处理的线程数num.io.threads=8 #这个是borker进行I/O处理的线程数log.dirs=/opt/kafka/kafkalogs/ #消息存放的目录，这个目录可以配置为“，”逗号分割的表达式，上面的num.io.threads要大于这个目录的个数这个目录，如果配置多个目录，新创建的topic他把消息持久化的地方是，当前以逗号分割的目录中，那个分区数最少就放那一个socket.send.buffer.bytes=102400 #发送缓冲区buffer大小，数据不是一下子就发送的，先回存储到缓冲区了到达一定的大小后在发送，能提高性能socket.receive.buffer.bytes=102400 #kafka接收缓冲区大小，当数据到达一定大小后在序列化到磁盘socket.request.max.bytes=104857600 #这个参数是向kafka请求消息或者向kafka发送消息的请请求的最大数，这个值不能超过java的堆栈大小num.partitions=1 #默认的分区数，一个topic默认1个分区数log.retention.hours=168 #默认消息的最大持久化时间，168小时，7天message.max.byte=5242880  #消息保存的最大值5Mdefault.replication.factor=2  #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务replica.fetch.max.bytes=5242880  #取消息的最大直接数log.segment.bytes=1073741824 #这个参数是：因为kafka的消息是以追加的形式落地到文件，当超过这个值的时候，kafka会新起一个文件log.retention.check.interval.ms=300000 #每隔300000毫秒去检查上面配置的log失效时间（log.retention.hours=168 ），到目录查看是否有过期的消息如果有，删除log.cleaner.enable=false #是否启用log压缩，一般不用启用，启用的话可以提高性能zookeeper.connect=192.168.7.100:12181,192.168.7.101:12181,192.168.7.107:1218 #设置zookeeper的连接端口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p><strong>启动</strong></p><p>cd /usr/local/kafka/</p><p>nohup bin/kafka-server-start.sh config/server.properties &amp;</p><p>这里是将kafka放入后台运行，启动后，会在启动kafka的当前目录下生成一个nohup.out文件</p><p>可以通过这文件查看kafka的启动状态和运行状态</p><p><strong>测试</strong></p><pre class="line-numbers language-shell"><code class="language-shell">[root@localhost config]# jps7013 QuorumPeerMain7754 Jps7070 Kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过jps命令，可以看到有个kafka的标识，这就是kafka进程启动成功的标识</p>]]></content>
      
      
      <categories>
          
          <category> kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeepre集群的搭建</title>
      <link href="/2019/01/09/zookeeper/zookeepre-ji-qun-de-da-jian/"/>
      <url>/2019/01/09/zookeeper/zookeepre-ji-qun-de-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="zookeepre的简单原理"><a href="#zookeepre的简单原理" class="headerlink" title="zookeepre的简单原理"></a><strong>zookeepre的简单原理</strong></h2><p>ZooKeeper是一个开放源码的分布式应用程序协调服务，它包含一个简单的原语集，分布式应用程序可以基于它实现同步服务，配置维护和命名服务等。</p><h3 id="Zookeeper设计目的"><a href="#Zookeeper设计目的" class="headerlink" title="Zookeeper设计目的"></a><strong>Zookeeper设计目的</strong></h3><p>最终一致性：client不论连接到那个Server，展示给它的都是同一个视图</p><p>可靠性：具有简单、健壮、良好的性能、如果消息m被到一台服务器接收，那么消息m将被所有服务器接收。</p><p>实时性：Zookeeper保证客户端将在一个时间间隔范围内获得服务器的更新信息，或者服务器失效的信息。但由于网络延时等原因，Zookeeper不能保证两个客户端能同时得到刚更新的数据，如果需要最新数据，应该在读数据之前调用sync()接口。</p><p>等待无关（wait-free）：慢的或者失效的client不得干预快速的client的请求，使得每个client都能有效的等待。</p><p>原子性：更新只能成功或者失败，没有中间状态。</p><p>顺序性：包括全局有序和偏序两种：全局有序是指如果在一台服务器上消息a在消息b前发布，则在所有Server上消息a都将在消息b前被发布；偏序是指如果一个消息b在消息a后被同一个发送者发布，a必将排在b前面。</p><h3 id="zookeeper的工作原理"><a href="#zookeeper的工作原理" class="headerlink" title="zookeeper的工作原理"></a><strong>zookeeper的工作原理</strong></h3><p><strong>在zookeeper的集群中，各个节点共有下面3种角色和4种状态</strong></p><p>角色：leader、follower、observer</p><p>状态：leading、following、observing、looking</p><p><strong>每个Server在工作过程中有4种状态：</strong></p><p>LOOKING：当前Server不知道leader是谁，正在搜寻。</p><p>LEADING：当前Server即为选举出来的leader。</p><p>FOLLOWING：leader已经选举出来，当前Server与之同步。</p><p>OBSERVING：observer的行为在大多数情况下与follower完全一致，但是他们不参加选举和投票，而仅仅接受(observing)选举和投票的结果。</p><p>Zookeeper的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议（ZooKeeper Atomic Broadcast protocol）。</p><p>Zab协议有两种模式，它们分别是恢复模式（Recovery选主）和广播模式（Broadcast同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p><p>为了保证事务的顺序一致性，zookeeper采用了递增的事务id号（zxid）来标识事务。所有的提议（proposal）都在被提出的时候加上了zxid。实现中zxid是一个64位的数字，它高32位是epoch用来标识leader关系是否改变，每次一个leader被选出来，它都会有一个新的epoch，标识当前属于那个leader的统治时期。低32位用于递增计数。</p><h3 id="Zookeeper集群节点"><a href="#Zookeeper集群节点" class="headerlink" title="Zookeeper集群节点"></a><strong>Zookeeper集群节点</strong></h3><p>Zookeeper节点部署越多，服务的可靠性越高，建议部署奇数个节点，因为zookeeper集群是以宕机个数过半才会让整个集群宕机的。</p><p>需要给每个zookeeper 1G左右的内存，如果可能的话，最好有独立的磁盘，因为独立磁盘可以确保zookeeper是高性能的。如果你的集群负载很重，不要把zookeeper和RegionServer运行在同一台机器上面，就像DataNodes和TaskTrackers一样</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>机器</strong></p><p>我这边拿二台虚拟机，centos7的</p><p>主节点IP地址：192.168.0.153</p><p>副节点IP地址：192.168.0.154</p><p><strong>JDK8</strong></p><p>zookeeper是需要jdk8的</p><p>JDK8安装文章：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8安装">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p><strong>下载</strong></p><p>我这边是先下载好的</p><p>版本：zookeeper-3.4.12</p><p>官方下载地址：<a href="https://zookeeper.apache.org/doc/r3.4.13/" target="_blank" rel="noopener">https://zookeeper.apache.org/doc/r3.4.13/</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>以下的操作二台主机都要操作</p><p>解压：tar -zxf zookeeper-3.4.12.tar.gz </p><p>移动：mv zookeeper-3.4.12 /usr/local/zookeeper</p><p>进入：cd /usr/local/zookeeper/conf/</p><p>拷贝配置文件：cp -a zoo_sample.cfg zoo.cfg</p><p>创建数据目录：mkdir -p /data/zookeeper/logs</p><p><strong>配置zoo.cfg</strong></p><pre class="line-numbers language-shell"><code class="language-shell">以下是需要修改跟增加的配置行dataDir=/data/zookeeper       ##数据目录dataLogDir=/data/zookeeper/logs  ##日志目录server.1=192.168.0.153:2888:3888server.2=192.168.0.154:2888:3888##集群配置方式server.A=B:C:D中的A是一个数字,表示这个是第几号服务器,B是这个服务器的IP地址，C第一个端口用来集群成员的信息交换,表示这个服务器与集群中的leader服务器交换信息的端口，D是在leader挂掉时专门用来进行选举leader所用的端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>创建集群标识，myid文件</strong></p><p>注意：这个标识跟我们上面配置文件高架的server有关</p><p>192.168.0.153这台机的标识就是1，因为我们在配置文件设置了，server.1=192.168.0.153:2888:3888</p><p>192.168.0.154这台机的标识就是2，因为我们在配置文件设置了，server.2=192.168.0.154:2888:3888</p><p>myid这个文件要放在zookeeper的数据目录，我们设置的数据目录是在/data/zookeeper/目录中</p><p><strong>在192.168.0.153主机的操作</strong></p><p>echo “1” &gt; /data/zookeeper/myid</p><p><strong>在192.168.0.154主机的操作</strong></p><p>echo “2” &gt; /data/zookeeper/myid</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p>/usr/local/zookeeper/bin/zkServer.sh start </p><p><strong>查看集群</strong></p><pre class="line-numbers language-shell"><code class="language-shell">机器：192.168.0.153[root@localhost ~]# /usr/local/zookeeper/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/bin/../conf/zoo.cfgMode: follower机器：192.168.0.154[root@localhost ~]# /usr/local/zookeeper/bin/zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /usr/local/zookeeper/bin/../conf/zoo.cfgMode: leader集群有二种模式，follow、leaderfollow模式是代表副节点leader模式是代表主节点zookeepre集群的主副节点，是随机选中的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>测试集群</strong></p><p>/usr/local/zookeeper/bin/zkCli.sh -server 192.168.0.154:2181</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs//npm 安装</title>
      <link href="/2019/01/07/linux-fu-wu/nodejsnpm-an-zhuang/"/>
      <url>/2019/01/07/linux-fu-wu/nodejsnpm-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>下载</p><p>wget <a href="https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz" target="_blank" rel="noopener">https://nodejs.org/dist/v10.15.0/node-v10.15.0-linux-x64.tar.xz</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装 </p><p><strong>解压：</strong></p><p>xz -d node-v10.15.0-linux-x64.tar.xz </p><p>tar -xvf node-v10.15.0-linux-x64.tar </p><p><strong>移动：</strong></p><p>mv node-v10.15.0-linux-x64 /usr/local/node</p><p><strong>创建软链接：</strong></p><p>ln -s /usr/local/node/bin/npm /bin/</p><p>ln -s /usr/local/node/bin/node /bin/</p><p><strong>测试：</strong></p><p>npm -v</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>修改为淘宝源</p><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><p>npm config set registry <a href="http://registy.npm.taobao.org/" target="_blank" rel="noopener">http://registy.npm.taobao.org/</a></p><p>npm install</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux回收站脚本之二</title>
      <link href="/2018/12/27/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-er/"/>
      <url>/2018/12/27/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-er/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>说明</strong></p><p>只需把这个脚本按自己的情况修改一下就可以使用</p><p>需要赋予脚本777权限</p><p>需要用这脚本，代替/bin/rm脚本</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>shell脚本</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Author Attitude</span><span class="token comment" spellcheck="true"># Modify 2018/12/26</span>pw<span class="token operator">=</span><span class="token variable">$2</span>pq<span class="token operator">=</span><span class="token variable">${pw: -1}</span>p<span class="token operator">=</span>/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pq</span> <span class="token operator">==</span> <span class="token variable">$p</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">$pw</span> <span class="token operator">></span> /dev/null<span class="token keyword">else</span>        pw<span class="token operator">=</span><span class="token variable">$pw</span>/<span class="token keyword">fi</span><span class="token keyword">function</span> rm<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pa<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> $pw <span class="token operator">|</span> <span class="token function">grep</span> -o / <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 1 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span>    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 2 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,100<span class="token punctuation">)</span>        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 2,100<span class="token punctuation">)</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 3 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,100<span class="token punctuation">)</span>            ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 3,100<span class="token punctuation">)</span>        <span class="token keyword">else</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 4 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,100<span class="token punctuation">)</span>                ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 4,100<span class="token punctuation">)</span>            <span class="token keyword">else</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 5 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,100<span class="token punctuation">)</span>                    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 5,100<span class="token punctuation">)</span>                <span class="token keyword">else</span>                    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 6 <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,6,100<span class="token punctuation">)</span>                        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 6,100<span class="token punctuation">)</span>                    <span class="token keyword">else</span>                        <span class="token keyword">echo</span> <span class="token string">"最多只能跨6个目录删除"</span>                        <span class="token keyword">exit</span>                    <span class="token keyword">fi</span>                <span class="token keyword">fi</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span>Store<span class="token operator">=</span>/tmp/.rmtime<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>timee<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m.%d-%H:%M:%S<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$Store</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$Store</span>"</span>    <span class="token function">chmod</span> 777 <span class="token string">"<span class="token variable">$Store</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>    <span class="token function">chmod</span> 777 <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"删除机制出错，请联系运维:***-***********"</span>        <span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>                    <span class="token keyword">echo</span> <span class="token string">"已删除至回收站*如果意外删除，请及时联系运维:***-***********"</span>            <span class="token keyword">else</span>                    <span class="token keyword">echo</span> <span class="token string">"删除文件失败*请检查文件/目录是否正在使用或联系运维:***-***********"</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span><span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"已删除至回收站，如果意外删除，请及时联系运维:***-***********"</span>    <span class="token keyword">else</span>                   <span class="token keyword">echo</span> <span class="token string">"删除文件失败，请检查文件/目录是否正在使用或联系运维:***-***********"</span>           <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">##删除</span>pash<span class="token operator">=</span>/tmp/.rm/quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$quantity</span> -gt 3 <span class="token punctuation">]</span><span class="token keyword">do</span>        que<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -n 1p<span class="token punctuation">)</span>        /root/.rm -rf <span class="token string">"<span class="token variable">$pash</span>"</span><span class="token string">"<span class="token variable">$que</span>"</span>        quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">done</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>    -rf<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -fr<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -r<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    -f<span class="token punctuation">)</span>    <span class="token function">rm</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m Usage: \033[0m  \033[0;34m  rm的选项只能填写 {-rf|-fr|-r|-f} \033[0m"</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#这脚本使用的时候是必须带选项的#如果想要可以不带选项的rm脚本，可以自己修改一下，也可以参考linux回收站脚本之一<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux回收站脚本之一</title>
      <link href="/2018/12/26/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-yi/"/>
      <url>/2018/12/26/shell-jiao-ben/linux-hui-shou-zhan-jiao-ben-zhi-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p><strong>说明</strong></p><p>只需把这个脚本按自己的情况修改一下就可以使用</p><p>需要赋予脚本777权限</p><p>需要用这脚本，代替/bin/rm脚本</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p><strong>shell脚本</strong></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># Author Attitude</span><span class="token comment" spellcheck="true"># Modify 2018/12/26</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -rf <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -fr <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -r <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$2</span>"</span> <span class="token operator">=</span> -f <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> -e <span class="token string">"\033[0;31m 请无需使用选项，直接：rm <span class="token variable">$3</span>\033[0m  "</span>    <span class="token keyword">exit</span> 1<span class="token keyword">fi</span>pw<span class="token operator">=</span><span class="token variable">$2</span>pq<span class="token operator">=</span><span class="token variable">${pw: -1}</span>p<span class="token operator">=</span>/<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pq</span> <span class="token operator">==</span> <span class="token variable">$p</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token variable">$pw</span> <span class="token operator">></span> /dev/null<span class="token keyword">else</span>    pw<span class="token operator">=</span><span class="token variable">$pw</span>/<span class="token keyword">fi</span>pa<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token keyword">echo</span> $pw <span class="token operator">|</span> <span class="token function">grep</span> -o / <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 1 <span class="token punctuation">]</span><span class="token keyword">then</span>    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span>    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,100<span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 2 <span class="token punctuation">]</span>    <span class="token keyword">then</span>        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,100<span class="token punctuation">)</span>        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 2,100<span class="token punctuation">)</span>    <span class="token keyword">else</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 3 <span class="token punctuation">]</span>        <span class="token keyword">then</span>            pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,100<span class="token punctuation">)</span>            ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 3,100<span class="token punctuation">)</span>        <span class="token keyword">else</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 4 <span class="token punctuation">]</span>            <span class="token keyword">then</span>                pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,100<span class="token punctuation">)</span>                ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 4,100<span class="token punctuation">)</span>            <span class="token keyword">else</span>                <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 5 <span class="token punctuation">]</span>                <span class="token keyword">then</span>                    pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,100<span class="token punctuation">)</span>                    ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 5,100<span class="token punctuation">)</span>                <span class="token keyword">else</span>                    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$pa</span> -le 6 <span class="token punctuation">]</span>                    <span class="token keyword">then</span>                        pr<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 1,2,3,4,5,6,100<span class="token punctuation">)</span>                        ps<span class="token operator">=</span><span class="token punctuation">$(</span>echo <span class="token variable">$pw</span> <span class="token operator">|</span> <span class="token function">cut</span> -d <span class="token string">"/"</span> -f 6,100<span class="token punctuation">)</span>                    <span class="token keyword">else</span>                        <span class="token keyword">exit</span>                    <span class="token keyword">fi</span>                <span class="token keyword">fi</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>    <span class="token keyword">fi</span><span class="token keyword">fi</span>Store<span class="token operator">=</span>/tmp/.rmtime<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m-%d<span class="token variable">)</span></span>timee<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%Y-%m.%d-%H:%M:%S<span class="token variable">)</span></span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$Store</span> <span class="token punctuation">]</span><span class="token keyword">then</span>    <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$Store</span>"</span>    <span class="token function">chmod</span> 777 <span class="token string">"<span class="token variable">$Store</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span><span class="token keyword">then</span>        <span class="token function">mkdir</span> <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>    <span class="token function">chmod</span> 777 <span class="token variable">${Store}</span>/<span class="token variable">${time}</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"删除机制出错，请联系运维:***-***********"</span>        <span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span>            <span class="token keyword">then</span>                    <span class="token keyword">echo</span> <span class="token string">"已删除至回收站*如果意外删除，请及时联系运维:***-***********"</span>            <span class="token keyword">else</span>                    <span class="token keyword">echo</span> <span class="token string">"删除文件失败*请检查文件/目录是否正在使用或联系运维:***-***********"</span>            <span class="token keyword">fi</span>        <span class="token keyword">fi</span><span class="token keyword">else</span>        <span class="token function">mv</span> <span class="token string">"<span class="token variable">$pr</span>"</span> <span class="token string">"<span class="token variable">$Store</span>"</span>/<span class="token string">"<span class="token variable">$time</span>"</span>/<span class="token string">"<span class="token variable">$ps</span>"</span><span class="token keyword">.</span><span class="token string">"<span class="token variable">$timee</span>"</span> <span class="token comment" spellcheck="true">#1>&amp;2 2>/dev/null</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -d <span class="token variable">$ps</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"已删除至回收站，如果意外删除，请及时联系运维:***-***********"</span>    <span class="token keyword">else</span>                   <span class="token keyword">echo</span> <span class="token string">"删除文件失败，请检查文件/目录是否正在使用或联系运维:***-***********"</span>           <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment" spellcheck="true">##删除</span>pash<span class="token operator">=</span>/tmp/.rm/quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token variable">$quantity</span> -gt 3 <span class="token punctuation">]</span><span class="token keyword">do</span>        que<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">sed</span> -n 1p<span class="token punctuation">)</span>        /root/.rm -rf <span class="token string">"<span class="token variable">$pash</span>"</span><span class="token string">"<span class="token variable">$que</span>"</span>        quantity<span class="token operator">=</span><span class="token punctuation">$(</span>ls <span class="token string">"<span class="token variable">$pash</span>"</span> <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token punctuation">)</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">#这脚本使用的时候是不能带选项的#如果想要可以带选项的rm脚本，可以自己修改一下，也可以参考linux回收站脚本之二<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> shell脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell正则</title>
      <link href="/2018/12/25/linux-ming-ling/shell-zheng-ze/"/>
      <url>/2018/12/25/linux-ming-ling/shell-zheng-ze/</url>
      
        <content type="html"><![CDATA[<p><strong>以下文章内容，参考了良哥的shell从入门到精通的文章</strong></p><p>正则表达式在每种语言中都会有，功能就是匹配符合你预期要求的字符串，是我们要写shell脚本中最常用的</p><p>Shell 正则表达式分为两种：</p><p>​    基础正则表达式：BRE（basic regular express）</p><p>​    扩展正则表达式：ERE（extend regular express），扩展的表达式有+、?、|和() </p><h3 id="正则"><a href="#正则" class="headerlink" title="正则"></a><strong>正则</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">.  ##匹配除换行符(\n)之外的任 意单个字符      例：匹配 123： echo -e "123\n456" |grep '1.3'^  ##匹配前面字符串开头      例：匹配以 abc 开头的行： echo -e "abc\nxyz" |grep ^abc $  ##匹配前面字符串结尾      例：匹配以 xyz 结尾的行：echo -e "abc\nxyz" |grep xyz$ *  ##匹配前一个字符零个或多个      例：匹配 x、xo 和 xoo：         echo -e "x\nxo\nxoo\no\noo" |grep "xo*"         x 是必须的，批量了 0 零个或多个 +  ##匹配前面字符1个或多个      例：匹配 abc 和 abcc：echo -e "abc\nabcc\nadd" |grep -E 'ab+'         匹配单个数字：echo "113" |grep -o '[0-9]'         连续匹配多个数字：echo "113" |grep -E -o '[09]+' ？  ##匹配前面字符0个或1个      例：匹配 ac 或 abc： echo -e "ac\nabc\nadd" |grep -E 'a?c' []  ##匹配中括号之中的任意一个字符       例：匹配 a 或 c： echo -e "a\nb\nc" |grep '[ac]' [ .-.]  ##匹配中括号中范围内的任意 一个字符           例：匹配所有字母： echo -e "a\nb\nc" |grep '[a-z]' [^]  ##匹配[^字符]之外的任意一个字符        例：匹配 a 或 b： echo -e "a\nb\nc" |grep '[^c-z]'           匹配末尾数字：echo "abc:cde;123" |grep -E '[^;]+$' ^[^]  ##匹配不是中括号内任意一个字符开头的行         例：匹配不是#开头的行： grep '^[^#]' /etc/httpd/conf/httpd.conf {n}或 {n,}  ##匹配花括号前面字符至少 n 个字符               例：匹配 abc 字符串（至少三个字符以上字符串）                  echo -e "a\nabc\nc" |grep -E '[a-z]{3}' {n,m}  ##匹配花括号前面字符至少 n 个字符，最多 m 个字符          例：匹配 12 和 123（不加边界符会匹配单个字符）            echo -e "1\n12\n123\n1234" |grep -E -w -o '[09]{2,3}' \<   ##边界符，匹配字符串开始        例：匹配开始是 123 和 1234          echo -e "1\n12\n123\n1234" |grep '\<123' \>   ##边界符，匹配字符串结束        例：匹配结束是 1234           echo -e "1\n12\n123\n1234" |grep '4\>' ( )   ##单元或组合：将小括号里面作为一个组合        分组：匹配小括号中正则表达式或字符。\n 反向引 用，n 是数字，        从1开始编号，表示引用第n个分组匹配的内容        例：单元：匹配 123a 字符串               echo "123abc" |grep -E -o '([0-9a-z]){4}'            分组：匹配 11               echo "113abc" |grep -E -o '(1)\1'            匹配出现 xo 出现零次或多次：               echo -e "x\nxo\nxoo\no\noo" |egrep "(xo)*"|  ##匹配竖杠两边的任意一个       例：匹配 12 和 123：           echo -e "1\n12\n123\n1234" |grep -E '12\>|123\>' \  ##转义符，将特殊符号转成原有意义      例：1.2，匹配 1.2：1\.2，否则 112 也会匹配到<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Posix-字符"><a href="#Posix-字符" class="headerlink" title="Posix 字符"></a><strong>Posix 字符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">[:alnum:] 等效[a-zA-Z0-9] [:alpha:] 等效[a-zA-Z] [:lower:] 等效[a-z] [:upper:] 等效[A-Z] [:digit:] 等效[0-9] [:space:] 匹配任意空白字符，等效[\t\n\r\f\v] [:graph:] 非空白字符 [:blank:] 空格与定位字符 [:cntrl:] 控制字符 [:print:] 可显示的字符 [:punct:] 标点符号字符 [:xdigit:] 十六进制 示例： echo -e "1\n12\n123\n1234a" |grep '[[:digit:]]'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客，正则支持率"><a href="#shell文本处理三剑客，正则支持率" class="headerlink" title="shell文本处理三剑客，正则支持率"></a><strong>shell文本处理三剑客，正则支持率</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">grep    #默认不支持扩展表达式，加-E 选项开启 ERE    如果不加-E 使用花括号要加 转义符\{\}      egrep 支持基础和扩展表达式 awk    #支持 egrep 所有的正则表达式 sed    #默认不支持扩展表达式    加-r 选项开启 ERE。    如果不加-r 使用花括号要加 转义符\{\}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客-支持的特殊字符"><a href="#shell文本处理三剑客-支持的特殊字符" class="headerlink" title="shell文本处理三剑客 支持的特殊字符"></a><strong>shell文本处理三剑客 支持的特殊字符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">\w  ##匹配任意数字和字母，等效[a-zA-Z0-9_] \W  ##与\w 相反，等效[^a-zA-Z0-9_] \b  ##匹配字符串开始或结束，等效\<和\> \s  ##匹配任意的空白字符 \S  ##匹配非空白字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="shell文本处理三剑客-支持的空白符"><a href="#shell文本处理三剑客-支持的空白符" class="headerlink" title="shell文本处理三剑客 支持的空白符"></a><strong>shell文本处理三剑客 支持的空白符</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">\n  ##换行符 \r  ##回车符 \t  ##水平制表符 \v  ##垂直制表符 \0  ##空值符 \b  ##退后一格 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装nginx1.15-stream模块安装（ssh映射）</title>
      <link href="/2018/12/18/nginx/yuan-ma-an-zhuang-nginx1.15-stream-mo-kuai-an-zhuang-ssh-ying-she/"/>
      <url>/2018/12/18/nginx/yuan-ma-an-zhuang-nginx1.15-stream-mo-kuai-an-zhuang-ssh-ying-she/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>安装依赖包</p><p>yum -y install gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel </p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>下载，安装</p><p><strong>下载</strong></p><p>wget <a href="http://nginx.org/download/nginx-1.15.7.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.15.7.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf nginx-1.15.7.tar.gz </p><p><strong>进入</strong></p><p>cd nginx-1.15.7</p><p><strong>创建目录</strong></p><p>mkdir /usr/local/nginx</p><p><strong>检查环境</strong></p><p>./configure –prefix=/usr/local/nginx –user=www –group=www –with-http_ssl_module –with-http_gzip_static_module –http-client-body-temp-path=/usr/local/nginx/tmp/client/ –http-proxy-temp-path=/usr/local/nginx/tmp/proxy/ –http-fastcgi-temp-path=/usr/local/nginx/tmp/fcgi/ –with-poll_module –with-file-aio –with-http_realip_module –with-http_addition_module –with-http_addition_module –with-http_random_index_module –with-http_stub_status_module –http-uwsgi-temp-path=/usr/local/nginx/uwsgi_temp –http-scgi-temp-path=/usr/local/nginx/scgi_temp –with-pcre=/usr/local/src/pcre-8.41 –with-stream</p><p><strong>编译</strong></p><p>make</p><p><strong>安装</strong></p><p>make install</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>启动</p><p>ln -s /usr/local/nginx/sbin/nginx /bin/</p><p>nginx</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yum安装jenkins最新版本</title>
      <link href="/2018/12/17/linux-fu-wu/yum-an-zhuang-jenkins-zui-xin-ban-ben/"/>
      <url>/2018/12/17/linux-fu-wu/yum-an-zhuang-jenkins-zui-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>自行安装JDK8</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装jenkins</p><p><strong>添加Jenkins存储库</strong></p><p>wget -O /etc/yum.repos.d/jenkins.repo <a href="http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo" target="_blank" rel="noopener">http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo</a></p><p><strong>添加jenkins包</strong></p><p>rpm –import <a href="https://jenkins-ci.org/redhat/jenkins-ci.org.key" target="_blank" rel="noopener">https://jenkins-ci.org/redhat/jenkins-ci.org.key</a></p><p><strong>安装jenkins</strong></p><p>yum -y install jenkins</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>jenkins默认端口是8080</p><p>修改端口，如果不需要修改端口，可过</p><p>vim /etc/sysconfig/jenkins</p><pre class="line-numbers language-java"><code class="language-java">## Type<span class="token operator">:</span>        <span class="token function">integer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">65535</span><span class="token punctuation">)</span>## Default<span class="token operator">:</span>     <span class="token number">8080</span>## ServiceRestart<span class="token operator">:</span> jenkins## Port Jenkins is listening on<span class="token punctuation">.</span># Set to <span class="token operator">-</span><span class="token number">1</span> to disable#JENKINS_PORT<span class="token operator">=</span><span class="token string">"8080"</span>    ##端口，可修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动</p><p><strong>启动</strong></p><p>systemctl start jenkins</p><p><strong>设置开机启动</strong></p><p>chkconfig jenkins on</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装GitLab最新版本</title>
      <link href="/2018/12/17/linux-fu-wu/yum-an-zhuang-gitlab-zui-xin-ban-ben/"/>
      <url>/2018/12/17/linux-fu-wu/yum-an-zhuang-gitlab-zui-xin-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>安装依赖</p><p><strong>安装policycoreutils-python openssh-server 来开启http跟ssh访问</strong></p><p>yum install curl policycoreutils openssh-server openssh-clients</p><p>systemctl enable sshd</p><p>systemctl start sshd</p><p><strong>安装Postfix以发送通知电子邮件</strong></p><p>yum install postfix</p><p>systemctl enable postfix</p><p>systemctl start postfix</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>安装gitlab</p><p><strong>添加GitLab包存储库</strong></p><p>curl <a href="https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh" target="_blank" rel="noopener">https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh</a> | sudo bash</p><p><strong>安装</strong> </p><p>yum install -y gitlab-ee</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>gitlab默认端口为80</p><p>修改端口，如果不需要修改端口可过</p><p>vim /etc/gitlab/gitlab.rb</p><p>以下就是修改端口需要更改的二个地方</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token number">939</span>  nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token number">940</span>  nginx<span class="token punctuation">[</span><span class="token string">'client_max_body_size'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'250m'</span> <span class="token number">941</span>  nginx<span class="token punctuation">[</span><span class="token string">'redirect_http_to_https'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token number">942</span>  #nginx<span class="token punctuation">[</span><span class="token string">'redirect_http_to_https_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8010</span> <span class="token number">980</span> ##<span class="token operator">!</span> Docs<span class="token operator">:</span> https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>docs<span class="token punctuation">.</span>gitlab<span class="token punctuation">.</span>com<span class="token operator">/</span>omnibus<span class="token operator">/</span>settings<span class="token operator">/</span>nginx<span class="token punctuation">.</span>html#setting<span class="token operator">-</span>the<span class="token operator">-</span>nginx<span class="token operator">-</span>listen<span class="token operator">-</span>port <span class="token number">981</span> nginx<span class="token punctuation">[</span><span class="token string">'listen_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</p><p>以下就是修改端口需要更改的一个地方</p><pre class="line-numbers language-java"><code class="language-java">server <span class="token punctuation">{</span>  listen <span class="token operator">*</span><span class="token operator">:</span><span class="token number">8010</span><span class="token punctuation">;</span>  server_name gitlab<span class="token punctuation">.</span>example<span class="token punctuation">.</span>com<span class="token punctuation">;</span>  server_tokens off<span class="token punctuation">;</span> ## Don't show the nginx version number<span class="token punctuation">,</span> a security best practice<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h2><p>启动</p><p><strong>重新加载配置文件</strong></p><p>gitlab-ctl reconfigure</p><p><strong>启动</strong></p><p>gitlab-ctl start</p><p><strong>停止</strong></p><p>gitlab-ctl stop</p><p><strong>重启</strong></p><p>gitlab-ctl restart</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh免密登录</title>
      <link href="/2018/12/05/linux/ssh-mian-mi-deng-lu/"/>
      <url>/2018/12/05/linux/ssh-mian-mi-deng-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>ssh密钥的简介</p><p>简单来说，就是在你安装以下的步骤后，在本机用户的用户目录中的.ssh目录中生成二个文件，为私钥(id_rsa)跟密钥(id_rsa.pub)。</p><p>私钥：私钥就是对应密钥的一个加密文件。</p><p>密钥：密钥要存储在你要免密登录的机器中的家目录下的.ssh目录下的authorized_keys文件，如果authorized_keys文件不存在，可以新建</p><p>注意：</p><p>authorized_keys文件的权限一定要是600</p><p>id_rsa私钥文件的权限一定要是600</p><p>id_rsa.pub密钥文件的权限一定要是644</p><p>警告：如果私钥文件被人获取，只要把私钥文件放在他们的机器中，也一样可以免密登录你们设置好的免密登录机器中</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>生成私钥密钥文件</p><p>ssh-keygen -t rsa</p><p>一直回车就ok了</p><p>这步骤完成了，私钥跟密钥文件就在你们用户的家目录中生成了</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip 获取最新版本安装，以python方式安装</title>
      <link href="/2018/12/05/python/pip-huo-qu-zui-xin-ban-ben-an-zhuang-yi-python-fang-shi-an-zhuang/"/>
      <url>/2018/12/05/python/pip-huo-qu-zui-xin-ban-ben-an-zhuang-yi-python-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h3><p>获取最新的版本安装脚本</p><p>wget <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h3><p>使用python运行脚本安装</p><p>python get-pip.py</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h3><p>测试pip</p><p>pip -V</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码安装svn(Subversion-1.10.3)</title>
      <link href="/2018/11/22/linux-fu-wu/yuan-ma-an-zhuang-svn-subversion-1.10.3/"/>
      <url>/2018/11/22/linux-fu-wu/yuan-ma-an-zhuang-svn-subversion-1.10.3/</url>
      
        <content type="html"><![CDATA[<h1 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h1><p>安装各种依赖</p><h4 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a><strong>yum安装</strong></h4><p>yum -y install gcc gcc-c++ sqlite* zlib-devel zlib expat-devel openssh-clients</p><h4 id="安装apr"><a href="#安装apr" class="headerlink" title="安装apr"></a><strong>安装apr</strong></h4><p><strong>下载</strong></p><p>wget <a href="http://mirror.bit.edu.cn/apache//apr/apr-1.6.5.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache//apr/apr-1.6.5.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf apr-1.6.5.tar.gz </p><p><strong>安装</strong></p><p>cd apr-1.6.5</p><p>./configure –prefix=/usr/local/apr</p><p>make</p><p>make install</p><h4 id="安装apr-util"><a href="#安装apr-util" class="headerlink" title="安装apr-util"></a><strong>安装apr-util</strong></h4><p><strong>下载</strong></p><p>wget <a href="http://mirrors.hust.edu.cn/apache//apr/apr-util-1.6.1.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache//apr/apr-util-1.6.1.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf apr-util-1.6.1.tar.gz</p><p><strong>安装</strong></p><p>cd apr-util-1.6.1</p><p>./configure –prefix=/usr/local/apr-util –with-apr=/usr/local/apr</p><p>make</p><p>make install</p><h1 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h1><p>安装Subversion</p><p><strong>下载</strong></p><p>wget <a href="http://mirror.bit.edu.cn/apache/subversion/subversion-1.10.3.tar.gz" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/subversion/subversion-1.10.3.tar.gz</a></p><p>wget <a href="https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz" target="_blank" rel="noopener">https://www.sqlite.org/2018/sqlite-autoconf-3250300.tar.gz</a></p><p><strong>解压</strong></p><p>tar -zxf subversion-1.10.3.tar.gz</p><p>tar -zxf sqlite-autoconf-3250300.tar.gz</p><p><strong>移动</strong></p><p>mv sqlite-autoconf-3250300 subversion-1.10.3/sqlite-amalgamation</p><p><strong>安装</strong></p><p>cd subversion-1.10.3</p><p>./configure –prefix=/usr/local/svn/ –with-apr=/usr/local/apr –with-apr-util=/usr/local/apr-util -with-utf8proc=internal –with-zlib –enable-maintainer-mode –with-lz4=internal</p><p>make</p><p>make install</p><h1 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h1><p>设置环境变量</p><p>vim /etc/profile</p><pre class="line-numbers language-shell"><code class="language-shell">##SVNexport SVN_HOME=/usr/local/svn/export PATH=$PATH:$SVN_HOME/binsource ~/.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>source /etc/profile</p><h1 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a><strong>第四步</strong></h1><p>配置svn-设置代码仓库</p><p><strong>创建目录做为代码仓库目录</strong></p><p>mkdir /svn</p><p><strong>进入</strong></p><p>cd /svn</p><p><strong>创建代码仓库（一定要在svn目录下，test代表代码仓库名）</strong></p><p>svnadmin create test</p><h1 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a><strong>第五步</strong></h1><p>启动访问svn服务</p><p><strong>启动</strong></p><p>svnserve -d -r /svn –listen-port=3690</p><p><strong>访问</strong></p><p>svn://IP地址:3690:/test</p><h1 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a><strong>第六步</strong></h1><p>设置svn开机自启（没需求可跳过）</p><p>vim /etc/rc.d/rc.local</p><pre class="line-numbers language-shell"><code class="language-shell">/usr/local/svn/bin/svnserve -d -r /svn --listen-port=3690<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a><strong>第七步</strong></h1><p>代码仓库权限配置</p><p><strong>配置目录，我的代码仓库在/svn目录中，配置文件就在/svn目录中</strong></p><p>cd /svn/test/conf/</p><p>vim svnserve.conf</p><p><strong>代码仓库权限配置文件：svnserve.conf</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装字体</title>
      <link href="/2018/11/19/linux/an-zhuang-zi-ti/"/>
      <url>/2018/11/19/linux/an-zhuang-zi-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h2><p>明确linux字体跟windows的位置</p><p>linux: /usr/share/fonts</p><p>windows：C:\Windows\Fonts”</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h2><p>准备好字体，上传至linux</p><p><strong>进入字体目录，可以用fonts目录下原来存在的字体目录，也可以新建目录。</strong></p><p><strong>我这边选择使用原先目录</strong></p><p>cd /usr/share/fonts</p><p>cd lyx/</p><p><strong>安装</strong></p><p>yum -y install fontconfig mkfontscale</p><p><strong>这边选使用rz来上传</strong></p><p>rz timesbd.ttf</p><p><strong>修改权限</strong></p><p>chmod 755 *.ttf</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a><strong>第三步</strong></h2><p>建立字体缓存，如果命令报错没有，请yum安装</p><p>mkfontscale</p><p>mkfontdir</p><p>fc-cache -fv</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装jenkins2.3，war包安装</title>
      <link href="/2018/11/15/linux-fu-wu/an-zhuang-jenkins2.3-war-bao-an-zhuang/"/>
      <url>/2018/11/15/linux-fu-wu/an-zhuang-jenkins2.3-war-bao-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载jenkins</p><p>分享二种下载方式</p><p><strong>系统下载</strong></p><p>wget <a href="http://mirrors.jenkins.io/war-stable/latest/jenkins.war" target="_blank" rel="noopener">http://mirrors.jenkins.io/war-stable/latest/jenkins.war</a></p><p><strong>官方下载</strong></p><p><a href="https://jenkins.io/download/" target="_blank" rel="noopener">https://jenkins.io/download/</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装tomcat，jdk</p><p><strong>可以参考我之前的文章</strong></p><p>jdk：<a href="http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85">http://www.linux91.cn/c/Liunx__centos7__JDK8%E5%AE%89%E8%A3%85</a></p><p>tomcat8：<a href="http://www.linux91.cn/c/Linux__centos7__tomcat8">http://www.linux91.cn/c/Linux__centos7__tomcat8</a></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装 </p><p><strong>移动</strong></p><p>mv jenkins.war /usr/local/tomcat/webapps/</p><p><strong>启动 后 等待3秒</strong></p><p>/usr/local/tomcat/bin/startup.sh</p><p><strong>删除加移动</strong></p><p>cd /usr/local/tomcat/webapps/</p><p>rm -rf ROOT/*</p><p>cp -a jenkins/* ROOT/</p><p><strong>重启</strong></p><p>/usr/local/tomcat/bin/shutdown.sh</p><p>/usr/local/tomcat/bin/startup.sh</p><p>最后，进入jenkins中</p><p>记得是8080端口</p><p>进去后，会让你去系统中的一个文件中获取密码，按提醒操作</p><p>还有让你选择，是安装，系统推荐的插件，还是自定义插件，建议选择推荐</p><p>最后就会让你，设置帐号密码</p><p><strong>到这里本章就结束了</strong></p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装redis4.0</title>
      <link href="/2018/11/15/redis/an-zhuang-redis4.0/"/>
      <url>/2018/11/15/redis/an-zhuang-redis4.0/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)</p><p>zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步</p><p>Redis 是一个高性能的key-value数据库。 redis的出现，很大程度补偿了memcached这类key/value存储的不足，在部 分场合可以对关系数据库起到很好的补充作用。它提供了Java，C/C++，C#，PHP，JavaScript，Perl，Object-C，Python，Ruby，Erlang等客户端，使用很方便。</p><p>Redis支持主从同步。数据可以从主服务器向任意数量的从服务器上同步，从服务器可以是关联其他从服务器的主服务器。这使得Redis可执行单层树复制。存盘可以有意无意的对数据进行写操作。由于完全实现了发布/订阅机制，使得从数据库在任何地方同步树时，可订阅一个频道并接收主服务器完整的消息发布记录。同步对读取操作的可扩展性和数据冗余很有帮助。</p><p><a href="http://92.linux91.cn/attachment/20181115/b01a245897b4488d99a21ae444ae481c.jpg" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/b01a245897b4488d99a21ae444ae481c.jpg" alt="img"></a></p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装依赖包</p><p>yum -y install gcc gcc++</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>解压，移动，编译，安装，配置</p><p><strong>解压</strong></p><p>tar -zxf redis-4.0.11.tar.gz </p><p><strong>移动</strong></p><p>mv redis-4.0.11 /usr/local/redis</p><p>cd /usr/local/redis</p><p><strong>编译</strong></p><p>make MALLOC=libc</p><p>或</p><p>make</p><p><strong>安装</strong></p><p>cd src</p><p>make install</p><p><strong>修改配置文件</strong></p><p>vim /usr/local/redis/redis.conf</p><pre class="line-numbers language-shell"><code class="language-shell">daemonize yes   #找到这个配置行，on修改成yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>启动</p><p><strong>指定配置文件启动</strong></p><p>/usr/local/redis/src/redis-server /usr/local/redis/redis.conf</p><p><strong>不指定</strong></p><p>/usr/local/redis/src/redis-server</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装 gitlab</title>
      <link href="/2018/11/13/linux-fu-wu/docker-an-zhuang-gitlab/"/>
      <url>/2018/11/13/linux-fu-wu/docker-an-zhuang-gitlab/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a><strong>第一步</strong></h3><p>需要安装docker</p><p><strong>可以参考之前的文章</strong></p><p>docker1.8：<a href="http://www.linux91.cn/c/centos7安装docker1_18">http://www.linux91.cn/c/centos7%E5%AE%89%E8%A3%85docker1_18</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a><strong>第二步</strong></h3><p>拉取镜像并启动</p><p><strong>拉取镜像</strong></p><p>docker pull gitlab/gitlab-ce:latest</p><p><strong>启动</strong></p><p>将hostname替换为本机的IP地址</p><p>docker run –detach –hostname 192.168.0.251 –publish 443:443 –publish 80:80 –publish 22:22 –name gitlab –restart always –volume /srv/gitlab/config:/etc/gitlab –volume /srv/gitlab/logs:/var/log/gitlab –volume /srv/gitlab/data:/var/opt/gitlab gitlab/gitlab-ce:latest</p><h3 id="注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意"><a href="#注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意" class="headerlink" title="注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意"></a><strong>注意：目前安装暂时完毕，以后有补上会接着更新，有几个问题需要注意</strong></h3><p>1.要注意系统内存，gitlab官方是要求2G以上的内存，如果没有到2G或以到2G都建议先部署虚拟内存，怎么部署虚拟内存，可以查看我之前的文章</p><p>2.gitlab启动的比较慢，要是没启动成功就会报502，所以请等待个1-2分钟，在去访问</p><p>3.gitlab第一次访问，会让你更新root管理员的密码</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Yearning-SQL审核平台</title>
      <link href="/2018/11/09/sql-shen-he/an-zhuang-yearning-sql-shen-he-ping-tai/"/>
      <url>/2018/11/09/sql-shen-he/an-zhuang-yearning-sql-shen-he-ping-tai/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Yearning 开源的MYSQL SQL语句审核平台</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装环境，需要python3.6,mysql,nginx</p><p>注意：mysql跟nginx都可以yum安装，python3.6只能源码安装</p><p><strong>安装这些服务可以参考一下我之前的文章</strong></p><p>python3.6：<a href="http://www.linux91.cn/c/linux_centos7_Python3_6_3安装">http://www.linux91.cn/c/linux_centos7_Python3_6_3%E5%AE%89%E8%A3%85</a></p><p>mysql：<a href="http://www.linux91.cn/c/linux___centos7_下源码安装mysql5_7">http://www.linux91.cn/c/linux___centos7_%E4%B8%8B%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql5_7</a></p><p>nginx：<a href="http://www.linux91.cn/c/liunx___centos7_下安装Yearning_SQL审核平台">http://www.linux91.cn/c/liunx___centos7_%E4%B8%8B%E5%AE%89%E8%A3%85Yearning_SQL%E5%AE%A1%E6%A0%B8%E5%B9%B3%E5%8F%B0</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>mysql配置</p><p><strong>进入mysql</strong></p><p>mysql -u root -p</p><p><strong>创建数据库</strong></p><p>CREATE DATABASE IF NOT EXISTS Yearning default charset utf8 COLLATE utf8_general_ci;</p><p><strong>创建数据库用户</strong></p><p>grant all on <em>.</em> to ‘yearning’@’%’ identified by ‘yearning’;</p><p><strong>刷新权限</strong></p><p>flush privileges;</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>下载Yearning源并解压</p><p>注意：如果去官方下载，一定要下载1.2版本的，因为1.2跟1.3版本安装方式不同</p><p>wget <a href="https://github.com/cookieY/Yearning/archive/v1.2.0.zip" target="_blank" rel="noopener">https://github.com/cookieY/Yearning/archive/v1.2.0.zip</a></p><p>unzip v1.2.0.zip</p><p>mv Yearning-1.2.0 Yearning</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>修改配置Yearning的配置文件</p><p>cd Yearning/src</p><p>cp -a deploy.conf.template deploy.conf</p><p>vim deploy.conf</p><p><strong>以下deploy.conf的配置，请按实际情况填写</strong></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token constant">db</span> <span class="token attr-value"><span class="token punctuation">=</span> Yearning</span><span class="token constant">address</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span>yearning</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span>yearning</span><span class="token selector">[host]</span><span class="token constant">ipaddress</span> <span class="token attr-value"><span class="token punctuation">=</span> 192.168.1.39:8080</span><span class="token selector">[Inception]</span><span class="token constant">ip</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 6669</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> root</span><span class="token constant">password</span>  <span class="token attr-value"><span class="token punctuation">=</span> x</span><span class="token constant">backupdb</span> <span class="token attr-value"><span class="token punctuation">=</span> 127.0.0.1</span><span class="token constant">backupport</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">backupuser</span> <span class="token attr-value"><span class="token punctuation">=</span> root</span><span class="token constant">backuppassword</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token selector">[LDAP]</span><span class="token constant">LDAP_SERVER</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_SCBASE</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_DOMAIN</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">LDAP_TYPE</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token selector">[email]</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">smtp_server</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span class="token constant">smtp_port</span> <span class="token attr-value"><span class="token punctuation">=</span> 25</span><span class="token selector">[sql]</span><span class="token constant">limit</span> <span class="token attr-value"><span class="token punctuation">=</span> 1000</span><span class="token selector">[webhook]</span><span class="token constant">dingding</span> <span class="token attr-value"><span class="token punctuation">=</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解释</strong></p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token constant">db</span> <span class="token attr-value"><span class="token punctuation">=</span> 所创建的库名</span><span class="token constant">address</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库地址</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库端口</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库密码</span><span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span> 数据库用户</span><span class="token selector">[host]</span><span class="token constant">ipaddress</span> <span class="token attr-value"><span class="token punctuation">=</span> 服务器ip地址:端口 (涉及跨域十分重要!!设置不正确将无法登陆!!)</span>            例如 本机地址为192.168.1.2 nginx端口为80(端口可自己定义，定义什么端口就填写什么端口)            则应填写为 192.168.1.2:80 之后只能通过该地址访问平台其他地址一概无效!            注意！访问的是nginx的端口不是后端8000端口！            (仅对于v1.2版本以下版本，对于1.2以上版本此配置信息只用来消息推送时显示平台地址）特别注意！ 以下配置信息为v1.2版本以下配置信息。v1.2版本及以上版本不存在以下配置信息<span class="token selector">[Inception]</span><span class="token constant">ip</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception地址</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception端口</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> Inception用户名</span><span class="token constant">password</span>  <span class="token attr-value"><span class="token punctuation">=</span> Inception密码</span><span class="token constant">backupdb</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库地址</span><span class="token constant">backupport</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库端口</span><span class="token constant">backupuser</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库用户名</span><span class="token constant">backuppassword</span> <span class="token attr-value"><span class="token punctuation">=</span> 备份数据库密码</span><span class="token selector">[LDAP]</span> LDAP相关设置<span class="token constant">LDAP_SERVER</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP服务地址</span><span class="token constant">LDAP_SCBASE</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP dc 设置 如 dc=xxx,dc=com</span><span class="token constant">LDAP_DOMAIN</span> <span class="token attr-value"><span class="token punctuation">=</span> LDAP域名 如 xxx.com</span><span class="token constant">LDAP_TYPE</span> <span class="token attr-value"><span class="token punctuation">=</span> 1  1 通过域名进行ldap认证  2 通过uid进行ldap认证 3 通过cn进行ldap认证</span><span class="token selector">[email]</span> 邮箱推送相关设置<span class="token constant">username</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱发件账号 如 xxxx@163.com</span><span class="token constant">password</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱发件账号密码</span><span class="token constant">smtp_server</span> <span class="token attr-value"><span class="token punctuation">=</span> 邮箱stmp地址, 具体地址请咨询对应邮箱提供者</span><span class="token selector">[sql]</span><span class="token constant">limit</span> <span class="token attr-value"><span class="token punctuation">=</span> 100 查询最高的Limit数量</span><span class="token selector">[webhook]</span><span class="token constant">dingding</span> <span class="token attr-value"><span class="token punctuation">=</span>  权限提交,查询工单等其他非sql工单提交消息推送钉钉webhook</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>配置其它依赖</p><p><strong>安装相应python依赖库</strong></p><p>/usr/local/python3/bin/pip3 install -r requirements.txt</p><p><strong>初始化数据库</strong></p><p>python3 manage.py makemigrations core &amp;&amp; python3 manage.py migrate core</p><p><strong>添加初始化用户</strong></p><p>echo “from core.models import Account;Account.objects.create_user(username=’admin’, password=’Jlkj#123’, group=’admin’,is_staff=1)” | python3 manage.py shell</p><p><strong>初始化权限</strong></p><p>echo “from core.models import grained;grained.objects.get_or_create(username=’admin’, permissions={‘person’: [], ‘ddl’: ‘1’, ‘ddlcon’: [], ‘dml’: ‘1’, ‘dmlcon’: [], ‘dic’: ‘1’, ‘diccon’: [], ‘dicedit’: ‘0’, ‘user’: ‘1’, ‘base’: ‘1’, ‘dicexport’: ‘0’})” | python3 manage.py shell</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>移动网页文件到nginx的网页目录中</p><p>cp -rf Yearning/webpage/dist/* $NGINX_HOME/html/</p><h2 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h2><p>启动django</p><p>cd Yearning/src</p><p>python3 manage.py runserver 0.0.0.0:8000 </p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum安装nginx</title>
      <link href="/2018/11/09/nginx/yum-an-zhuang-nginx/"/>
      <url>/2018/11/09/nginx/yum-an-zhuang-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>添加nginx到yum源中</p><pre class="line-numbers language-shell"><code class="language-shell">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>yum安装nginx</p><p>yum install -y nginx</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>启动并设置开机自启</p><p>systemctl start nginx</p><p>systemctl enable nginx</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>nginx目录配置路径</p><p><strong>网站文件存放默认目录</strong></p><p>/usr/share/nginx/html</p><p><strong>网站默认站点配置</strong></p><p>/etc/nginx/conf.d/default.conf</p><p><strong>自定义Nginx站点配置文件存放目录</strong></p><p>/etc/nginx/conf.d/Nginx</p><p><strong>全局配置</strong></p><p>/etc/nginx/nginx.conf</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yearning SQL审核平台1.3.0版本--docker安装</title>
      <link href="/2018/11/09/sql-shen-he/yearning-sql-shen-he-ping-tai-1.3.0-ban-ben-docker-an-zhuang/"/>
      <url>/2018/11/09/sql-shen-he/yearning-sql-shen-he-ping-tai-1.3.0-ban-ben-docker-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Yearning 开源的MYSQL SQL语句审核平台</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>自行安装docker-ce跟docker-compose</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装Yearning</p><p><strong>拉取服务，如果没有git命令，直接用yum安装</strong></p><p>git clone <a href="https://github.com/cookieY/Yearning.git" target="_blank" rel="noopener">https://github.com/cookieY/Yearning.git</a></p><p><strong>进入Yearning中的docker目录</strong></p><p>cd Yearning/install/yearning-docker-compose/</p><p><strong>启动</strong></p><p>docker-compose up -d</p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><ol><li><p>记得打开docker服务</p></li><li><p>保持3306，8080，8000这三个端口不存在，没被其它服务占有</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InceptionSQL自动审核-无web界面----第二种方式安装</title>
      <link href="/2018/11/09/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-er-chong-fang-shi-an-zhuang/"/>
      <url>/2018/11/09/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-er-chong-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Inception是一款用于MySQL语句的审核的开源工具，不但具备自动化审核功能，同时还具备执行、生成对影响数据的回滚语句功能。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装lnception需要以下三个服务，bison2.5.1。</p><p>需要安装以下三个组件服务，可以参考我之前的文章</p><p>bison2.5.1：<a href="http://www.linux91.cn/c/linux_centos7_bison_2_5_1安装">http://www.linux91.cn/c/linux_centos7_bison_2_5_1%E5%AE%89%E8%A3%85</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装相关依赖包</p><p>yum -y install bison ncurses-libs libncurses5-devel ncurses-devel wget git cmake openssl gcc-c++ gcc openssl-devel MySQL-python </p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装Inception</p><p><strong>把安装包移动至opt目录中，并安装</strong></p><p>mkdir -p /data/inception</p><p>cd /opt/</p><p>unzip inception-master.zip </p><p>mv inception-master inception</p><p>cd inception</p><p>sh inception_build.sh debug</p><p><strong>创建配置目录，并把执行文件复制过去</strong></p><p>cd debug/sql/</p><p>mkdir -p /data/inception /data/inception/bin /data/inception/temp</p><p>cp Inception /data/inception/bin/</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>修改配置文件</p><p>vim /etc/inc.cnf</p><pre class="line-numbers language-shell"><code class="language-shell">[inception]general_log=1general_log_file=/opt/inception/inception.logport=6669socket=/opt/inception/inc.socketcharacter-set-client-handshake=0character-set-server=utf8inception_remote_system_password=123456inception_remote_system_user=rootinception_remote_backup_port=3306inception_remote_backup_host=127.0.0.1inception_support_charset=utf8mb4inception_enable_nullable=0inception_check_primary_key=1inception_check_column_comment=1inception_check_table_comment=1inception_osc_min_table_size=1inception_osc_bin_dir=/opt/inception/tempinception_osc_chunk_time=0.1inception_ddl_support=1inception_enable_blob_type=1inception_check_column_default_value=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>启动</p><p>/data/inception/bin/Inception –defaults-file=/etc/inc.cnf &amp;</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>登录验证</p><p> mysql -uroot -h127.0.0.1 -P6669</p><p> inception get variables;</p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InceptionSQL自动审核-无web界面----第一种方式安装</title>
      <link href="/2018/11/08/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-yi-chong-fang-shi-an-zhuang/"/>
      <url>/2018/11/08/sql-shen-he/inceptionsql-zi-dong-shen-he-wu-web-jie-mian-di-yi-chong-fang-shi-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Inception是一款用于MySQL语句的审核的开源工具，不但具备自动化审核功能，同时还具备执行、生成对影响数据的回滚语句功能。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>安装lnception需要以下三个服务，python3.6，pip9.0.1，bison2.5.1</p><p>需要安装以下三个组件服务，可以参考我之前的文章</p><p>python3.6：<a href="http://www.linux91.cn/c/linux_centos7_Python3_6_3安装">http://www.linux91.cn/c/linux_centos7_Python3_6_3%E5%AE%89%E8%A3%85</a></p><p>pip9.0.1：<a href="http://www.linux91.cn/c/linux_centos7_pip_9_0_3安装">http://www.linux91.cn/c/linux_centos7_pip_9_0_3%E5%AE%89%E8%A3%85</a></p><p>bison2.5.1：<a href="http://www.linux91.cn/c/linux_centos7_bison_2_5_1安装">http://www.linux91.cn/c/linux_centos7_bison_2_5_1%E5%AE%89%E8%A3%85</a></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装pip常用组件</p><p>pip install numpy scipy matplotlib scikit-learn</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>安装lnception</p><p>unzip inception-master.zip</p><p>cd inception-master</p><p>cmake .</p><p>cmake -DWITH_DEBUG=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/inception/ -DMYSQL_DATADIR=/inception -DWITH_SSL=yes -DCMAKE_BUILD_TYPE=RELEASE-DWITH_ZLIB=bundled-DMY_MAINTAINER_CXX_WARNINGS=”-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing -Wno-unused-parameter -Woverloaded-virtual” -DMY_MAINTAINER_C_WARNINGS=”-Wall -Wextra -Wunused -Wwrite-strings -Wno-strict-aliasing -Wdeclaration-after-statement”</p><p>make &amp;&amp; make install</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>添加配置文件</p><p>vim /etc/inc.cnf</p><pre class="line-numbers language-shell"><code class="language-shell">[inception]general_log=1general_log_file=inc.logport=6669socket=/tmp/inc.socketcharacter-set-client-handshake=0character-set-server=utf8mb4inception_remote_system_password=backupinception_remote_system_user=backupinception_remote_backup_port=3306inception_remote_backup_host=192.168.22.130inception_support_charset=utf8,utf8mb4,latin1inception_enable_nullable=0inception_check_primary_key=1inception_check_column_comment=1inception_check_table_comment=1inception_osc_min_table_size=1inception_osc_bin_dir=/usr/bininception_osc_chunk_time=0.1inception_ddl_support=1inception_enable_blob_type=1inception_check_column_default_value=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>启动Inception</p><p>/usr/local/inception/bin/Inception –defaults-file=/etc/inc.cnf &amp;</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>测试</p><p>查看端口是否存在</p><p>netstat -an | grep 6669</p><p>本地登录变量测试</p><p>mysql -uroot -P6669 -h127.0.0.1</p><p>inception get variables;</p><p>如果有出结果，就证明安装完成</p><h2 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h2><h3 id="第一个错误问题"><a href="#第一个错误问题" class="headerlink" title="第一个错误问题"></a>第一个错误问题</h3><p>在安装的时候，遇到了一个错误：make[2]: <em>*</em> [sql/CMakeFiles/sql.dir/sql_yacc.cc.o]</p><p>解决办法：</p><p>这个报错是代表你系统中的bison版本太高</p><h3 id="第二个错误问题"><a href="#第二个错误问题" class="headerlink" title="第二个错误问题"></a>第二个错误问题</h3><p>在安装的时候，还遇到另一个报错，一直显示目标目录不存在</p><p>CMake Error: The source directory “/j/inception-master/ -DMYSQL_DATADIR=/inception” does not exist.<br>Specify –help for usage, or press the help button on the CMake GUI.</p><p>解决办法：</p><p>在-DMYSQL_DATADIR左右的空格保持到只有一个，如果你们按我这个文章搭建就不会出现这种问题，因为文章中的所有命令都是解决了问题实验好后的命令</p>]]></content>
      
      
      <categories>
          
          <category> sql审核 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql审核 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bison-2.5.1安装</title>
      <link href="/2018/11/06/linux-fu-wu/bison-2.5.1-an-zhuang/"/>
      <url>/2018/11/06/linux-fu-wu/bison-2.5.1-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>因为我们是要安装bison2.5.1的版本，centos中可能会自带bison的服务，一般版本会过高</p><p>查看系统中bison的版本，要是高于2.5.1就进行卸载</p><p>bison -V</p><p>卸载</p><p>yum remove bison</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>下载bison</p><p>wget <a href="http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz" target="_blank" rel="noopener">http://ftp.gnu.org/gnu/bison/bison-2.5.1.tar.gz</a></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>安装bison</p><p>tar -zxf bison-2.5.1.tar.gz </p><p>cd bison-2.5.1</p><p>./configure </p><p>make</p><p>make install</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>测试bison</p><p>先确实bison在那个目录中。</p><p>which bison</p><p>正常会是在/usr/local/bin/bison</p><p>做软链接</p><p>ln -s /usr/local/bin/bison /usr/bin/bison</p><p>在测试</p><p>bison -V</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7-pip-9.0.3安装</title>
      <link href="/2018/11/06/python/centos7-pip-9.0.3-an-zhuang/"/>
      <url>/2018/11/06/python/centos7-pip-9.0.3-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>下载pip9.0</p><p>wget <a href="https://files.pythonhosted.org/packages/c4/44/e6b8056b6c8f2bfd1445cc9990f478930d8e3459e9dbf5b8e2d2922d64d3/pip-9.0.3.tar.gz" target="_blank" rel="noopener">https://files.pythonhosted.org/packages/c4/44/e6b8056b6c8f2bfd1445cc9990f478930d8e3459e9dbf5b8e2d2922d64d3/pip-9.0.3.tar.gz</a></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安装pip</p><p>tar -zxf pip-9.0.3.tar.gz</p><p>cd pip-9.0.3</p><p>python setup.py install</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>测试pip是否安装成功</p><p>pip -V</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 下源码安装mysql5.7</title>
      <link href="/2018/11/05/mysql/centos7-xia-yuan-ma-an-zhuang-mysql5.7/"/>
      <url>/2018/11/05/mysql/centos7-xia-yuan-ma-an-zhuang-mysql5.7/</url>
      
        <content type="html"><![CDATA[<h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>下载MySQL5.7版本</p><p>官方网页：<a href="https://www.mysql.com/" target="_blank" rel="noopener">https://www.mysql.com/</a></p><p>下载方式：wget ht<a href="tps://cdn.mysql.com/Downloads/MySQL-5.7/mysql-5." target="_blank" rel="noopener">tps://cdn.mysql.com//Downloads/MySQL-5.7/mysql-5.</a>7.23.tar.gz</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>安装依赖包</p><p>yum -y install ncurses ncurses-devel bison cmake gcc gcc-c++ make</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>创建数据库程度用户</p><p>useradd -s /sbin/nologin mysql</p><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>由于mysql5.7版本需求boost的版本要高，系统自带的boost版本偏低，不可用</p><h3 id="在-usr-local下创建一个名为boost的文件夹"><a href="#在-usr-local下创建一个名为boost的文件夹" class="headerlink" title="在/usr/local下创建一个名为boost的文件夹"></a><strong>在/usr/local下创建一个名为boost的文件夹</strong></h3><p>mkdir -p /usr/local/boost</p><h3 id="进入这个新创建的文件夹然后下载boost"><a href="#进入这个新创建的文件夹然后下载boost" class="headerlink" title="进入这个新创建的文件夹然后下载boost"></a><strong>进入这个新创建的文件夹然后下载boost</strong></h3><p>cd /usr/local/boost</p><p>wget <a href="http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz" target="_blank" rel="noopener">http://www.sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.gz</a></p><h3 id="解压"><a href="#解压" class="headerlink" title="解压"></a><strong>解压</strong></h3><p>tar -xvzf boost_1_59_0.tar.gz</p><h2 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h2><p>安装mysql</p><h3 id="解压MYSQL源码包并进入"><a href="#解压MYSQL源码包并进入" class="headerlink" title="解压MYSQL源码包并进入"></a><strong>解压MYSQL源码包并进入</strong></h3><p>tar -zxf mysql-5.7.23.tar.gz</p><p>cd mysql-5.7.23/</p><h3 id="检测安装环境"><a href="#检测安装环境" class="headerlink" title="检测安装环境"></a><strong>检测安装环境</strong></h3><p>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock -DSYSCONFDIR=/etc -DSYSTEMD_PID_DIR=/usr/local/mysql -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_ARCHIVE_STORAGE_ENGINE=1 -DWITH_BLACKHOLE_STORAGE_ENGINE=1 -DWITH_PERFSCHEMA_STORAGE_ENGINE=1 -DMYSQL_DATADIR=/usr/local/mysql/data -DWITH_BOOST=boost -DWITH_SYSTEMD=1 -DDOWNLOAD_BOOST=1 -DWITH_BOOST=/usr/local/boost</p><h4 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h4><p>-DCMAKE_INSTALL_PREFIX=/usr/local/mysql</p><p>​    ##定义安装目录</p><p>-DMYSQL_UNIX_ADDR=/usr/local/mysql/mysql.sock</p><p>​    ##连接数据库socket路径</p><p>-DSYSCONFDIR=/etc</p><p>​    ##指定初始化参数文件目录（my.cnf）</p><p>-DSYSTEMD_PID_DIR=/usr/local/mysql</p><p>​    ##数据库目录</p><p>-DDEFAULT_CHARSET=utf8</p><p>​    ##指定默认使用的字符集编码</p><p>-DDEFAULT_COLLATION=utf8_general_ci</p><p>​    ##指定默认使用的字符集校对规则，utf8_general_ci是适用于UTF-8字符集的通用规则</p><p>-DWITH_INNOBASE_STORAGE_ENGINE=1</p><p>​    ##支持InnoDB引擎</p><p>-DWITH_PERFSCHEMA_STORAGE_ENGINE=1</p><p>​    ##安装支持数据库分区</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a><strong>编译</strong></h3><p>make</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h3><p>make install</p><h2 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h2><p>优化mysql的配置</p><h3 id="对数据库目录进行权限设置"><a href="#对数据库目录进行权限设置" class="headerlink" title="对数据库目录进行权限设置"></a><strong>对数据库目录进行权限设置</strong></h3><p>chown -R mysql.mysql /usr/local/mysql/</p><h3 id="配置mysql主配置文件"><a href="#配置mysql主配置文件" class="headerlink" title="配置mysql主配置文件"></a><strong>配置mysql主配置文件</strong></h3><h4 id="清空mysql主配置文件中的默认配置"><a href="#清空mysql主配置文件中的默认配置" class="headerlink" title="清空mysql主配置文件中的默认配置"></a><strong>清空mysql主配置文件中的默认配置</strong></h4><p>echo ‘’ &gt; /etc/my.cnf</p><h4 id="添加mysql主配置文件中的默认配置"><a href="#添加mysql主配置文件中的默认配置" class="headerlink" title="添加mysql主配置文件中的默认配置"></a><strong>添加mysql主配置文件中的默认配置</strong></h4><p>vim /etc/my.cnf</p><p>增加以下的配置</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[client]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysql]</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token selector">[mysqld]</span><span class="token constant">user</span> <span class="token attr-value"><span class="token punctuation">=</span> mysql</span><span class="token constant">basedir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql</span><span class="token constant">datadir</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/data</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306</span><span class="token constant">character_set_server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token constant">pid-file</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysqld.pid</span><span class="token constant">socket</span> <span class="token attr-value"><span class="token punctuation">=</span> /usr/local/mysql/mysql.sock</span><span class="token constant">server-id</span> <span class="token attr-value"><span class="token punctuation">=</span> 1</span><span class="token constant">sql_mode</span><span class="token attr-value"><span class="token punctuation">=</span>NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_AUTO_VALUE_ON_ZERO,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,PIPES_AS_CONCAT,ANSI_QUOTES</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id><a href="#" class="headerlink" title=" "></a> </h4><h4 id="权限赋予"><a href="#权限赋予" class="headerlink" title="权限赋予"></a><strong>权限赋予</strong></h4><p>chown mysql:mysql /etc/my.cnf</p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a><strong>设置环境变量</strong></h3><p>vim /etc/profile</p><p>增加以下的配置</p><pre class="line-numbers language-shell"><code class="language-shell">PATH=/usr/local/mysql/bin:/usr/local/mysql/lib:$PATHexport PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>source /etc/profile</p><p>   ##刷新配置文件</p><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a><strong>初始化数据库</strong></h3><h4 id="进入mysql目录"><a href="#进入mysql目录" class="headerlink" title="进入mysql目录"></a><strong>进入mysql目录</strong></h4><p>cd /usr/local/mysql/bin/</p><h4 id="初始化数据库-1"><a href="#初始化数据库-1" class="headerlink" title="初始化数据库"></a><strong>初始化数据库</strong></h4><p>mysqld –initialize-insecure –user=mysql –basedir=/usr/local/mysql –datadir=/usr/local/mysql/data</p><h3 id="添加系统服务"><a href="#添加系统服务" class="headerlink" title="添加系统服务"></a><strong>添加系统服务</strong></h3><p>cp /usr/local/mysql/usr/lib/systemd/system/mysqld.service /usr/lib/systemd/system/</p><p>systemctl daemon-reload</p><h3 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a><strong>设置开机自启</strong></h3><p>systemctl enable mysqld</p><h3 id="开启mysql服务"><a href="#开启mysql服务" class="headerlink" title="开启mysql服务"></a><strong>开启mysql服务</strong></h3><p>systemctl start mysqld</p><h3 id="查看mysql服务是否开启"><a href="#查看mysql服务是否开启" class="headerlink" title="查看mysql服务是否开启"></a><strong>查看mysql服务是否开启</strong></h3><p>netstat -an | grep 3306</p><h3 id="修改mysql密码"><a href="#修改mysql密码" class="headerlink" title="修改mysql密码"></a><strong>修改mysql密码</strong></h3><h4 id="初始数据库是没有密码的，所以直接进入"><a href="#初始数据库是没有密码的，所以直接进入" class="headerlink" title="初始数据库是没有密码的，所以直接进入"></a><strong>初始数据库是没有密码的，所以直接进入</strong></h4><p>mysql -u root</p><h4 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h4><h4 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a><strong>修改密码</strong></h4><p>update mysql.user set authentication_string=password(‘密码’) where user=’root’;</p><h4 id="增加外部连接用户"><a href="#增加外部连接用户" class="headerlink" title="增加外部连接用户"></a><strong>增加外部连接用户</strong></h4><p>create user ‘root’@’%’ identified by ‘密码’;</p><h4 id="增加用户全部权限"><a href="#增加用户全部权限" class="headerlink" title="增加用户全部权限"></a><strong>增加用户全部权限</strong></h4><p>grant all on <em>.</em> to root@’%’ identified by ‘123456’;</p><p>grant all on <em>.</em> to root@’localhost’ identified by ‘123456’;</p><h4 id="刷新Mysql权限"><a href="#刷新Mysql权限" class="headerlink" title="刷新Mysql权限"></a><strong>刷新Mysql权限</strong></h4><p>flush privileges;</p><h4 id="查看数据库版本"><a href="#查看数据库版本" class="headerlink" title="查看数据库版本"></a><strong>查看数据库版本</strong></h4><p>SHOW VARIABLES WHERE Variable_name = ‘version’;</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql修改连接数</title>
      <link href="/2018/11/02/mysql/mysql-xiu-gai-lian-jie-shu/"/>
      <url>/2018/11/02/mysql/mysql-xiu-gai-lian-jie-shu/</url>
      
        <content type="html"><![CDATA[<h4 id="第一种临时生效"><a href="#第一种临时生效" class="headerlink" title="第一种临时生效"></a>第一种临时生效</h4><p>直接修改mysql中的表数据，只能临时生效，重启mysql不生效</p><p>用管理员进入mysql后</p><p>set GLOBAL max_connections=1024;</p><h4 id="第二种永久生效"><a href="#第二种永久生效" class="headerlink" title="第二种永久生效"></a>第二种永久生效</h4><p>通过直接修改mysql的配置文件</p><p>vim /etc/my.con</p><p>这个配置文件是mysql默认的配置文件</p><p>max_connections=1000 </p><p>加上这个，连接数就会变成1000</p><p>重启mysql</p><h4 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h4><p>通过重启后测试了连接数没有更改过来，在网上查找原因：max_connections依托于操作系统，Linux系统必要时需要增加open-files-limit</p><p>解决方案：</p><p>vim /usr/lib/systemd/system/mysqld.service</p><p>LimitNOFILE=50000</p><p>在重启一下mysql，问题解决</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于log.io项目，实现实时日志web实现查看</title>
      <link href="/2018/10/26/linux-fu-wu/ji-yu-log.io-xiang-mu-shi-xian-shi-shi-ri-zhi-web-shi-xian-cha-kan/"/>
      <url>/2018/10/26/linux-fu-wu/ji-yu-log.io-xiang-mu-shi-xian-shi-shi-ri-zhi-web-shi-xian-cha-kan/</url>
      
        <content type="html"><![CDATA[<h3 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h3><p>  centos7.4</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>安装所需依赖，Epel存储库，node.js平台，npm节点管理器</p><h4 id="Epel存储库"><a href="#Epel存储库" class="headerlink" title="Epel存储库"></a>Epel存储库</h4><p>这是Epel官方推荐的安装方式，安装后更新一下系统的软件</p><p>yum install <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm" target="_blank" rel="noopener">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p><p>yum update</p><h4 id="node-js平台-npm节点管理器。"><a href="#node-js平台-npm节点管理器。" class="headerlink" title="node.js平台-npm节点管理器。"></a>node.js平台-npm节点管理器。</h4><p>这二种可以看成是一体的，因为npm实际算是node.js的包管理器</p><p>安装前先添加ngde.js的yum源</p><p>yum install -y gcc-c++ make</p><p>curl -sL <a href="https://rpm.nodesource.com/setup_6.x" target="_blank" rel="noopener">https://rpm.nodesource.com/setup_6.x</a> | sudo -E bash -</p><p>检测系统是否有老版本的ngde.js跟npm服务</p><p>卸载：yum erase nodejs npm -y</p><p>检测：rpm -qa ‘node|npm’ | grep -v nodesource</p><p>安装ngde.js跟npm</p><p>yum -y install nodejs -y</p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>安装log.io服务</p><p>Log.io应用程序必须在系统上通过NPM通过指定一个有效的本地系统用户，个人建议使用root用户或你日常使用的用户</p><p>npm install -g log.io –user “root”</p><p>安装完后，目录是在你指定的用户家目录下的.log.io目录，为了增加安全性，设置了隐藏目录</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>.log.io目录中有三个文件，harvester.conf，log_server.conf ，web_server.conf。</p><h4 id="harvester-conf"><a href="#harvester-conf" class="headerlink" title="harvester.conf"></a>harvester.conf</h4><p>harvester.conf文件在其配置中声明在指定的本地日志文件的变化，通过TCP socket.io将其输出 »»何其他远程服务器-文件harvester.conf-bash: harvester.conf文件在其配置中声明在指定的本地日志文件的变化，通过TCP: 未找到命令[root@localhost .log.io]# 协议进一步邮件发送到Log.io本地服务器或它的IP地址（harvester.conf指定广播到所有log.io监听服务器0.0.0.0地址）宣布任何其他远程服务器，如果不需要远程收集，建议修改0.0.0.0地址</p><h4 id="log-server-conf"><a href="#log-server-conf" class="headerlink" title="log_server.conf"></a>log_server.conf</h4><p>Log.io服务器在所有网络接口上绑定（如果没有在log_server.conf文件中指定），并等待来自本地或远程收集器节点的消息，并将其输出发送到log.io Web服务器（0.0.0.0表示它等待消息从任何本地或远程收割机）log_server.conf文件，如果不需要远程收集，建议修改0.0.0.0地址</p><h4 id="web-server-conf"><a href="#web-server-conf" class="headerlink" title="web_server.conf"></a>web_server.conf</h4><p>Log.io Web服务器绑定所有网络接口，监听端口28778和流程的Web客户端的连接，并输出它从log.io服务器收到内部消息，如登 录凭据，HTTPS或限制基础上的IP，以Log.io Web服务器可以在Web服务器端的应用-web_server.conf</p><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>启动服务</p><p>log.io-server &amp; </p><p>log.io-harvester &amp;</p><p>web界面请访问web_server.conf配置文件中的端口，默认为：28778</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 RocketMQ</title>
      <link href="/2018/10/25/linux-fu-wu/centos7-an-zhuang-rocketmq/"/>
      <url>/2018/10/25/linux-fu-wu/centos7-an-zhuang-rocketmq/</url>
      
        <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>  centos7.4</p><p>  mavem3.5</p><p>RocketMQ是需要mavem来编译的，安装mavem可以查找我之前的文章</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>下载RocketMQ并编译</p><p>下载：wget <a href="http://mirror.bit.edu.cn/apache/rocketmq/4.3.0/rocketmq-all-4.3.0-source-release.zip" target="_blank" rel="noopener">http://mirror.bit.edu.cn/apache/rocketmq/4.3.0/rocketmq-all-4.3.0-source-release.zip</a></p><p>解压：unzip rocketmq-all-4.3.0-source-release.zip </p><p>移动：mv rocketmq-all-4.3.0 /usr/local/rocketmq</p><p>进入：cd /usr/local/rocketmq</p><p>编译：mvn -Prelease-all -DskipTests clean install -U</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>调整内存大小，RocketMQ默认分配的内存太大，需要按自己的情况调整，大佬随意过</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>这里要调整二个内存配置文件，因为RocketMQ有二个进程，runbroker.sh 和 runserver.sh 文件</p><p>vim runserver.sh</p><p>修改以下的配置来控制内存<br>JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=256m”</p><p>vim runbroker.sh</p><p>修改以下的配置来控制内存</p><p>JAVA_OPT=”${JAVA_OPT} -server -Xms256m -Xmx256m -Xmn128m”</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>启动RocketMQ的二个进程namesrv，broker，官方建议先启动namesrv，然后启动 broker</p><p>namesrv启动</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>启动：nohup bin/mqnamesrv &amp;</p><p>查看启动日志：tail -f nohup.out</p><p>broker启动</p><p>进入：cd /usr/local/rocketmq/distribution/target/apache-rocketmq/bin/</p><p>启动：nohup sh bin/mqbroker -n localhost:9876 &amp;</p><p>查看启动日志：tail -f nohup.out</p><p>注意：在启动的时候可能会出错，可以看最后的出错总结</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>关闭服务，跟启动顺序相反，官方建议先关闭broker，然后在关闭namesrv</p><p>sh bin/mqshutdown broker</p><p>sh bin/mqshutdown namesrv</p><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>常用命令，日常不用到</p><p>查看集群情况： ./mqadmin clusterList -n 127.0.0.1:9876</p><p>查看 broker 状态： ./mqadmin brokerStatus -n 127.0.0.1:9876 -b 172.20.1.138:10911</p><p>查看 topic 列表： ./mqadmin topicList -n 127.0.0.1:9876</p><p>查看 topic 状态： ./mqadmin topicStatus -n 127.0.0.1:9876 -t MyTopic (换成想查询的 topic)</p><p>查看 topic 路由： ./mqadmin topicRoute -n 127.0.0.1:9876 -t MyTopic</p><h4 id="出错总结"><a href="#出错总结" class="headerlink" title="出错总结"></a>出错总结</h4><p>安装时，遇到的所有出错</p><p>1.</p><p>ERROR: Please set the JAVA_HOME variable in your environment, We need java(x64)! !!</p><p>启动namesrv的时候报了上面的这个错，又查看自身的jdk配置没问题，是runserver.sh文件中的jdk配置有问题</p><p>解决方案：</p><p>vim runserver.sh 或 vim runbroker.sh</p><p>下面第二行，有写jdk的路径，我把他更改成我系统中的jdk路径。解决</p><p>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; JAVA_HOME=$HOME/jdk/java<br>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; JAVA_HOME=/usr/local/jdk<br>[ ! -e “$JAVA_HOME/bin/java” ] &amp;&amp; error_exit “Please set the JAVA_HOME variable in your environment, We need java(x64)!”</p><p>2.</p><p>如果没有调整内存的话，你的机器没有足够的内存支持，也是会报错的，解决方案：看第二步</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装 activemq</title>
      <link href="/2018/10/25/linux-fu-wu/centos7-an-zhuang-activemq/"/>
      <url>/2018/10/25/linux-fu-wu/centos7-an-zhuang-activemq/</url>
      
        <content type="html"><![CDATA[<h4 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h4><p>  centos7.4</p><p>activemq的安装很简单，这里只会说到activemq的配置跟内存控制</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>安装activemq，我们需要下载activemq的安装包，我这边就先下载好了，小伙伴们可以去官方下载</p><p>解压：tar -zxf apache-activemq-5.9.0-bin.tar.gz</p><p>移动：mv apache-activemq-5.9.0 /usr/local/activemq</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>设置内存大小限制，这一步如果小伙伴不需要限制可以直接看第三步</p><p>进入：cd /usr/local/activemq/bin/</p><p>配置启动文件：vim activemq</p><p>找到以下的配置行，默认来说是1g</p><pre class="line-numbers language-shell"><code class="language-shell"># Set jvm memory configurationif [ -z "$ACTIVEMQ_OPTS_MEMORY" ] ; thenACTIVEMQ_OPTS_MEMORY="-Xms1G-Xmx1G"fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>启动activemq</p><p>进入：cd /usr/local/activemq/bin/</p><p>启动：./activemq start</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装zookeeper</title>
      <link href="/2018/10/25/zookeeper/centos7-an-zhuang-zookeeper/"/>
      <url>/2018/10/25/zookeeper/centos7-an-zhuang-zookeeper/</url>
      
        <content type="html"><![CDATA[<p>环境：</p><p>  centos7.4</p><p>  JDK1.8</p><p>要安装就要先安装jdk，安装jdk可以查我之前的文章</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>上传zookeeper安装包，解压，移动，创建数据目录</p><p>安装我是先准备好的，你们可以去官方下载</p><p>解压：tar -zxf zookeeper-3.4.12.tar.gz</p><p>移动：mv zookeeper-3.4.12 /usr/local/zookeeper</p><p>创建数据目录：mkdir /usr/local/zookeeper/data</p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>配置文件中的配置行，配置文件改名</p><p>进入：cd /usr/local/zookeeper/conf/</p><p>改名：mv zoo_sample.cfg zoo.cfg </p><p>修改：vim zoo.cfg</p><p>  dataDir=/usr/local/zookeeper/data   </p><p>​      ##修改为我们刚刚创建的数据目录路径</p><p>  clientPort=2181</p><p>​      ##这配置行可以修改端口，有需要的小伙伴可以通过这配置行修改zk的端口</p><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>第三步是修改内存大小，这步只针对需要限制zk对内存使用的大小的小伙伴们</p><p>如果zk是新装的，正常来说内存配置文件是不存在的。</p><p>cd /usr/local/zookeeper/bin/</p><p>vim zkEnv.sh</p><p>查看以下的配置，查看是否存在，正常来说是存在的，配置中的java.env这个是内存分配文件的名称</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">-</span>f <span class="token string">"$ZOOCFGDIR/java.env"</span> <span class="token punctuation">]</span>then<span class="token punctuation">.</span> <span class="token string">"$ZOOCFGDIR/java.env"</span>fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建内存配置文件跟配置</p><p>cd /usr/local/zookeeper/conf/</p><p>vim java.env </p><p>java.env就复制下面的配置，JAVA_HOME是系统jdk的路径，VMFLAGS是要分配内存的大小，最小-最大。</p><p>#!/bin/sh</p><p>export JAVA_HOME=/usr/local/jdk</p><p># heap size MUST be modified according to cluster environment</p><p>export JVMFLAGS=”-Xms256m -Xmx512m $JVMFLAGS”</p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>就是说一下常用命令，命令目录在zk中的bin目录中</p><p>cd /usr/local/zookeeper/bin/</p><p>启动：./zkServer.sh start</p><p>停止：./zkServer.sh stop</p><p>查看状态：./zkServer.sh status</p>]]></content>
      
      
      <categories>
          
          <category> zookeeper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本二进制加密，shc的安装和简单使用</title>
      <link href="/2018/10/23/linux-fu-wu/shell-jiao-ben-er-jin-zhi-jia-mi-shc-de-an-zhuang-he-jian-dan-shi-yong/"/>
      <url>/2018/10/23/linux-fu-wu/shell-jiao-ben-er-jin-zhi-jia-mi-shc-de-an-zhuang-he-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>centos7.4</p><p>shc9.3</p><h4 id="下载shc的安装包，"><a href="#下载shc的安装包，" class="headerlink" title="下载shc的安装包，"></a>下载shc的安装包，</h4><p>可以去GIT中下载：<a href="https://github.com/neurobin/shc/tree/3.9.3" target="_blank" rel="noopener">https://github.com/neurobin/shc/tree/3.9.3</a></p><p>wget <a href="https://github.com/neurobin/shc/archive/3.9.3.zip" target="_blank" rel="noopener">https://github.com/neurobin/shc/archive/3.9.3.zip</a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>unzip 3.9.3.zip</p><p>cd shc-3.9.3/</p><p>./configure</p><p>make</p><p>make install</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>shc -v</p><h4 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h4><p>shc -v -r -f 文件名</p><p>-v：详细编译</p><p>-r：创建一个可在发行的二进制文件 </p><p>-f：要编译的脚本名</p><p>编译后会出现二个文件</p><p>脚本.x ：可以执行的二进制脚本</p><p>脚本.x.c ：可以脚本.x的原文件，简单来说就是c语言的脚本</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>保存yum下载软件包</title>
      <link href="/2018/10/12/linux/bao-cun-yum-xia-zai-ruan-jian-bao/"/>
      <url>/2018/10/12/linux/bao-cun-yum-xia-zai-ruan-jian-bao/</url>
      
        <content type="html"><![CDATA[<h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>我们要先安装测试yum命令中的一个参数，低版本的centos默认是不带的</p><p>yum install yum-downloadonly</p><p>安装完毕后，yum就有这二个参数–downloadonly，–downloaddir=。</p><p>现在实现下载安装包不安装，</p><p>yum install wget –downloadonly –downloaddir=/root/</p><p>运行这个命令，就会把wget的安装包放置在root目录下</p><p><strong>不过有个问题，就是你要下载的这个软件包，要是你系统中已安装了，就不会下载成功</strong></p><h4 id="第二种的"><a href="#第二种的" class="headerlink" title="第二种的"></a>第二种的</h4><p>修改yum的配置文件，使我们下载安装软件后，软件包不删除</p><p>vim/etc/yum.conf</p><p>把里面的keepcache=0改成keepcache=1</p><p>以后安装或更新后，软件包都会保存在/var/cache/yum这个目录中</p><p>在这个配置文件中有个选项</p><p>cachedir=/var/cache/yum</p><p>这个选项就代表软件包的存放地</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>别名永久设置，alias永久设置</title>
      <link href="/2018/09/28/linux/bie-ming-yong-jiu-she-zhi-alias-yong-jiu-she-zhi/"/>
      <url>/2018/09/28/linux/bie-ming-yong-jiu-she-zhi-alias-yong-jiu-she-zhi/</url>
      
        <content type="html"><![CDATA[<p>别名设置，分临时跟永久，本章就只介绍永久设置怎么设置</p><p>永久设置的配置文件.bashrc</p><p>在每个用户的家目录都有</p><p>如果在用户家目录中的.bashrc设置，就这别名只针对这用户</p><p>要面向全部用户，就要去/etc/skel/.bashrc这里修改</p><p>alias配置</p><p>alias 名称=’替换的参数’</p><p>例：</p><p>alias rm=’rm -i’</p><p>配置完，保险起见，来一个source</p><p>source /etc/skel/.bashrc</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>伪守护进程脚本，无限循环检测。开机自启</title>
      <link href="/2018/09/26/linux/wei-shou-hu-jin-cheng-jiao-ben-wu-xian-xun-huan-jian-ce-kai-ji-zi-qi/"/>
      <url>/2018/09/26/linux/wei-shou-hu-jin-cheng-jiao-ben-wu-xian-xun-huan-jian-ce-kai-ji-zi-qi/</url>
      
        <content type="html"><![CDATA[<p>要在项目中加上守护进程，意外崩溃后自动启动项目，机器重启时自动启动项目。</p><p>分为二种脚本</p><h4 id="第一种，无限循环检测项目是否启动。"><a href="#第一种，无限循环检测项目是否启动。" class="headerlink" title="第一种，无限循环检测项目是否启动。"></a>第一种，无限循环检测项目是否启动。</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/<span class="token keyword">while</span> <span class="token boolean">true</span> <span class="token keyword">do</span>PID<span class="token operator">=</span><span class="token punctuation">$(</span>ps -ef <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"检测关键字"</span> <span class="token operator">|</span> <span class="token function">grep</span> -v <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">$PID</span>"</span> <span class="token punctuation">]</span>        <span class="token keyword">then</span>                <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$PID</span>"</span><span class="token operator">></span>/dev/null        <span class="token keyword">else</span>                启动方法                <span class="token function">sleep</span> 3        <span class="token keyword">fi</span><span class="token function">sleep</span> 3<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第二种，开机自启动脚本"><a href="#第二种，开机自启动脚本" class="headerlink" title="第二种，开机自启动脚本"></a>第二种，开机自启动脚本</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#chkconfig: 35 20 80</span><span class="token comment" spellcheck="true">#description: server</span><span class="token comment" spellcheck="true">#mkdir /var/run/zabbix</span><span class="token comment" spellcheck="true">#chown zabbix:zabbix -R /var/run/zabbix/</span><span class="token comment" spellcheck="true">#/usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</span><span class="token function">sleep</span> 1启动循环脚本 <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最后要是要自启动，可别忘了用chkconfig命令"><a href="#最后要是要自启动，可别忘了用chkconfig命令" class="headerlink" title="最后要是要自启动，可别忘了用chkconfig命令"></a>最后要是要自启动，可别忘了用chkconfig命令</h4><p>chkconfig –add </p><p>可能大家会问，为什么不把启动脚本写到循环脚本中，可能是博主懒吧，因为在装zabbix客户端后，重启是可能会报错，博客就报了个错，找不到目录，我顺便把解放方法写进启动脚本，让他开机运行一次，这个解决是可以写入zabbix客户端的启动脚本中的，就可以解决，因博主管理的主机比较多点，懒得去修改，刚好需要编写循环脚本，就直接写到启动脚本中，还有一个问题，就是我公司不是说每一台服务都只放一个项目，很多都是二个项目或三个项目放在一台服务器上，这样用启动脚本，全部都可以带起来，就不用一个一个去循环脚本编写和加入自启动服务中。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设置脚本或命令开机自启动</title>
      <link href="/2018/09/25/linux/she-zhi-jiao-ben-huo-ming-ling-kai-ji-zi-qi-dong/"/>
      <url>/2018/09/25/linux/she-zhi-jiao-ben-huo-ming-ling-kai-ji-zi-qi-dong/</url>
      
        <content type="html"><![CDATA[<p>目前有三种文件，如果是说需要脚本自启动，我推荐第三种方法</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><p>编辑文件 /etc/rc.local</p><p>  vim /etc/rc.local</p><p>  在最下面增加你要启动的命令如</p><p>  /etc/init.d/mysqld start   ## mysql开机启动</p><p>  exit 0  #在文件末尾（添加好命令后）</p><p>注意：执行的程序需要写绝对路径，添加到系统环境变量的除外</p><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><p>把自己写好的shell脚本放在/etc/profile.d/</p><p>系统启动后就会自动执行该目录下的所有shell脚本</p><p>注意：在使用第二种方法时，遇到一个坑，就是放在/etc/profile.d/的脚本，每开启一个终端，就会执行一次。</p><h4 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h4><p>通过chkconfig命令设置</p><p>将准备好的启动脚本放在/etc/init.d/或者/etc/rc.d/init.d/</p><p>启动脚本文件中，必须要有</p><p>#!/bin/bash              ##告诉系统使用的shell,所以的shell脚本都是这样<br>#chkconfig: 35 20 80       ##分别代表运行级别，启动优先权，关闭优先权，这行都注释掉！！！，此行代码必须<br>#description: server        ##（随便填写）这行都注释掉！！！，此行代码必须</p><p>chkconfig –add 脚本文件名    ##这样子，就添加了</p><p>注意：启动脚本必须要用执行权限</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zabbix-agent--安装zabbix客户端--yum安装</title>
      <link href="/2018/09/25/zabbix/zabbix-agent-an-zhuang-zabbix-ke-hu-duan-yum-an-zhuang/"/>
      <url>/2018/09/25/zabbix/zabbix-agent-an-zhuang-zabbix-ke-hu-duan-yum-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>环境：centos7.4</p><p>软件包：zabbix-agent-3.2.6-1.el6.x86_64.rpm、</p><p>把准备好的安装包放入系统中</p><h4 id="安装zabbix客户端"><a href="#安装zabbix客户端" class="headerlink" title="安装zabbix客户端"></a>安装zabbix客户端</h4><p>yum -y install zabbix-agent-3.2.6-1.el6.x86_64.rpm</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>vim /etc/zabbix/zabbix_agentd.conf</p><pre class="line-numbers language-shell"><code class="language-shell">Server=192.168.1.66##修改为zabbix服务器地址ServerActive=192.168.1.66##修改收集数据端为zabbix服务器地址Hostname=127.0.0.1##修改为本机的IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h4><p>service zabbix-agent start</p><p>或</p><p>systemctl start zabbix-agent</p><h4 id="设置开机自启"><a href="#设置开机自启" class="headerlink" title="设置开机自启"></a>设置开机自启</h4><p>chkconfig zabbix-agent on</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>遇到的一个坑，在服务器重新开机时，启动不了，具体的报错，忘了</p><p>解决方案：</p><p>​    mkdir /var/run/zabbix<br>​    chown zabbix:zabbix -R /var/run/zabbix/<br>​    /usr/sbin/zabbix_agentd -c /etc/zabbix/zabbix_agentd.conf</p><p>可以写入开机启动时自动执行的文件中</p>]]></content>
      
      
      <categories>
          
          <category> zabbix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java诊断工具之Arthas简单安装--阿里开源项目</title>
      <link href="/2018/09/25/linux-fu-wu/java-zhen-duan-gong-ju-zhi-arthas-jian-dan-an-zhuang-a-li-kai-yuan-xiang-mu/"/>
      <url>/2018/09/25/linux-fu-wu/java-zhen-duan-gong-ju-zhi-arthas-jian-dan-an-zhuang-a-li-kai-yuan-xiang-mu/</url>
      
        <content type="html"><![CDATA[<p>官方安装文档：<a href="https://alibaba.github.io/arthas/install-detail.html#linux-unix-mac" target="_blank" rel="noopener">https://alibaba.github.io/arthas/install-detail.html#linux-unix-mac</a></p><h4 id="安装前要先安装依赖包"><a href="#安装前要先安装依赖包" class="headerlink" title="安装前要先安装依赖包"></a>安装前要先安装依赖包</h4><p>yum -y install unzip telnet</p><h4 id="JDK的安装位置"><a href="#JDK的安装位置" class="headerlink" title="JDK的安装位置"></a>JDK的安装位置</h4><p>JDK要存储位置：/opt/taobao/java</p><h4 id="Arthas安装"><a href="#Arthas安装" class="headerlink" title="Arthas安装"></a>Arthas安装</h4><p><strong>下载</strong></p><pre><code>curl -L https://alibaba.github.io/arthas/install.sh | sh</code></pre><h4 id><a href="#" class="headerlink" title=" "></a> </h4><p><strong>安装</strong></p><p>./as.sh $PATH</p><p>本人在arthar安装的时候遇到的神坑，在总结经过上面的依赖包跟JDK安装位置的经验，安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建swap分区文件-实现虚拟内存--阿里云</title>
      <link href="/2018/09/25/linux/chuang-jian-swap-fen-qu-wen-jian-shi-xian-xu-ni-nei-cun-a-li-yun/"/>
      <url>/2018/09/25/linux/chuang-jian-swap-fen-qu-wen-jian-shi-xian-xu-ni-nei-cun-a-li-yun/</url>
      
        <content type="html"><![CDATA[<h4 id="建立虚拟内存文件存储目录"><a href="#建立虚拟内存文件存储目录" class="headerlink" title="建立虚拟内存文件存储目录"></a>建立虚拟内存文件存储目录</h4><p>mkdir /swap</p><h4 id="创建虚拟内存文件"><a href="#创建虚拟内存文件" class="headerlink" title="创建虚拟内存文件"></a>创建虚拟内存文件</h4><p>dd if=/dev/zero of=/swap/swapfile bs=1M count=1024</p><p>   其中的count等于想要的块的数量(bs*count=文件大小)，1024为1G。</p><h4 id="格式虚拟内存文件为交换内存分区文件"><a href="#格式虚拟内存文件为交换内存分区文件" class="headerlink" title="格式虚拟内存文件为交换内存分区文件"></a>格式虚拟内存文件为交换内存分区文件</h4><p>mkswap /swap/swapfile </p><p>   建立swap的文件系统</p><h4 id="启动交换区文件"><a href="#启动交换区文件" class="headerlink" title="启动交换区文件"></a>启动交换区文件</h4><p>swapon /swap/swapfile</p><p>   启用swap文件</p><h4 id="系统开机时自启用"><a href="#系统开机时自启用" class="headerlink" title="系统开机时自启用"></a>系统开机时自启用</h4><p>vim /etc/fstab</p><p>/swap/swapfile swap swap defaults 0 0</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库备份机制的描述</title>
      <link href="/2018/09/21/mysql/mysql-shu-ju-ku-bei-fen-ji-zhi-de-miao-shu/"/>
      <url>/2018/09/21/mysql/mysql-shu-ju-ku-bei-fen-ji-zhi-de-miao-shu/</url>
      
        <content type="html"><![CDATA[<p>公司要求，数据库每天备份一次，保存30份或天的数据备份文件，在保存每个月的最后一天的数据备份文件</p><p>根据公司的需求，个人想出了一个方案，可能是因能力不足，无法想出更完善的方案</p><p>方案分为三个步。</p><p>​    \1. 备份方案</p><p>​        制定备份脚本，设置定时任务，使脚本每天晚上在指定的时间执行一次，</p><p>​           脚本要求：如MySQL数据库。因项目有关，需要备份MySQL中的3个数据库，三个数据库不能同时备份，</p><p>​                  要先备份一个，在检测是否有生成备份文件后在备份第二个，第二个备份完在检测<strong><em><em>*</em></em></strong>。</p><p>​                  备份不能远程备份。要在本机备份后，打成压缩包并发送到指定存储的服务器上，检测是否发送成功，</p><p>​                  如果成功，执行删除刚刚备份的文件目录，要是不成功报错。</p><p>​                  这样有个好处，如果脚本运行中只要有一步出错，备份脚本就会停止并报错，</p><p>​                  减少需要恢复数据库时所产生的数据库备份不完整风险。</p><p>​    \2. 删除方案</p><p>​        制定删除脚本，设置定时任务，使脚本每天在指定的时间执行一次。</p><p>​           脚本要求：本人感觉只保留最近30份文件比保留最近30天的比较靠谱一点，其实都是一样的，哈哈。</p><p>​                  设置脚本在每天执行一次，一定要比保留方案晚执行，就是要在保留脚本执行后过一段时间，</p><p>​                  在执行删除脚本，实现删除。前期在测试删除脚本时，建议需要，修改备份脚本，</p><p>​                  让发送的备份压缩文件增加到二台机，一台用于测试删除脚本</p><p>​    \3. 保留方案</p><p>​        制定保留脚本，设置定时任务，使脚本在每个月最后天执行一次。</p><p>​           脚本要求：检测出对应日期的文件，进行发送到指定存储的服务器上，还有一个要求，就一个。</p><p>​                  保留脚本一定要比删除脚本早执行一段时间，如果保留脚本出错，一定要通过监控服务或其它，</p><p>​                  及时的通知运维们</p><p>​                                                         目前以博主的能力，就只能想出这种方案</p><p>​                                                                          2018年9月份</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAMBA服务的简单应用，Linux对Linux文件共享</title>
      <link href="/2018/09/21/linux-fu-wu/samba-fu-wu-de-jian-dan-ying-yong-linux-dui-linux-wen-jian-gong-xiang/"/>
      <url>/2018/09/21/linux-fu-wu/samba-fu-wu-de-jian-dan-ying-yong-linux-dui-linux-wen-jian-gong-xiang/</url>
      
        <content type="html"><![CDATA[<p>本章的samba服务是由yum源安装的</p><p>环境：centos7.4</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>yum install samba</p><h4 id="创建samba用户"><a href="#创建samba用户" class="headerlink" title="创建samba用户"></a>创建samba用户</h4><p>samba用户是以系统中的用户的基础在增加，所以想要创建samba用户，就要先有一个系统用户。</p><p><strong>添加系统用户</strong></p><p>useradd samba</p><p>passwd samba</p><p><strong>添加或删除samba用户</strong></p><p>smbpasswd -a samba  #会让你创建samba用户的密码，是用于samba服务中使用的密码,可以与原始密码相同,也可以不同。</p><p>pdbedit -L  #查看samba用户列表</p><p>smbpasswd -x samba  #删除现有的samba用户</p><h4 id="修改samba配置文件"><a href="#修改samba配置文件" class="headerlink" title="修改samba配置文件"></a>修改samba配置文件</h4><p>vim /etc/samba/smb.conf</p><p>进去后，我们在最后添加我们要共享的目录的配置信息</p><p>[ share ]   #连接的共享名</p><p>​      comment=user_mode   #描述，无用的，可以随便写</p><p>​      path=/var/film        #要共享的目录路径</p><p>​      public=yes           #是否公开共享</p><p>​      writable = yes         #是否开启写入权限</p><p>保存退出</p><p>service smb restart   #重启smb服务器</p><p>注意：目录路径的目录要有samba用户的权限，最好是要samba对应的家目录里，不然就把要共享的目录的属主给samba用户</p><p>目前在主端就设置好了</p><h4 id="进去另一台linux服务器：挂载"><a href="#进去另一台linux服务器：挂载" class="headerlink" title="进去另一台linux服务器：挂载"></a>进去另一台linux服务器：挂载</h4><p>yum -y install samba</p><p>yum -y install cifs-utils</p><p>注意：这二个软件包必须安装，不然挂载出错</p><h4 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h4><p>mount -t cifs -o username=用户名 //主端的IP地址/share 挂载到本机的那个目录中</p><p>mount -t cifs -o username=samba //192.168.1.3/share /tmp/share</p><p>注意：在本机被挂载进去的目录要先创建出来</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>今天在我公司中搭建一个samba服务，用于二台linux进入文件传输。</p><p>在挂载的时候，发现挂载出现异常情况，无法说明。</p><p>解决方案：更新yum源，就好了</p><p>在出现挂载的时候，出现目录没权限访问，</p><p>解决方案：检查了主端的权限是通的，在来从端中检查，发现目录的权限跟属主之类的都出现？号“d????????? ? ?  ?    ?      ?”，试着去删除该目录，发现用 rm -rf 也无法删除，最终使用mount命令查看了当前的挂载点，发现有一个挂载点失效，但是挂载的目录就是我要挂载的目录，就用umount -a 取消挂载点，重新挂载，问题解决</p>]]></content>
      
      
      <categories>
          
          <category> linux服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-vim命令</title>
      <link href="/2018/09/20/linux-ming-ling/linux-vim-ming-ling/"/>
      <url>/2018/09/20/linux-ming-ling/linux-vim-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>h （左移） j （下移） k （上移） l （右移）</p><p>x （删除光标当前所在的位置的字符）</p><p>y ：复制选中的字条</p><p>yy ：复制整行 （2yy：复制当前行跟下一行）</p><p>p ：粘贴</p><p>i （光标前插入文本）</p><p>a （光标后插入文本）</p><p>o （光标向下一行插入新一行并进行编辑模式）</p><p>de / d$ (从光标当前位置到行尾删除)</p><p>dd (删除当前行) （2dd：删除当前行跟下一行） （3dd：删除当前行加下二行）</p><p>u ：撤销最后执行的命令</p><p>Ctrl+R ：撤销，撤销命令的操作命令</p><p>/ ：查找命令 （按N键可相反方向查找）</p><p>？ ：查找命令（逆向查找）</p><p>:s/old/new/g （把old替换成new 在当前行中）</p><p>:#,#s/old/new/g （把old替换成new #,#代表的是两行的行号）</p><p>:%s/old/new/g （把old替换成new 全文本）</p><p>:! ：可以执行外部命令</p><p>:w ：可以把当前文件保存到另一个文件中</p><p>:files ##查看当前一共打开了几个文件</p>]]></content>
      
      
      <categories>
          
          <category> linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-admin，部署Dubbo后台管理</title>
      <link href="/2018/09/20/dubbo/dubbo-admin-bu-shu-dubbo-hou-tai-guan-li/"/>
      <url>/2018/09/20/dubbo/dubbo-admin-bu-shu-dubbo-hou-tai-guan-li/</url>
      
        <content type="html"><![CDATA[<p>部署Dubbo后台管理需要三个软件，JDK,mavem,tomcat，安装这三个软件，可以参考我之前写的笔记</p><p>三个软件部署好后，我们就需要下载Dubbo-admin项目：<a href="https://github.com/apache/incubator-dubbo/tree/2.5.x" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/tree/2.5.x</a></p><p><a href="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/85623ebb2f4449b388aaad2f795649bc.png" alt="img"></a></p><p>注意：Dubbo-admin有一个坑，要注意，下载项目的时候要全部下载，不要单独下载一个项目。因为在用mvn编译的时候，不能在单个项目中编译，只能在所有项目中一起编译才会成功</p><p> 为了方便我提供了下载链接，可以直接在linux中下载：wget <a href="https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x" target="_blank" rel="noopener">https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x</a></p><h4 id="解压并编译"><a href="#解压并编译" class="headerlink" title="解压并编译"></a>解压并编译</h4><p>unzip incubator-dubbo-2.5.x.zip</p><p>cd incubator-dubbo-2.5.x</p><p>mvn install -Dmaven.test.skip=true</p><p>请稍等，估计要十多分钟</p><h4 id="找到-war文件并复制到tomcat中的webapps目录中"><a href="#找到-war文件并复制到tomcat中的webapps目录中" class="headerlink" title="找到.war文件并复制到tomcat中的webapps目录中"></a>找到.war文件并复制到tomcat中的webapps目录中</h4><p>.war文件：dubbo-admin-2.8.4.war（有可能不同版本的名称不一样）</p><p>cp -a dubbo-admin/target/dubbo-admin-2.8.4.war /usr/local/tomcat/webapps/</p><p>进入tomcat中重启服务，让我们复制过去的.war文件解压运行</p><h4 id="修改dubbo-properties配置文件"><a href="#修改dubbo-properties配置文件" class="headerlink" title="修改dubbo.properties配置文件"></a>修改dubbo.properties配置文件</h4><p>进入tomcat中的webapps目录中，找到解压好的dubbo-admin目录，进去，找到dubbo.properties文件</p><p>vim dubbo.properties</p><p>修改第一行的IP地址，dubbo.registry.address=127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183</p><p>如果有安装过zookeeper，那就在dubbo.registry.address=中填写zookeeper的IP地址以及端口号</p><p>第二行跟第三行是用户配置信息</p><p>打开浏览器输入地址: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://IP地址/域名:8080/dubbo-admin</a></p><p>用户就在dubbo.properties文件中的第二第三行中。</p><h4 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h4><p>这是我在我公司真实环境中遇到的一个坑</p><p>我想修改一下dubbo-admin的root登录密码跟禁用guest用户</p><p>发现，如果没有guest用户，无论你怎么重启tomcat，访问管理后台会发现找不到网页</p><p>还有一个想法，就是把dubbo-admin中的guest用户改一下名字，测试一下可不可以访问，发现还是不可以。</p><p>总结出现，dubbo-admin中的这二个用户可能都是必须存在的，要是不存在，系统就报错</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo-monitor，部署Dubbo监控平台monitor</title>
      <link href="/2018/09/20/dubbo/dubbo-monitor-bu-shu-dubbo-jian-kong-ping-tai-monitor/"/>
      <url>/2018/09/20/dubbo/dubbo-monitor-bu-shu-dubbo-jian-kong-ping-tai-monitor/</url>
      
        <content type="html"><![CDATA[<p>部署Dubbo后台管理需要三个软件，JDK,mavem,tomcat，安装这三个软件，可以参考我之前写的笔记</p><p>三个软件部署好后，我们就需要下载Dubbo-admin项目：<a href="https://github.com/apache/incubator-dubbo/tree/2.5.x" target="_blank" rel="noopener">https://github.com/apache/incubator-dubbo/tree/2.5.x</a></p><p><a href="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" target="_blank" rel="noopener"><img src="http://92.linux91.cn/attachment/20180920/85623ebb2f4449b388aaad2f795649bc.png" alt="img"></a></p><p>注意：Dubbo-admin有一个坑，要注意，下载项目的时候要全部下载，不要单独下载一个项目。因为在用mvn编译的时候，不能在单个项目中编译，只能在所有项目中一起编译才会成功</p><p> 为了方便我提供了下载链接，可以直接在linux中下载：wget <a href="https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x" target="_blank" rel="noopener">https://codeload.github.com/apache/incubator-dubbo/zip/2.5.x</a></p><h4 id="解压并编译"><a href="#解压并编译" class="headerlink" title="解压并编译"></a>解压并编译</h4><p>unzip incubator-dubbo-2.5.x.zip</p><p>cd incubator-dubbo-2.5.x</p><p>mvn install -Dmaven.test.skip=true</p><p>请稍等，估计要十多分钟</p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><p>cd dubbo-simple/dubbo-monitor-simple/target/</p><p>tar -zxf dubbo-monitor-simple-2.8.4-assembly.tar.gz</p><p>可以把解压出来的项目目录放在你习惯放的位置上，博主就习惯放在/usr/local/下</p><p>mv dubbo-monitor-simple-2.8.4 /usr/local/monitor</p><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>cd /usr/local/monitor/conf/</p><p>vim dubbo.properties</p><p><a href="http://92.linux91.cn/attachment/20180920/37d5b7603aee446f8e22921fda6e2795.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/37d5b7603aee446f8e22921fda6e2795.png" alt="img"></a></p><p>在图中，dubbo.registry.address=的配置中，博主只有zookeeper，所有除了zookeeper，其它的都注释掉</p><p>如果有多少zookeeper，想配置集群，可以用”,”符号要隔开</p><p>在注意端口，不能和系统中其它端口相同发生冲突，配置前最好先查看一下，在修改</p><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>cd /usr/local/monitor/bin/</p><p>restart.sh  #重启</p><p>start.sh    #启动</p><p>stop.sh    #停止</p><p>./start.sh</p><p>这样就启动了</p><p>打开浏览器输入地址: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://IP地址/域名:1288/i</a>ndex.html</p>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Liunx--centos7--JDK8安装</title>
      <link href="/2018/09/20/linux/liunx-centos7-jdk8-an-zhuang/"/>
      <url>/2018/09/20/linux/liunx-centos7-jdk8-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>从官方网上下载JDK8：<a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz" target="_blank" rel="noopener">http://download.oracle.com/otn-pub/java/jdk/8u181-b13/96a7b8442fe848ef90c96a2fad6ed6d1/jdk-8u181-linux-x64.tar.gz</a></p><ul><li>解压并存放到指定目录中</li></ul><p>​     tar -zxf jdk-8u181-linux-x64.tar.gz</p><p>​     mv jdk1.8.0_181/ /usr/local/jdk</p><ul><li>配置JDK的系统环境</li></ul><p>​     vim /etc/profile</p><hr><p>​     #JDK<br>​     JAVA_HOME=/usr/local/jdk<br>​     CLASSPATH=$JAVA_HOME/lib/<br>​     PATH=$PATH:$JAVA_HOME/bin<br>​     export PATH JAVA_HOME CLASSPATH</p><hr><p>​     source /etc/profile</p><ul><li>测试JDK8是否配置成功</li></ul><p>​     java -version</p><p>​     成功信息：</p><p>​      java version “1.8.0_181”<br>​      Java(TM) SE Runtime Environment (build 1.8.0_181-b13)<br>​      Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)</p><h3 id="修改linux-中的JDK版本"><a href="#修改linux-中的JDK版本" class="headerlink" title="修改linux 中的JDK版本"></a>修改linux 中的JDK版本</h3><p>删除jdk文件</p><p>rm -f /usr/bin/java </p><p>rm -f /usr/bin/javac</p><p>rm -f /etc/alternatives/java</p><p>rm -f /etc/alternatives/javac</p><p>在添加/etc/profile中的JDK信息，就可以更改Linux系统自带的老版本JDK</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7--mavem3.5安装</title>
      <link href="/2018/09/20/linux/centos7-mavem3.5-an-zhuang/"/>
      <url>/2018/09/20/linux/centos7-mavem3.5-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>从官方网上下载mavem3.5：<a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">http://maven.apache.org/download.cgi</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz" target="_blank" rel="noopener">http://mirrors.shu.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</a></p><p>解压并存放在指定目录中</p><p>   tar -zxf apache-maven-3.5.3-bin.tar.gz</p><p>   mv apache-maven-3.5.3 /usr/local/maven</p><p>配置mavem的系统环境</p><p>   vim /etc/profile</p><hr><p>   ##MAVEN<br>   export M2_HOME=/usr/local/maven<br>   export PATH=$JAVA_HOME/bin:$JAVA_HOME/jre/bin:$M2_HOME/bin:$PATH</p><hr><p>   source /etc/profile</p><p>测试mavem是否配置成功</p><p>   mvn -v</p><p>   成功信息如下</p><p>​      Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>​      Maven home: /usr/local/maven</p><p>如果有安装JDK跟mavem的</p><p>   使用mvn -v 就会跟JDK的系统配置信息一起出现。如下</p><p>​      Apache Maven 3.5.3 (3383c37e1f9e9b3bc3df5050c29c8aff9f295297; 2018-02-25T03:49:05+08:00)<br>​      Maven home: /usr/local/maven<br>​      Java version: 1.8.0_181, vendor: Oracle Corporation<br>​      Java home: /usr/local/jdk/jre<br>​      Default locale: en_US, platform encoding: UTF-8<br>​      OS name: “linux”, version: “3.10.0-693.el7.x86_64”, arch: “amd64”, family: “unix”</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx问题合集</title>
      <link href="/2018/09/20/nginx/nginx-wen-ti-he-ji/"/>
      <url>/2018/09/20/nginx/nginx-wen-ti-he-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题"><a href="#nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题" class="headerlink" title="nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题"></a>nginx代理时，出现只有首页文件代理过去，其它文件代理不过去的问题</h2><p>使用nginx代理时，发现代理过去的显示找不到文件</p><p>解决方案：</p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token keyword">location</span> <span class="token operator">/</span>monitor <span class="token punctuation">{</span>       <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.81</span><span class="token punctuation">:</span><span class="token number">1288</span><span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这下好了，是找到了首页文件，但是其它的文件并没有代理过来。</p><p>想了好久，发现了问题的点，就在我们设置好的路径中没有明确标明目录下的所有文件。</p><p>不知道怎么解释清楚，直接写解决方案</p><p>解决方案：</p><pre class="line-numbers language-nginx"><code class="language-nginx">    <span class="token keyword">location</span> <span class="token operator">/</span>monitor<span class="token operator">/</span> <span class="token punctuation">{</span>       <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">1.81</span><span class="token punctuation">:</span><span class="token number">1288</span><span class="token operator">/</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在我们设置好的路径后在要加 / 加完你会发现，很神奇的又找得到了</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下的tomcat8启动很慢现象处理</title>
      <link href="/2018/09/20/tomcat/linux-xia-de-tomcat8-qi-dong-hen-man-xian-xiang-chu-li/"/>
      <url>/2018/09/20/tomcat/linux-xia-de-tomcat8-qi-dong-hen-man-xian-xiang-chu-li/</url>
      
        <content type="html"><![CDATA[<p>关于tomcat容器为什么运行很慢，本人查了下百度，发现百度上的学法很多，本人比较倾向一种学法，由于SHA1PRNG算法造成的，</p><p>SHA1PRNG算法是基于SHA-1算法实现且保密性较强的伪随机数生成器。</p><ul><li>如果Java.security.egd属性或securerandom.source属性指定的是”file:/dev/random”或”file:/dev/urandom”，那么JVM会使用本地种子产生器NativeSeedGenerator，它会调用super()方法，即调用SeedGenerator.URLSeedGenerator(/dev/random)方法进行初始化。  </li><li>如果java.security.egd属性或securerandom.source属性指定的是其它已存在的URL，那么会调用SeedGenerator.URLSeedGenerator(url)方法进行初始化。</li></ul><p>本人对这个算法也没什么研究</p><p>今天对公司的服务器搭建并测试tomcat，就发现出现这问题，下面发布在真实环境下怎么处理</p><ul><li>修改tomcat中的bin目录中的catalina.sh文件</li></ul><p><a href="http://92.linux91.cn/attachment/20180919/405e42d0d0a0434ab2b6795f0203a2e7.png" target="_blank" rel="noopener"><img src="https://gitee.com/linux91/document-img/raw/master/img/405e42d0d0a0434ab2b6795f0203a2e7.png" alt="img"></a></p><p>找到图上的配置行，增加：-Djava.security.egd=file:/dev/./urandom</p><pre class="line-numbers language-java"><code class="language-java">JAVA_OPTS<span class="token operator">=</span><span class="token string">"$JAVA_OPTS -Djava.protocol.handler.pkgs=org.apache.catalina.webresources -Djava.security.egd=file:/dev/./urandom"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样子重启tomcat容器后，就不会出现启动慢的现象</p>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7--tomcat8简单安装</title>
      <link href="/2018/09/20/tomcat/centos7-tomcat8-jian-dan-an-zhuang/"/>
      <url>/2018/09/20/tomcat/centos7-tomcat8-jian-dan-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h3 id="tomcat8"><a href="#tomcat8" class="headerlink" title="tomcat8"></a><strong>tomcat8</strong></h3><p>从官方网上下载tomcat8：<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">http://tomcat.apache.org/download-80.cgi</a></p><p>下载之后上传到linux系统上</p><p>也可以在linux系统上直接下载，看系统网速</p><p>wget <a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz" target="_blank" rel="noopener">http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz</a></p><h3 id="解压并放入指定的目录中"><a href="#解压并放入指定的目录中" class="headerlink" title="解压并放入指定的目录中"></a><strong>解压并放入指定的目录中</strong></h3><pre class="line-numbers language-shell"><code class="language-shell">tar -zxf apache-tomcat-8.0.53.tar.gzmv apache-tomcat-8.0.53 /usr/local/tomcat/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如有.war包，可以直接放进tomcat目录中的webapps目录里，因为tomcat启动会自动解压webapps目录中的.war文件，并会进行加载</p><h3 id="启动跟停止"><a href="#启动跟停止" class="headerlink" title="启动跟停止"></a><strong>启动跟停止</strong></h3><p>在tomcat目录下的bin目录中</p><pre class="line-numbers language-shell"><code class="language-shell">   ./startup.sh     #启动   ./shutdown.sh   #停止<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改tomcat支持的JDK配置"><a href="#修改tomcat支持的JDK配置" class="headerlink" title="修改tomcat支持的JDK配置"></a><strong>修改tomcat支持的JDK配置</strong></h3><p>tomcat支持的JDK配置是系统默认的JDK，按各自情况决定是否要修改</p><p>修改tomcat中的bin目录下的catalina.sh跟setclasspath.sh</p><p>在两个文件的开头的空白地方添加以下的配置</p><pre class="line-numbers language-java"><code class="language-java">export JAVA_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk<span class="token operator">/</span>export JRE_HOME<span class="token operator">=</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>jdk<span class="token operator">/</span>jreexport CLASSPATH<span class="token operator">=</span>$JAVA_HOME<span class="token operator">/</span>lib<span class="token operator">/</span>export PATH<span class="token operator">=</span>$PATH<span class="token operator">:</span>$JAVA_HOME<span class="token operator">/</span>bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a><strong>注意事项</strong></h3><p>在tomcat目录下的webapps目录中有一个ROOT目录，这个目录最好不要删除，因为有特殊的权限，如果你删除重新创建，那也是没用的</p><p>要是你想让tomcat默认到你的项目中，那你就把ROOT目录下的所有东西给清了，在把你的项目移动在ROOT目录中 </p><p>最好不要删除ROOT目录！！！</p><p>最好不要删除ROOT目录！！！</p><p>最好不要删除ROOT目录！！！</p><p>重要的话说三遍</p>]]></content>
      
      
      <categories>
          
          <category> tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux--centos7--yum网络源</title>
      <link href="/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/"/>
      <url>/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/</url>
      
        <content type="html"><![CDATA[<p>今天我选择的yum源是网易的</p><p>网易（163）yum源是国内最好的yum源之一 ，无论是速度还是软件版本，都非常的不错，将yum源设置为163yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到</p><h4 id="部署方法"><a href="#部署方法" class="headerlink" title="部署方法"></a>部署方法</h4><ul><li>进入系统中存储yum源的目录</li></ul><p>​       cd /etc/yum.repos.d/</p><ul><li>备份系统自带的yum源</li></ul><p>​       mv CentOS-Base.repo CentOS-Base.repo.J</p><ul><li>下载网易yum源</li></ul><p>​       wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><ul><li>将下载的yum源文件改成系统自带yum源文件的名字</li></ul><p>​        mv CentOS7-Base-163.repo CentOS-Base.repo</p><ul><li>创建元数据缓存</li></ul><p>​        yum makecache</p><ul><li>更新系统yum源  </li></ul><p>​        yum -y update</p><h4 id="温馨提醒："><a href="#温馨提醒：" class="headerlink" title="温馨提醒："></a>温馨提醒：</h4><p>​    除了网易yum源中国国内还有其它很不错的yum源</p><p>​    中科大的yum源：</p><p>​       wget <a href="http://centos.ustc.edu.cn/CentOS-Base.repo" target="_blank" rel="noopener">http://centos.ustc.edu.cn/CentOS-Base.repo</a></p><p>​    sohu的yum源</p><p>​       wget <a href="http://mirrors.sohu.com/help/CentOS-Base-sohu.repo" target="_blank" rel="noopener">http://mirrors.sohu.com/help/CentOS-Base-sohu.repo</a></p><p>​    阿里云的yum源</p><p>​        wget <a href="http://mirrors.aliyun.com/repo/Centos-7.repo" target="_blank" rel="noopener">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-centos7-Python3.6源码安装</title>
      <link href="/2018/09/19/python/linux-centos7-python3.6-yuan-ma-an-zhuang/"/>
      <url>/2018/09/19/python/linux-centos7-python3.6-yuan-ma-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>环境：centos7.4</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>设置网络YUN源</p><p>可以查看之前的笔记，有记录怎么更改网络yum源</p><p><a href="https://www.linux91.cn/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/">https://www.linux91.cn/2018/09/19/linux/linux-centos7-yum-wang-luo-yuan/</a></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>安装python3.6所需要的依赖包</p><pre class="line-numbers language-shell"><code class="language-shell">yum -y install openssl-devel bzip2-devel expat-devel gdbm-devel readline-devel sqlite-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>把准备好的源码包放入系统并解压进入</p><pre class="line-numbers language-shell"><code class="language-shell">tar -zxf Python-3.6.1.tgzcd Python-3.6.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>安装python6.3</p><pre class="line-numbers language-shell"><code class="language-shell">./configure --prefix=/usr/local/makemake altinstallcd/usr/binln -s /usr/local/bin/python3.6 /usr/bin/python3.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>python3.6程序的执行文件：/usr/local/bin/python3.6</li><li>python3.6应用程序目录：/usr/local/lib/python3.6</li><li>pip3的执行文件：/usr/local/bin/pip3.6</li><li>pyenv3的执行文件：/usr/local/bin/pyenv-3.6</li></ol><p>到这一步python3.6就大概算是安装完成了，</p><p>在linux 字符界面上输入python3.6，就可以进入python3.6的操作界面</p><p>因centos7.4系统自带的是python2.7，所以要想进入就要输入python3.6，不可以直接输入python就进入，因为直接输入python进入的就是进入python自带的2.7的操作界面</p><h3 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h3><p>系统中自带的python版本是2.7，将python3.6取代python2.7</p><p>mv /usr/bin/python /usr/bin/python.bak</p><p>ln -s /usr/local/bin/python3 /usr/bin/python</p><p>vim /usr/bin/yum</p><p>将开头的#!/usr/bin/python改成#!/usr/bin/python2.7</p><p>vim /usr/libexec/urlgrabber-ext-down</p><p>将开头的#! /usr/bin/python改成#! /usr/bin/python2.7</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
